import React, { createContext, useState, useEffect, useContext } from 'react';
import receiveMedicineService from '../../services/APINurse/receiveMedicineService';

// Create context
export const MedicineApprovalContext = createContext();

// Custom hook to use the context
export const useMedicineApproval = () => useContext(MedicineApprovalContext);

// Create context for medication administration
export const MedicationAdministrationContext = createContext();

// Custom hook to use the medication administration context
export const useMedicationAdministration = () => useContext(MedicationAdministrationContext);

export const MedicineApprovalProvider = ({ children }) => {
  // States for medicine approvals
  const [medicineRequests, setMedicineRequests] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [selectedRequest, setSelectedRequest] = useState(null);
  
  // Fetch all medicine requests - Using real API
  const fetchMedicineRequests = async () => {
    try {
      setLoading(true);
      
      // Ki·ªÉm tra token tr∆∞·ªõc khi g·ªçi API
      const token = localStorage.getItem('authToken');
      if (!token) {
        console.warn('Kh√¥ng c√≥ token x√°c th·ª±c!');
        setError('Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ ti·∫øp t·ª•c.');
        return;
      }
      
      console.log('ƒêang g·ªçi API l·∫•y danh s√°ch y√™u c·∫ßu thu·ªëc...');
      const data = await receiveMedicineService.getAllMedicineRequests();
      
      if (Array.isArray(data)) {
        console.log(`Nh·∫≠n ƒë∆∞·ª£c ${data.length} y√™u c·∫ßu thu·ªëc`);
        setMedicineRequests(data);
        setError(null);
      } else {
        console.error('D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng ph·∫£i l√† m·∫£ng:', data);
        setError('ƒê·ªãnh d·∫°ng d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá');
      }
    } catch (err) {
      console.error('Error fetching medicine requests:', err);
      setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch y√™u c·∫ßu thu·ªëc: ' + (err.message || ''));
    } finally {
      setLoading(false);
    }
  };
  
  // X·ª≠ l√Ω y√™u c·∫ßu thu·ªëc (ph√™ duy·ªát/t·ª´ ch·ªëi)
  const processMedicineRequest = async (id, requestData) => {
    try {
      setLoading(true);
      
      // G·ªçi API th·ª±c t·∫ø t·ª´ service
      const result = await receiveMedicineService.processMedicineRequest(id, requestData);
      
      if (result.success) {
        // C·∫≠p nh·∫≠t danh s√°ch y√™u c·∫ßu t·ª´ server thay v√¨ ch·ªâ c·∫≠p nh·∫≠t local
        await fetchMedicineRequests();
        setError(null);
      } else {
        throw new Error(result.message || 'Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu');
      }
      
      return result;
    } catch (err) {
      console.error('Error processing medicine request:', err);
      setError('Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu thu·ªëc: ' + err.message);
      return { 
        success: false, 
        message: err.message || "L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu" 
      };
    } finally {
      setLoading(false);
    }
  };

  // TODO: Implement when API is available
  const getMedicineRequestById = async (id) => {
    try {
      setLoading(true);
      // Using mock data until API is available
      const mockRequest = medicineRequests.find(req => req.id === id);
      setSelectedRequest(mockRequest);
      setError(null);
      return mockRequest;
    } catch (err) {
      console.error('Error fetching medicine request details:', err);
      setError('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin chi ti·∫øt y√™u c·∫ßu thu·ªëc');
      return null;
    } finally {
      setLoading(false);
    }
  };
  
  // Utility function - Convert status from API to text and class
  const getStatusInfo = (status) => {
    switch (status) {
      case "PENDING_APPROVAL":
        return {
          text: "Ch·ªù ph√™ duy·ªát",
          class: "status-pending"
        };
      case "APPROVED":
        return {
          text: "ƒê√£ duy·ªát",
          class: "status-approved"
        };
      case "REJECTED":
        return {
          text: "T·ª´ ch·ªëi",
          class: "status-rejected"
        };
      case "CANCELLED":
        return {
          text: "ƒê√£ h·ªßy",
          class: "status-cancelled"
        };
      default:
        return {
          text: "Kh√¥ng x√°c ƒë·ªãnh",
          class: "status-unknown"
        };
    }
  };

  // Load data when component mounts
  useEffect(() => {
    fetchMedicineRequests();
  }, []);

  // Context value for medicine approvals
  const medicineApprovalValue = {
    medicineRequests,
    loading,
    error,
    selectedRequest,
    fetchMedicineRequests,
    processMedicineRequest,
    getMedicineRequestById,
    getStatusInfo
  };
  
  // States for medication administrations
  const [administrations, setAdministrations] = useState([]);
  const [totalItems, setTotalItems] = useState(0);
  const [totalPages, setTotalPages] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);
  const [adminLoading, setAdminLoading] = useState(false);
  const [adminError, setAdminError] = useState(null);
  // Fetch all medication administrations
  const fetchMedicationAdministrations = async (page = 1, size = 10) => {
    setAdminLoading(true);
    console.log('üöÄ Context: fetchMedicationAdministrations called with:', { page, size });
    try {
      const response = await receiveMedicineService.getAllMedicationAdministrations(page, size);
      console.log('‚úÖ Context: API response received:', response);
      
      if (response && response.status === 'success') {
        console.log('‚úÖ Context: Setting administrations data:', response.data.posts);
        setAdministrations(response.data.posts);
        setTotalItems(response.data.totalItems);
        setTotalPages(response.data.totalPages);
        setCurrentPage(page);
        setPageSize(size);
        setAdminError(null); // Clear any previous errors
      } else {
        console.warn('‚ö†Ô∏è Context: Invalid response format:', response);
        setAdminError('ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá');
      }
    } catch (err) {
      console.error('‚ùå Context: Error in fetchMedicationAdministrations:', err);
      setAdminError(`L·ªói: ${err.message || 'ƒê√£ x·∫£y ra l·ªói khi t·∫£i d·ªØ li·ªáu'}`);
    } finally {
      setAdminLoading(false);
    }
  };

  // Add new medication administration
  const addMedicationAdministration = async (data) => {
    setAdminLoading(true);
    try {
      const response = await receiveMedicineService.addMedicationAdministration(data);
      await fetchMedicationAdministrations(currentPage, pageSize);
      return { success: true, data: response };
    } catch (err) {
      setAdminError(`L·ªói: ${err.message || 'ƒê√£ x·∫£y ra l·ªói khi th√™m m·ªõi'}`);
      return { success: false, error: err };
    } finally {
      setAdminLoading(false);
    }
  };

  // Update medication administration
  const updateMedicationAdministration = async (id, data) => {
    setAdminLoading(true);
    try {
      const response = await receiveMedicineService.updateMedicationAdministration(id, data);
      await fetchMedicationAdministrations(currentPage, pageSize);
      return { success: true, data: response };
    } catch (err) {
      setAdminError(`L·ªói: ${err.message || 'ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t'}`);
      return { success: false, error: err };
    } finally {
      setAdminLoading(false);
    }
  };

  // Delete medication administration
  const deleteMedicationAdministration = async (id) => {
    setAdminLoading(true);
    try {
      await receiveMedicineService.deleteMedicationAdministration(id);
      await fetchMedicationAdministrations(currentPage, pageSize);
      return { success: true };
    } catch (err) {
      setAdminError(`L·ªói: ${err.message || 'ƒê√£ x·∫£y ra l·ªói khi x√≥a'}`);
      return { success: false, error: err };
    } finally {
      setAdminLoading(false);
    }
  };

  // Clear errors
  const clearAdminError = () => {
    setAdminError(null);
  };

  // Load medication administrations data on initial mount
  useEffect(() => {
    fetchMedicationAdministrations(currentPage, pageSize);
  }, []);

  // Context value for medication administrations
  const medicationAdminValue = {
    administrations,
    totalItems,
    totalPages,
    currentPage,
    pageSize,
    loading: adminLoading,
    error: adminError,
    fetchMedicationAdministrations,
    addMedicationAdministration,
    updateMedicationAdministration,
    deleteMedicationAdministration,
    clearError: clearAdminError,
    // Add new functions for medication administration
    createMedicationAdministration: async (data) => {
      try {
        console.log('Creating medication administration via context:', data);
        const result = await receiveMedicineService.createMedicationAdministration(data);
        
        if (result.success) {
          // Refresh the administration list
          await fetchMedicationAdministrations(currentPage, pageSize);
        }
        
        return result;
      } catch (error) {
        console.error('Error in createMedicationAdministration context:', error);
        return {
          success: false,
          message: error.message || 'Kh√¥ng th·ªÉ t·∫°o b·∫£n ghi cung c·∫•p thu·ªëc'
        };
      }
    },
    uploadConfirmationImage: async (administrationId, imageFile) => {
      try {
        console.log('Uploading confirmation image via context:', administrationId);
        const result = await receiveMedicineService.uploadConfirmationImage(administrationId, imageFile);
        
        if (result.success) {
          // Refresh the administration list
          await fetchMedicationAdministrations(currentPage, pageSize);
        }
        
        return result;
      } catch (error) {
        console.error('Error in uploadConfirmationImage context:', error);
        return {
          success: false,
          message: error.message || 'Kh√¥ng th·ªÉ t·∫£i l√™n ·∫£nh x√°c nh·∫≠n'
        };
      }
    },
    getRecentMedicationAdministrations: async (page = 1, size = 10) => {
      try {
        console.log(`Getting recent medication administrations via context (page ${page}, size ${size})`);
        const result = await receiveMedicineService.getRecentMedicationAdministrations(page, size);
        return result;
      } catch (error) {
        console.error('Error in getRecentMedicationAdministrations context:', error);
        return {
          success: false,
          message: error.message || 'Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ d√πng thu·ªëc g·∫ßn ƒë√¢y'
        };
      }
    }
  };

  return (
    <MedicineApprovalContext.Provider value={medicineApprovalValue}>
      <MedicationAdministrationContext.Provider value={medicationAdminValue}>
        {children}
      </MedicationAdministrationContext.Provider>
    </MedicineApprovalContext.Provider>
  );
};

import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
// Import fixed CSS file with prefixed classes
import "./styles/SendMedicineFixed.css";
import { useStudentData } from "../../../../context/StudentDataContext";
import { useAuth } from "../../../../context/AuthContext";
import medicationRequestService from "../../../../services/medicationRequestService";
// import NotificationModal from "./components/NotificationModal";
// import {
//   // handleApiError,
//   // validateMedicineForm,
//   // validateImageFile,
//   formatDisplayDate,
//   // formatApiDate,
//   // getStatusInfo,
// } from "./utils/errorHandler";

const SendMedicine = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [formSubmitted, setFormSubmitted] = useState(false);
  const { API_ENDPOINTS } = useAuth();

  // State cho tabs v√† l·ªãch s·ª≠
  const [activeTab, setActiveTab] = useState("form");
  const [medicationHistory, setMedicationHistory] = useState([]);
  const [isHistoryLoading, setIsHistoryLoading] = useState(false);
  const [historyError, setHistoryError] = useState(null);
  const [selectedStudentFilter, setSelectedStudentFilter] = useState("");
  const [successTimer, setSuccessTimer] = useState(null);
  const [notificationModal, setNotificationModal] = useState({
    show: false,
    type: "success",
    title: "",
    message: "",
  });

  const [formData, setFormData] = useState({
    studentId: "",
    medicineName: "",
    dosage: "",
    frequency: "",
    startDate: "",
    endDate: "",
    timeToTake: [],
    notes: "",
    prescriptionImage: null,
  });

  // State for temporary image upload
  const [tempImageUpload, setTempImageUpload] = useState({
    file: null,
    preview: null,
    uploadedImageBase64: null,
    isUploading: false,
    uploadError: null,
    tempRequestId: null,
  });

  const [errors, setErrors] = useState({});

  // State cho modal c·∫≠p nh·∫≠t
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editFormData, setEditFormData] = useState({});
  const [modalErrors, setModalErrors] = useState({});
  const [modalPrescriptionImage, setModalPrescriptionImage] = useState(null);
  const [modalImagePreview, setModalImagePreview] = useState(null);

  // State cho confirmation modal
  const [isConfirmationModalOpen, setIsConfirmationModalOpen] = useState(false);
  const [confirmationData, setConfirmationData] = useState(null);
  const [confirmationList, setConfirmationList] = useState([]);
  const [currentConfirmationIndex, setCurrentConfirmationIndex] = useState(0);
  const [confirmationLoading, setConfirmationLoading] = useState(false);

  const { students } = useStudentData();

  const timeOptions = [
    { value: "before_breakfast", label: "Tr∆∞·ªõc b·ªØa s√°ng" },
    { value: "after_breakfast", label: "Sau b·ªØa s√°ng" },
    { value: "before_lunch", label: "Tr∆∞·ªõc b·ªØa tr∆∞a" },
    { value: "after_lunch", label: "Sau b·ªØa tr∆∞a" },
    { value: "before_dinner", label: "Tr∆∞·ªõc b·ªØa t·ªëi" },
    { value: "after_dinner", label: "Sau b·ªØa t·ªëi" },
    { value: "bedtime", label: "Tr∆∞·ªõc khi ƒëi ng·ªß" },
  ];

  useEffect(() => {
    if (formSubmitted) {
      const timer = setTimeout(() => {
        setFormSubmitted(false);
        setActiveTab("form");
      }, 5000);
      setSuccessTimer(timer);
      return () => clearTimeout(timer);
    }
  }, [formSubmitted]);

  useEffect(() => {
    return () => {
      if (successTimer) clearTimeout(successTimer);
    };
  }, [successTimer]);

  useEffect(() => {
    if (notificationModal.show) {
      const timer = setTimeout(() => {
        setNotificationModal({ ...notificationModal, show: false });
      }, 3000);
      return () => clearTimeout(timer);
    }
  }, [notificationModal.show]);

  const showNotification = (type, title, message) => {
    setNotificationModal({ show: true, type, title, message });
  };

  // Helper function ƒë·ªÉ format date
  const formatDate = (dateString) => {
    if (!dateString) return "N/A";
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString("vi-VN", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
        hour: "2-digit",
        minute: "2-digit",
      });
    } catch (error) {
      return "N/A";
    }
  };

  // Helper function ƒë·ªÉ l·∫•y label tr·∫°ng th√°i
  const getStatusLabel = (status) => {
    const statusMap = {
      PENDING_APPROVAL: "Ch·ªù duy·ªát",
      APPROVED: "ƒê√£ duy·ªát",
      REJECTED: "T·ª´ ch·ªëi",
      FULLY_TAKEN: "ƒê√£ u·ªëng ƒë·ªß",
      PARTIALLY_TAKEN: "U·ªëng m·ªôt ph·∫ßn",
      CANCELLED: "ƒê√£ h·ªßy",
    };
    return statusMap[status] || status || "Kh√¥ng x√°c ƒë·ªãnh";
  };

  // Helper function ƒë·ªÉ parse time of day
  const parseTimeOfDay = (timeOfDay) => {
    if (!timeOfDay) return [];
    if (Array.isArray(timeOfDay)) return timeOfDay;
    if (typeof timeOfDay === "string") {
      try {
        // N·∫øu l√† JSON string
        return JSON.parse(timeOfDay);
      } catch {
        // N·∫øu l√† string ƒë∆°n gi·∫£n, split b·∫±ng d·∫•u ph·∫©y
        return timeOfDay.split(",").map((time) => time.trim());
      }
    }
    return [];
  };

  // Helper function ƒë·ªÉ l·∫•y label th·ªùi gian u·ªëng thu·ªëc
  const getTimeOfDayLabel = (time) => {
    console.log(
      `üîç getTimeOfDayLabel input - Type: ${typeof time}, Value:`,
      time
    );

    // N·∫øu time l√† array, l·∫•y ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n
    if (Array.isArray(time)) {
      console.log(`‚ö†Ô∏è Time is array, taking first element: ${time[0]}`);
      time = time[0];
    }

    const timeLabels = {
      // Mapping cho c√°c gi√° tr·ªã t·ª´ timeOptions
      before_breakfast: "Tr∆∞·ªõc b·ªØa s√°ng",
      after_breakfast: "Sau b·ªØa s√°ng",
      before_lunch: "Tr∆∞·ªõc b·ªØa tr∆∞a",
      after_lunch: "Sau b·ªØa tr∆∞a",
      before_dinner: "Tr∆∞·ªõc b·ªØa t·ªëi",
      after_dinner: "Sau b·ªØa t·ªëi",
      bedtime: "Tr∆∞·ªõc khi ƒëi ng·ªß",
      // Mapping cho c√°c gi√° tr·ªã c≈© (ƒë·ªÉ t∆∞∆°ng th√≠ch ng∆∞·ª£c)
      MORNING: "S√°ng",
      AFTERNOON: "Chi·ªÅu",
      EVENING: "T·ªëi",
      NIGHT: "ƒê√™m",
      BEFORE_MEAL: "Tr∆∞·ªõc ƒÉn",
      AFTER_MEAL: "Sau ƒÉn",
      WITH_MEAL: "Trong b·ªØa ƒÉn",
    };

    // N·∫øu c√≥ mapping tr·ª±c ti·∫øp, s·ª≠ d·ª•ng n√≥
    if (timeLabels[time]) {
      console.log(`‚úÖ Found mapping: ${time} ‚Üí ${timeLabels[time]}`);
      return timeLabels[time];
    }

    // N·∫øu l√† th·ªùi gian c·ª• th·ªÉ (HH:MM), chuy·ªÉn ƒë·ªïi th√†nh label ti·∫øng Vi·ªát
    if (typeof time === "string" && time.match(/^\d{2}:\d{2}$/)) {
      const hour = parseInt(time.split(":")[0]);

      if (hour >= 6 && hour < 11) {
        return "S√°ng";
      } else if (hour >= 11 && hour < 14) {
        return "Tr∆∞a";
      } else if (hour >= 14 && hour < 18) {
        return "Chi·ªÅu";
      } else if (hour >= 18 && hour < 22) {
        return "T·ªëi";
      } else {
        return "ƒê√™m";
      }
    }

    return time || "Kh√¥ng x√°c ƒë·ªãnh";
  };

  // Component ri√™ng cho time tag ƒë·ªÉ ƒë·∫£m b·∫£o render ƒë√∫ng
  const TimeTag = ({ time, index, requestId }) => {
    const label = getTimeOfDayLabel(time);
    console.log(
      `üè∑Ô∏è TimeTag render - Request ${requestId} - Time: ${time} ‚Üí Label: ${label}`
    );
    return (
      <span
        className="fix-time-tag"
        key={`time-${time}-${index}`}
        style={{
          background: "var(--fix-primary-color)",
          color: "white",
          padding: "2px 8px",
          borderRadius: "12px",
          fontSize: "0.75rem",
          fontWeight: "500",
          display: "inline-block",
        }}
        title={`Debug: Req ${requestId} - ${time} ‚Üí ${label}`}
      >
        {label}
      </span>
    );
  };

  // Helper function ƒë·ªÉ format timestamp
  const formatTimestamp = (timestamp) => {
    if (!timestamp) return "Kh√¥ng x√°c ƒë·ªãnh";
    try {
      let date;

      // Handle array format from backend [year, month, day, hour, minute, second]
      if (Array.isArray(timestamp)) {
        if (timestamp.length >= 3) {
          // Month is 0-indexed in JavaScript Date constructor
          const year = timestamp[0];
          const month = timestamp[1] - 1; // Convert to 0-indexed
          const day = timestamp[2];
          const hour = timestamp[3] || 0;
          const minute = timestamp[4] || 0;
          const second = timestamp[5] || 0;

          date = new Date(year, month, day, hour, minute, second);
        } else {
          return "Kh√¥ng x√°c ƒë·ªãnh";
        }
      }
      // Handle string format
      else if (typeof timestamp === "string") {
        date = new Date(timestamp);
      }
      // Handle Date object
      else if (timestamp instanceof Date) {
        date = timestamp;
      } else {
        return "Kh√¥ng x√°c ƒë·ªãnh";
      }

      // Check if date is valid
      if (isNaN(date.getTime())) {
        return "Kh√¥ng x√°c ƒë·ªãnh";
      }

      return date.toLocaleDateString("vi-VN", {
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
      });
    } catch (error) {
      console.error("Error formatting timestamp:", error);
      return "Kh√¥ng x√°c ƒë·ªãnh";
    }
  };

  // Function ƒë·ªÉ l·ªçc history theo student
  const getFilteredHistory = () => {
    if (!selectedStudentFilter) return medicationHistory;
    return medicationHistory.filter(
      (request) => request.studentId?.toString() === selectedStudentFilter
    );
  };

  // Function ƒë·ªÉ x√≥a request
  const handleDeleteRequest = async (requestId) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a y√™u c·∫ßu n√†y?")) {
      return;
    }

    try {
      setLoading(true);
      const token = localStorage.getItem("authToken");
      if (!token) {
        showNotification("error", "L·ªói x√°c th·ª±c", "Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i");
        return;
      }

      const response = await fetch(
        `${
          import.meta.env.VITE_BACKEND_URL
        }/api/v1/parent-medication-requests/cancel-request/${requestId}`,
        {
          method: "DELETE",
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      if (!response.ok) {
        throw new Error("Kh√¥ng th·ªÉ x√≥a y√™u c·∫ßu");
      }

      showNotification("success", "X√≥a th√†nh c√¥ng", "Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c x√≥a");
      fetchMedicationHistory();
    } catch (error) {
      console.error("Error deleting request:", error);
      showNotification(
        "error",
        "L·ªói",
        "Kh√¥ng th·ªÉ x√≥a y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i."
      );
    } finally {
      setLoading(false);
    }
  };

  const fetchMedicationHistory = async () => {
    setIsHistoryLoading(true);
    setHistoryError(null);
    try {
      const medicationHistory =
        await medicationRequestService.fetchMedicationHistory();
      console.log("üìã Medication History Data:", medicationHistory);
      if (medicationHistory && medicationHistory.length > 0) {
        console.log("üìã First item timeOfDay:", medicationHistory[0].timeOfDay);
        console.log(
          "üìã First item responseDate:",
          medicationHistory[0].responseDate
        );
      }
      setMedicationHistory(medicationHistory || []);
    } catch (error) {
      setHistoryError(
        error.response?.data?.message ||
          error.message ||
          "Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ y√™u c·∫ßu thu·ªëc"
      );
      console.error("Error fetching medication history:", error);
    } finally {
      setIsHistoryLoading(false);
    }
  };

  // useEffect ƒë·ªÉ fetch history khi chuy·ªÉn tab
  useEffect(() => {
    if (activeTab === "history") {
      fetchMedicationHistory();
    }
  }, [activeTab]);

  const refreshData = () => {
    if (activeTab === "history") fetchMedicationHistory();
    if (activeTab === "form") {
      setFormData({
        studentId: "",
        medicineName: "",
        dosage: "",
        frequency: "",
        startDate: "",
        endDate: "",
        timeToTake: [],
        notes: "",
        prescriptionImage: null,
      });
      setErrors({});
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    if (name === "frequency") {
      if (value && !/^[0-9]+$/.test(value)) {
        setErrors({
          ...errors,
          frequency:
            "T·∫ßn su·∫•t ch·ªâ ƒë∆∞·ª£c nh·∫≠p s·ªë, kh√¥ng ch·ª©a ch·ªØ hay k√Ω t·ª± ƒë·∫∑c bi·ªát",
        });
        return;
      }
    }
    if (name === "dosage") {
      if (
        value &&
        !/^[0-9\s\.\,mlvi√™ngi·ªçttablettabletsmlmgmcgvi√™nggamicrogram]+$/i.test(
          value
        )
      ) {
        setErrors({
          ...errors,
          dosage:
            "Li·ªÅu l∆∞·ª£ng ch·ªâ ƒë∆∞·ª£c ch·ª©a s·ªë v√† ƒë∆°n v·ªã nh∆∞: ml, vi√™n, gi·ªçt, mg",
        });
        return;
      }
    }
    if (name === "startDate") {
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const selectedDate = new Date(value);
      selectedDate.setHours(0, 0, 0, 0);
      if (selectedDate < today) {
        setErrors({
          ...errors,
          startDate: "Ng√†y b·∫Øt ƒë·∫ßu ph·∫£i l√† t·ª´ h√¥m nay tr·ªü ƒëi",
        });
        return;
      }
    }
    setFormData({ ...formData, [name]: value });
    if (errors[name]) setErrors({ ...errors, [name]: null });
  };

  const handleTimeChange = (e) => {
    const { value, checked } = e.target;
    setFormData({
      ...formData,
      timeToTake: checked
        ? [...formData.timeToTake, value]
        : formData.timeToTake.filter((t) => t !== value),
    });
    if (errors.timeToTake) setErrors({ ...errors, timeToTake: null });
  };

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > 5 * 1024 * 1024) {
        setTempImageUpload({
          ...tempImageUpload,
          uploadError: "File kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 5MB",
        });
        return;
      }
      if (!["image/jpeg", "image/png", "image/jpg"].includes(file.type)) {
        setTempImageUpload({
          ...tempImageUpload,
          uploadError: "Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (JPEG, PNG, JPG)",
        });
        return;
      }
      setTempImageUpload({ ...tempImageUpload, uploadError: null });
      const reader = new FileReader();
      reader.onloadend = () =>
        setTempImageUpload((prev) => ({
          ...prev,
          file,
          preview: reader.result,
        }));
      reader.readAsDataURL(file);
      if (errors.prescriptionImage)
        setErrors({ ...errors, prescriptionImage: null });
    }
  };

  const uploadImageTemporary = async () => {
    if (!tempImageUpload.file) {
      setTempImageUpload({
        ...tempImageUpload,
        uploadError: "Vui l√≤ng ch·ªçn file ·∫£nh tr∆∞·ªõc",
      });
      return;
    }
    console.log(
      "‚ö° Image file prepared for upload:",
      tempImageUpload.file.name
    );
    setTempImageUpload((prev) => ({
      ...prev,
      isUploading: false,
      uploadError: null,
    }));
    showNotification(
      "success",
      "·∫¢nh ƒë√£ s·∫µn s√†ng!",
      "·∫¢nh s·∫Ω ƒë∆∞·ª£c upload khi b·∫°n g·ª≠i y√™u c·∫ßu thu·ªëc."
    );
  };

  const validateForm = () => {
    const newErrors = {};
    if (!formData.studentId) newErrors.studentId = "Vui l√≤ng ch·ªçn h·ªçc sinh";
    if (!formData.medicineName)
      newErrors.medicineName = "Vui l√≤ng nh·∫≠p t√™n thu·ªëc";
    if (!formData.dosage) newErrors.dosage = "Vui l√≤ng nh·∫≠p li·ªÅu l∆∞·ª£ng";
    if (!formData.frequency)
      newErrors.frequency = "Vui l√≤ng nh·∫≠p t·∫ßn su·∫•t d√πng thu·ªëc";
    if (!formData.startDate) newErrors.startDate = "Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu";
    if (!formData.endDate) newErrors.endDate = "Vui l√≤ng ch·ªçn ng√†y k·∫øt th√∫c";
    if (
      formData.startDate &&
      formData.endDate &&
      new Date(formData.startDate) > new Date(formData.endDate)
    ) {
      newErrors.endDate = "Ng√†y k·∫øt th√∫c ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu";
    }
    if (formData.timeToTake.length === 0)
      newErrors.timeToTake = "Vui l√≤ng ch·ªçn th·ªùi gian u·ªëng thu·ªëc";
    console.log("Form validation result:", {
      hasErrors: Object.keys(newErrors).length > 0,
      errors: newErrors,
    });
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    console.log("üöÄ Form submit started...");
    if (!validateForm()) {
      console.log("‚ùå Validation failed");
      return;
    }
    setLoading(true);
    try {
      const token = localStorage.getItem("authToken");
      if (!token) {
        console.error("‚ùå No auth token");
        showNotification("error", "L·ªói x√°c th·ª±c", "Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i");
        setLoading(false);
        return;
      }
      const requestData = {
        studentId: parseInt(formData.studentId),
        medicineName: formData.medicineName,
        dosage: formData.dosage,
        frequency: parseInt(formData.frequency),
        startDate: formData.startDate,
        endDate: formData.endDate,
        timeToTake: formData.timeToTake,
        notes: formData.notes || "",
        prescriptionImageBase64: null,
      };
      console.log("Posting request:", requestData);
      const apiUrl = `${
        import.meta.env.VITE_BACKEND_URL
      }/api/v1/parent-medication-requests/submit-request`;
      const response = await fetch(apiUrl, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestData),
      });
      console.log("üì® Status:", response.status);
      if (!response.ok) {
        const errText = await response.text();
        throw new Error(`API Error: ${response.status} - ${errText}`);
      }
      const resData = await response.json();
      let requestId = resData.data?.id || resData.id;
      if (!requestId) throw new Error("Kh√¥ng th·ªÉ l·∫•y ID c·ªßa y√™u c·∫ßu v·ª´a t·∫°o");
      if (tempImageUpload.file) {
        console.log("Uploading image for:", requestId);
        const uploadFormData = new FormData();
        uploadFormData.append("image", tempImageUpload.file);
        const uploadUrl = `${
          import.meta.env.VITE_BACKEND_URL
        }/api/v1/parent-medication-requests/${requestId}/upload-confirmation-image`;
        const uploadRes = await fetch(uploadUrl, {
          method: "POST",
          headers: { Authorization: `Bearer ${token}` },
          body: uploadFormData,
        });
        if (!uploadRes.ok) console.warn("‚ö†Ô∏è Image upload failed");
      }
      if (activeTab === "history") fetchMedicationHistory();
      setFormData({
        studentId: "",
        medicineName: "",
        dosage: "",
        frequency: "",
        startDate: "",
        endDate: "",
        timeToTake: [],
        notes: "",
        prescriptionImage: null,
      });
      setTempImageUpload({
        file: null,
        preview: null,
        uploadedImageBase64: null,
        isUploading: false,
        uploadError: null,
        tempRequestId: null,
      });
      showNotification(
        "success",
        "G·ª≠i y√™u c·∫ßu th√†nh c√¥ng!",
        tempImageUpload.file
          ? "Y√™u c·∫ßu d√πng thu·ªëc v√† ·∫£nh ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng."
          : "Y√™u c·∫ßu d√πng thu·ªëc ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng."
      );
    } catch (error) {
      console.error("Submit error:", error);
      const msg =
        error.message || error.response?.data?.message || "C√≥ l·ªói x·∫£y ra";
      showNotification("error", "G·ª≠i y√™u c·∫ßu th·∫•t b·∫°i!", msg);
    } finally {
      setLoading(false);
    }
  };

  // ... rest of handlers unchanged ...

  // Add handler for updating requests
  const [isUpdating, setIsUpdating] = useState(false);

  const handleUpdateRequest = (requestId) => {
    const requestToUpdate = medicationHistory.find((r) => r.id === requestId);
    if (!requestToUpdate) {
      showNotification("error", "L·ªói", "Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu thu·ªëc!");
      return;
    }
    if (requestToUpdate.status !== "PENDING_APPROVAL") {
      showNotification(
        "error",
        "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t",
        "Ch·ªâ c√≥ th·ªÉ c·∫≠p nh·∫≠t c√°c y√™u c·∫ßu ƒëang ch·ªù duy·ªát"
      );
      return;
    }
    setEditFormData({
      id: requestToUpdate.id,
      medicationName: requestToUpdate.medicationName || "",
      dosageInstructions: requestToUpdate.dosageInstructions || "",
      frequencyPerDay: requestToUpdate.frequencyPerDay || "",
      startDate: requestToUpdate.startDate?.substring(0, 10) || "",
      endDate: requestToUpdate.endDate?.substring(0, 10) || "",
      timeToTake: [],
      specialInstructions: "",
      submittedAt: requestToUpdate.submittedAt,
      healthProfileId: requestToUpdate.healthProfileId,
      studentName: requestToUpdate.studentName,
      requestedBy: requestToUpdate.requestedBy,
      requestedByAccountId: requestToUpdate.requestedByAccountId,
      parentProvided: requestToUpdate.parentProvided,
      studentClass: requestToUpdate.studentClass,
      studentId: requestToUpdate.studentId,
      prescriptionImage: null,
      prescriptionImageUrl: requestToUpdate.prescriptionImageUrl || null,
    });

    setModalPrescriptionImage(null);
    console.log("Request to update:", requestToUpdate);

    if (
      requestToUpdate.prescriptionImageUrl &&
      requestToUpdate.prescriptionImageUrl.trim() !== ""
    ) {
      let imageUrl = requestToUpdate.prescriptionImageUrl;
      // If it's a relative path, make it absolute
      if (!imageUrl.startsWith("http")) {
        imageUrl = `${import.meta.env.VITE_BACKEND_URL}${
          imageUrl.startsWith("/") ? "" : "/"
        }${imageUrl}`;
      }
      setModalImagePreview(imageUrl);
      console.log("Set modal image preview to:", imageUrl);
    } else {
      setModalImagePreview(null);
      console.log("No prescription image URL found");
    }

    setIsModalOpen(true);
  };

  // Function to fetch confirmation data
  const fetchConfirmationData = async (requestId) => {
    setConfirmationLoading(true);
    try {
      const token = localStorage.getItem("authToken");
      if (!token) {
        showNotification("error", "L·ªói x√°c th·ª±c", "Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i");
        setConfirmationLoading(false);
        return;
      }

      const response = await fetch(
        `${
          import.meta.env.VITE_BACKEND_URL
        }/api/v1/medication-administrations/all/medication-instruction/${requestId}`,
        {
          method: "GET",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        }
      );

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const responseData = await response.json();
      console.log("Confirmation API Response:", responseData);

      if (
        responseData.status === "success" &&
        responseData.data &&
        responseData.data.length > 0
      ) {
        setConfirmationList(responseData.data);
        setCurrentConfirmationIndex(0);
        setConfirmationData(responseData.data[0]);
        setIsConfirmationModalOpen(true);
      } else {
        showNotification(
          "error",
          "Kh√¥ng c√≥ d·ªØ li·ªáu",
          "Kh√¥ng t√¨m th·∫•y th√¥ng tin x√°c nh·∫≠n cho y√™u c·∫ßu n√†y."
        );
      }
    } catch (error) {
      console.error("Error fetching confirmation data:", error);
      let errorMessage = "Kh√¥ng th·ªÉ t·∫£i th√¥ng tin x√°c nh·∫≠n. Vui l√≤ng th·ª≠ l·∫°i.";
      if (error.response) {
        switch (error.response.status) {
          case 404:
            errorMessage = "Kh√¥ng t√¨m th·∫•y th√¥ng tin x√°c nh·∫≠n cho y√™u c·∫ßu n√†y.";
            break;
          case 403:
            errorMessage = "B·∫°n kh√¥ng c√≥ quy·ªÅn xem th√¥ng tin n√†y.";
            break;
          case 500:
            errorMessage = "L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau.";
            break;
          default:
            errorMessage =
              error.response.data?.message || error.message || errorMessage;
        }
      }
      showNotification("error", "L·ªói t·∫£i th√¥ng tin", errorMessage);
    } finally {
      setConfirmationLoading(false);
    }
  };
  // Functions cho pagination trong confirmation modal
  const goToNextConfirmation = () => {
    if (currentConfirmationIndex < confirmationList.length - 1) {
      const nextIndex = currentConfirmationIndex + 1;
      setCurrentConfirmationIndex(nextIndex);
      setConfirmationData(confirmationList[nextIndex]);
    }
  };

  const goToPreviousConfirmation = () => {
    if (currentConfirmationIndex > 0) {
      const prevIndex = currentConfirmationIndex - 1;
      setCurrentConfirmationIndex(prevIndex);
      setConfirmationData(confirmationList[prevIndex]);
    }
  };

  const goToConfirmationPage = (index) => {
    if (index >= 0 && index < confirmationList.length) {
      setCurrentConfirmationIndex(index);
      setConfirmationData(confirmationList[index]);
    }
  };

  // Keyboard navigation for confirmation modal
  useEffect(() => {
    const handleKeyPress = (event) => {
      if (isConfirmationModalOpen && confirmationList.length >= 1) {
        switch (event.key) {
          case "ArrowLeft":
            event.preventDefault();
            goToPreviousConfirmation();
            break;
          case "ArrowRight":
            event.preventDefault();
            goToNextConfirmation();
            break;
          case "Home":
            event.preventDefault();
            goToConfirmationPage(0);
            break;
          case "End":
            event.preventDefault();
            goToConfirmationPage(confirmationList.length - 1);
            break;
          default:
            // Check for number keys (1-9)
            const num = parseInt(event.key);
            if (!isNaN(num) && num >= 1 && num <= confirmationList.length) {
              event.preventDefault();
              goToConfirmationPage(num - 1);
            }
            break;
        }
      }
    };

    if (isConfirmationModalOpen) {
      document.addEventListener("keydown", handleKeyPress);
      return () => document.removeEventListener("keydown", handleKeyPress);
    }
  }, [
    isConfirmationModalOpen,
    confirmationList.length,
    currentConfirmationIndex,
    goToPreviousConfirmation,
    goToNextConfirmation,
    goToConfirmationPage,
  ]);

  // Function ƒë·ªÉ format timestamp cho confirmation
  const formatConfirmationTimestamp = (timestamp) => {
    console.log("formatConfirmationTimestamp input:", timestamp);

    if (!timestamp) return "Kh√¥ng c√≥ th√¥ng tin";

    try {
      let date;

      // Ki·ªÉm tra n·∫øu timestamp l√† m·∫£ng Java LocalDateTime
      if (Array.isArray(timestamp)) {
        console.log("Processing array timestamp:", timestamp);

        if (timestamp.length >= 5) {
          const [year, month, day, hour = 0, minute = 0, second = 0] =
            timestamp;
          // Java month l√† 1-based, JavaScript month l√† 0-based
          date = new Date(year, month - 1, day, hour, minute, second);
          console.log("Created date from array:", date);
        } else {
          console.log("Array too short:", timestamp.length);
          return "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá";
        }
      } else {
        // X·ª≠ l√Ω timestamp d·∫°ng string ho·∫∑c number
        date = new Date(timestamp);
      }

      if (isNaN(date.getTime())) {
        console.log("Invalid date created:", date);
        return "Th·ªùi gian kh√¥ng h·ª£p l·ªá";
      }

      // Format th√†nh dd/MM/yyyy HH:mm:ss
      const result = date.toLocaleDateString("vi-VN", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
        hour12: false,
      });

      console.log("formatConfirmationTimestamp result:", result);
      return result;
    } catch (error) {
      console.error("Error in formatConfirmationTimestamp:", error);
      return "L·ªói x·ª≠ l√Ω th·ªùi gian";
    }
  };

  // Function ƒë·ªÉ l·∫•y label v√† class cho administration status
  const getAdministrationStatusInfo = (status) => {
    const statusMap = {
      PENDING_APPROVAL: {
        label: "Ch·ªù x√°c nh·∫≠n",
        class: "pending",
      },
      APPROVED: {
        label: "ƒê√£ x√°c nh·∫≠n",
        class: "success",
      },
      REJECTED: {
        label: "T·ª´ ch·ªëi",
        class: "refused",
      },
      FULLY_TAKEN: {
        label: "ƒê√£ u·ªëng ƒë·∫ßy ƒë·ªß",
        class: "success",
      },
      PARTIALLY_TAKEN: {
        label: "ƒê√£ u·ªëng m·ªôt ph·∫ßn",
        class: "partial",
      },
      EXPIRED: {
        label: "H·∫øt h·∫°n",
        class: "refused",
      },
    };

    return (
      statusMap[status] || {
        label: status || "Kh√¥ng x√°c ƒë·ªãnh",
        class: "unknown",
      }
    );
  };

  const handleModalInputChange = (e) => {
    const { name, value } = e.target;
    setEditFormData({
      ...editFormData,
      [name]: value,
    });
  };

  const handleModalTimeChange = (e) => {
    const { value, checked } = e.target;
    if (checked) {
      setEditFormData({
        ...editFormData,
        timeToTake: [...editFormData.timeToTake, value],
      });
    } else {
      setEditFormData({
        ...editFormData,
        timeToTake: editFormData.timeToTake.filter((time) => time !== value),
      });
    }
  };

  // Th√™m handler cho modal image upload
  const handleModalImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > 5 * 1024 * 1024) {
        setModalErrors({
          ...modalErrors,
          prescriptionImage: "File kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 5MB",
        });
        return;
      }

      if (!["image/jpeg", "image/png", "image/jpg"].includes(file.type)) {
        setModalErrors({
          ...modalErrors,
          prescriptionImage: "Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (JPEG, PNG, JPG)",
        });
        return;
      }

      setModalPrescriptionImage(file);

      // T·∫°o preview
      const reader = new FileReader();
      reader.onloadend = () => {
        setModalImagePreview(reader.result);
      };
      reader.readAsDataURL(file);
    }
  };

  // Th√™m h√†m ki·ªÉm tra form tr∆∞·ªõc khi submit
  const validateModalForm = () => {
    const newErrors = {};

    if (!editFormData.medicationName) {
      newErrors.medicationName = "Vui l√≤ng nh·∫≠p t√™n thu·ªëc";
    }

    if (!editFormData.dosageInstructions) {
      newErrors.dosageInstructions = "Vui l√≤ng nh·∫≠p li·ªÅu l∆∞·ª£ng";
    }

    // S·ª≠a l·ªói x√°c th·ª±c frequencyPerDay
    if (
      !editFormData.frequencyPerDay ||
      isNaN(Number(editFormData.frequencyPerDay)) ||
      Number(editFormData.frequencyPerDay) < 1
    ) {
      newErrors.frequencyPerDay = "Vui l√≤ng nh·∫≠p s·ªë l·∫ßn d√πng thu·ªëc h·ª£p l·ªá";
    }

    if (!editFormData.startDate) {
      newErrors.startDate = "Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu";
    }

    if (!editFormData.endDate) {
      newErrors.endDate = "Vui l√≤ng ch·ªçn ng√†y k·∫øt th√∫c";
    }

    if (editFormData.timeToTake.length === 0) {
      newErrors.timeToTake = "Vui l√≤ng ch·ªçn th·ªùi ƒëi·ªÉm u·ªëng thu·ªëc";
    }

    setModalErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleModalFormSubmit = async (e) => {
    e.preventDefault();

    if (!validateModalForm()) {
      showNotification(
        "error",
        "Th√¥ng tin kh√¥ng h·ª£p l·ªá",
        "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin"
      );
      return;
    }

    setLoading(true);

    try {
      // Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ g·ª≠i
      const formData = new FormData();
      formData.append("medicationName", editFormData.medicationName);
      formData.append("dosageInstructions", editFormData.dosageInstructions);
      // S·ª≠a l·ªói x·ª≠ l√Ω frequencyPerDay
      formData.append(
        "frequencyPerDay",
        editFormData.frequencyPerDay.toString()
      );
      formData.append("startDate", formatDateForAPI(editFormData.startDate));
      formData.append("endDate", formatDateForAPI(editFormData.endDate));
      formData.append("timeToTake", JSON.stringify(editFormData.timeToTake));
      formData.append(
        "specialInstructions",
        editFormData.specialInstructions || ""
      );

      // Th√™m h√¨nh ·∫£nh n·∫øu c√≥
      if (modalPrescriptionImage) {
        formData.append("prescriptionImage", modalPrescriptionImage);
      }

      // L·∫•y token x√°c th·ª±c
      const token = localStorage.getItem("authToken");
      if (!token) {
        showNotification(
          "error",
          "L·ªói x√°c th·ª±c",
          "Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i"
        );
        setLoading(false);
        return;
      }

      // X·ª≠ l√Ω h√¨nh ·∫£nh n·∫øu c√≥
      let imageBase64 = null;
      if (modalPrescriptionImage) {
        imageBase64 = await medicationRequestService.convertImageToBase64(
          modalPrescriptionImage
        );
      }

      // Chu·∫©n b·ªã d·ªØ li·ªáu theo ƒë·ªãnh d·∫°ng JSON y√™u c·∫ßu b·ªüi API
      const updateData = {
        // Th√¥ng tin h·ªçc sinh
        studentId: parseInt(
          editFormData.studentId || editFormData.healthProfileId
        ),

        // Th√¥ng tin thu·ªëc - s·ª≠ d·ª•ng ƒë√∫ng t√™n tr∆∞·ªùng theo y√™u c·∫ßu
        medicineName: editFormData.medicationName.trim(),
        dosage: editFormData.dosageInstructions.trim(),
        frequency: parseInt(editFormData.frequencyPerDay) || 1,

        // Th·ªùi gian d√πng thu·ªëc
        startDate: editFormData.startDate,
        endDate: editFormData.endDate,
        timeToTake: editFormData.timeToTake, // M·∫£ng th·ªùi gian u·ªëng thu·ªëc

        // Ghi ch√∫ b·ªï sung
        notes: editFormData.specialInstructions?.trim() || "",

        // H√¨nh ·∫£nh ƒë∆°n thu·ªëc n·∫øu c√≥
        prescriptionImageBase64: imageBase64,
      };

      // S·ª≠ d·ª•ng service ƒë·ªÉ c·∫≠p nh·∫≠t y√™u c·∫ßu
      await medicationRequestService.updateMedicationRequest(
        editFormData.id,
        updateData
      );

      // Show success notification modal
      showNotification(
        "success",
        "C·∫≠p nh·∫≠t th√†nh c√¥ng!",
        "Y√™u c·∫ßu g·ª≠i thu·ªëc ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng."
      );
      setIsModalOpen(false);
      fetchMedicationHistory();
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t y√™u c·∫ßu thu·ªëc:", error);

      // Hi·ªÉn th·ªã chi ti·∫øt l·ªói
      if (error.response) {
        console.error("D·ªØ li·ªáu l·ªói:", error.response.data);
        console.error("M√£ tr·∫°ng th√°i:", error.response.status);
      }

      let errorMessage;
      if (typeof error.response?.data === "string") {
        errorMessage = error.response.data;
      } else if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      } else {
        errorMessage =
          "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t y√™u c·∫ßu thu·ªëc. Vui l√≤ng th·ª≠ l·∫°i sau.";
      }

      // Show error notification modal
      showNotification("error", "C·∫≠p nh·∫≠t th·∫•t b·∫°i!", errorMessage);
    } finally {
      setLoading(false);
    }
  };

  // H√†m ƒë·ªÉ format ng√†y cho API
  const formatDateForAPI = (dateString) => {
    // N·∫øu ng√†y ƒë√£ c√≥ ƒë·ªãnh d·∫°ng yyyy-MM-dd, gi·ªØ nguy√™n
    if (/^\d{4}-\d{2}-\d{2}$/.test(dateString)) {
      return dateString;
    }

    // N·∫øu l√† dd/MM/yyyy, chuy·ªÉn sang yyyy-MM-dd
    if (/^\d{2}\/\d{2}\/\d{4}$/.test(dateString)) {
      const parts = dateString.split("/");
      return `${parts[2]}-${parts[1]}-${parts[0]}`;
    }

    // Tr∆∞·ªùng h·ª£p kh√°c, th·ª≠ chuy·ªÉn ƒë·ªïi b·∫±ng Date object
    try {
      const date = new Date(dateString);
      return date.toISOString().split("T")[0]; // L·∫•y ph·∫ßn yyyy-MM-dd
    } catch {
      // N·∫øu kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi, tr·∫£ v·ªÅ gi√° tr·ªã ban ƒë·∫ßu
      return dateString;
    }
  };

  // Remove all scroll effects to prevent conflicts with layout
  // Layout will handle scroll positioning automatically

  // State for image zoom functionality
  const [zoomedImage, setZoomedImage] = useState(null);

  // Hide header when modals are open - Added after all state declarations
  useEffect(() => {
    const shouldHideHeader =
      isModalOpen ||
      isConfirmationModalOpen ||
      notificationModal.show ||
      zoomedImage;

    if (shouldHideHeader) {
      document.body.classList.add("modal-open");
      // Try multiple selectors to hide header
      const headers = document.querySelectorAll(
        ".parent-header, .fix-parent-header, header"
      );
      headers.forEach((header) => {
        header.style.zIndex = "-999999";
        header.style.visibility = "hidden";
        header.style.opacity = "0";
      });
    } else {
      document.body.classList.remove("modal-open");
      // Restore header visibility
      const headers = document.querySelectorAll(
        ".parent-header, .fix-parent-header, header"
      );
      headers.forEach((header) => {
        header.style.zIndex = "";
        header.style.visibility = "";
        header.style.opacity = "";
      });
    }

    // Cleanup on unmount
    return () => {
      document.body.classList.remove("modal-open");
      const headers = document.querySelectorAll(
        ".parent-header, .fix-parent-header, header"
      );
      headers.forEach((header) => {
        header.style.zIndex = "";
        header.style.visibility = "";
        header.style.opacity = "";
      });
    };
  }, [
    isModalOpen,
    isConfirmationModalOpen,
    notificationModal.show,
    zoomedImage,
  ]);

  // Function to handle image click for zooming
  const handleImageClick = (imageUrl) => {
    setZoomedImage(imageUrl);
  };

  // Function to close the zoomed image
  const handleCloseZoom = () => {
    setZoomedImage(null);
  };

  return (
    <div className="parent-content-wrapper">
      <div className="fix-send-medicine-container">
        {/* Loading spinner */}
        {loading && (
          <div className="send-medicine-loading">
            <div className="loading-spinner"></div>
            <p>ƒêang x·ª≠ l√Ω...</p>
          </div>
        )}

        {/* Removed ToastContainer - using notification modal instead */}

        {/* Header */}
        <div className="fix-send-medicine-header">
          <div className="header-content">
            <h1>
              <i className="fas fa-pills"></i>
              Y√™u c·∫ßu g·ª≠i thu·ªëc
            </h1>
            <p>G·ª≠i y√™u c·∫ßu cho y t√° tr∆∞·ªùng ƒë·ªÉ h·ªó tr·ª£ u·ªëng thu·ªëc cho h·ªçc sinh</p>
            <button
              onClick={refreshData}
              className="refresh-btn"
              title="T·∫£i l·∫°i d·ªØ li·ªáu"
              disabled={loading || isHistoryLoading}
            >
              <i
                className={`fas fa-sync-alt ${
                  loading || isHistoryLoading ? "fa-spin" : ""
                }`}
              ></i>
              L√†m m·ªõi
            </button>
          </div>
        </div>

        {/* Tab Navigation */}
        <div className="fix-tab-navigation">
          <button
            className={`fix-tab-button ${activeTab === "form" ? "active" : ""}`}
            onClick={() => {
              setActiveTab("form");
            }}
          >
            G·ª≠i y√™u c·∫ßu thu·ªëc
          </button>
          <button
            className={`fix-tab-button ${
              activeTab === "history" ? "active" : ""
            }`}
            onClick={() => {
              setActiveTab("history");
            }}
          >
            L·ªãch s·ª≠ y√™u c·∫ßu
          </button>
        </div>

        {activeTab === "form" ? (
          // Form g·ª≠i thu·ªëc
          formSubmitted ? (
            <div className="fix-form-container">
              {" "}
              {/* Th√™m container n√†y ƒë·ªÉ ki·ªÉm so√°t chi·ªÅu r·ªông */}
              <div className="fix-success-message">
                <div className="fix-success-icon"></div>
                <h2>G·ª≠i y√™u c·∫ßu th√†nh c√¥ng!</h2>
                <p>
                  Y√™u c·∫ßu c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n. Nh√† tr∆∞·ªùng s·∫Ω li√™n h·ªá n·∫øu
                  c·∫ßn th√™m th√¥ng tin.
                </p>
                <div className="fix-success-actions">
                  <button
                    className="fix-btn-primary"
                    onClick={() => {
                      setFormSubmitted(false);
                    }}
                  >
                    G·ª≠i y√™u c·∫ßu m·ªõi
                  </button>
                  <button
                    className="fix-btn-secondary"
                    onClick={() => {
                      setActiveTab("history");
                      fetchMedicationHistory();
                    }}
                  >
                    Xem l·ªãch s·ª≠ y√™u c·∫ßu
                  </button>
                </div>
              </div>
            </div>
          ) : (
            <form className="fix-send-medicine-form" onSubmit={handleSubmit}>
              <div className="fix-form-section">
                <h3>Th√¥ng tin h·ªçc sinh</h3>
                <div className="fix-form-group-horizontal">
                  <label htmlFor="studentId">Ch·ªçn h·ªçc sinh:</label>
                  <div>
                    <select
                      id="studentId"
                      name="studentId"
                      value={formData.studentId}
                      onChange={handleChange}
                      className={`selectstudentfix ${
                        errors.studentId ? "error" : ""
                      }`}
                    >
                      <option value="">-- Ch·ªçn h·ªçc sinh --</option>
                      {students.map((student) => (
                        <option key={student.id} value={student.id}>
                          {student.name} - L·ªõp {student.class}
                        </option>
                      ))}
                    </select>
                    {errors.studentId && (
                      <span className="fix-error-text">{errors.studentId}</span>
                    )}
                  </div>
                </div>
              </div>

              <div className="fix-form-section">
                <h3>Th√¥ng tin thu·ªëc</h3>
                <div className="fix-form-group-horizontal">
                  <label htmlFor="medicineName">T√™n thu·ªëc:</label>
                  <div>
                    <input
                      type="text"
                      id="medicineName"
                      name="medicineName"
                      value={formData.medicineName}
                      onChange={handleChange}
                      placeholder="Nh·∫≠p t√™n thu·ªëc"
                      className={errors.medicineName ? "error" : ""}
                    />
                    {errors.medicineName && (
                      <span className="fix-error-text">
                        {errors.medicineName}
                      </span>
                    )}
                  </div>
                </div>

                <div className="fix-form-group-horizontal">
                  <label htmlFor="dosage">Li·ªÅu l∆∞·ª£ng:</label>
                  <div>
                    <input
                      type="text"
                      id="dosage"
                      name="dosage"
                      value={formData.dosage}
                      onChange={handleChange}
                      placeholder="VD: 1 vi√™n, 5ml, ..."
                      className={errors.dosage ? "error" : ""}
                    />
                    {errors.dosage && (
                      <span className="fix-error-text">{errors.dosage}</span>
                    )}
                  </div>
                </div>

                <div className="fix-form-group-horizontal">
                  <label htmlFor="frequency">T·∫ßn su·∫•t:</label>
                  <div>
                    <input
                      type="text"
                      id="frequency"
                      name="frequency"
                      value={formData.frequency}
                      onChange={handleChange}
                      placeholder="VD: 2 l·∫ßn/ng√†y, 8 ti·∫øng/l·∫ßn, ..."
                      className={errors.frequency ? "error" : ""}
                    />
                    {errors.frequency && (
                      <span className="fix-error-text">{errors.frequency}</span>
                    )}
                  </div>
                </div>

                <div className="fix-form-row chonngayguithuoc">
                  <div className="fix-form-group">
                    <label htmlFor="startDate">Ng√†y b·∫Øt ƒë·∫ßu:</label>
                    <input
                      type="date"
                      id="startDate"
                      name="startDate"
                      value={formData.startDate}
                      onChange={handleChange}
                      className={errors.startDate ? "error" : ""}
                    />
                    {errors.startDate && (
                      <span className="fix-error-text">{errors.startDate}</span>
                    )}
                  </div>

                  <div className="fix-form-group">
                    <label htmlFor="endDate">Ng√†y k·∫øt th√∫c:</label>
                    <input
                      type="date"
                      id="endDate"
                      name="endDate"
                      value={formData.endDate}
                      onChange={handleChange}
                      className={errors.endDate ? "error" : ""}
                    />
                    {errors.endDate && (
                      <span className="fix-error-text">{errors.endDate}</span>
                    )}
                  </div>
                </div>

                <div className="fix-form-group-horizontal">
                  <label>Th·ªùi ƒëi·ªÉm u·ªëng thu·ªëc:</label>
                  <div>
                    <div className="fix-checkbox-group-two-columns">
                      {timeOptions
                        .filter((option) => option.value !== "bedtime")
                        .map((option) => (
                          <div className="fix-checkbox-item" key={option.value}>
                            <input
                              type="checkbox"
                              id={option.value}
                              name="timeToTake"
                              value={option.value}
                              checked={formData.timeToTake.includes(
                                option.value
                              )}
                              onChange={handleTimeChange}
                            />
                            <label htmlFor={option.value}>{option.label}</label>
                          </div>
                        ))}
                    </div>
                    {errors.timeToTake && (
                      <span className="fix-error-text">
                        {errors.timeToTake}
                      </span>
                    )}
                  </div>
                </div>
              </div>

              <div className="fix-form-section">
                <h3>Th√¥ng tin b·ªï sung</h3>
                {/* Th√™m tr∆∞·ªùng h√¨nh ·∫£nh ƒë∆°n thu·ªëc v·ªõi upload ri√™ng bi·ªát */}
                <div className="fix-form-group">
                  <label htmlFor="prescriptionImage">H√¨nh ·∫£nh ƒë∆°n thu·ªëc:</label>
                  <div className="fix-help-text">
                    üìã B∆∞·ªõc 1: Ch·ªçn ·∫£nh ‚Üí B∆∞·ªõc 2: Nh·∫•n "T·∫£i ·∫£nh l√™n" ‚Üí B∆∞·ªõc 3:
                    ƒêi·ªÅn form v√† g·ª≠i y√™u c·∫ßu
                  </div>
                  <div className="fix-image-upload-container">
                    <input
                      type="file"
                      id="prescriptionImage"
                      name="prescriptionImage"
                      accept="image/jpeg,image/png,image/jpg"
                      onChange={handleImageChange}
                      className="fix-image-input"
                      disabled={tempImageUpload.isUploading}
                    />
                    <label
                      htmlFor="prescriptionImage"
                      className={`fix-upload-button ${
                        tempImageUpload.isUploading ? "disabled" : ""
                      }`}
                    >
                      {tempImageUpload.isUploading ? "ƒêang t·∫£i..." : "Ch·ªçn ·∫£nh"}
                    </label>

                    {/* Show selected file name */}
                    {tempImageUpload.file && (
                      <span className="fix-file-name">
                        {tempImageUpload.file.name}
                      </span>
                    )}

                    {/* Upload button - only show when file is selected and not uploaded yet */}
                    {tempImageUpload.file &&
                      !tempImageUpload.uploadedImageBase64 &&
                      !tempImageUpload.isUploading && (
                        <button
                          type="button"
                          onClick={uploadImageTemporary}
                          className="fix-upload-image-btn"
                          disabled={tempImageUpload.isUploading}
                        >
                          T·∫£i ·∫£nh l√™n
                        </button>
                      )}

                    {/* Loading indicator */}
                    {tempImageUpload.isUploading && (
                      <div className="fix-upload-loading">
                        <span>ƒêang t·∫£i ·∫£nh l√™n...</span>
                      </div>
                    )}

                    {/* Success indicator */}
                    {tempImageUpload.uploadedImageBase64 && (
                      <div className="fix-upload-success">
                        <span>‚úì ·∫¢nh ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n th√†nh c√¥ng</span>
                      </div>
                    )}

                    {/* Error display */}
                    {(tempImageUpload.uploadError ||
                      errors.prescriptionImage) && (
                      <div className="fix-error-text">
                        {tempImageUpload.uploadError ||
                          errors.prescriptionImage}
                      </div>
                    )}

                    {/* Image preview */}
                    {tempImageUpload.preview && (
                      <div className="fix-image-preview-container">
                        <img
                          src={tempImageUpload.preview}
                          alt="ƒê∆°n thu·ªëc"
                          className="fix-image-preview"
                          onClick={() =>
                            handleImageClick(tempImageUpload.preview)
                          }
                        />
                      </div>
                    )}
                  </div>
                  <span className="fix-help-text">
                    T·ªëi ƒëa 5MB. ƒê·ªãnh d·∫°ng: JPG, PNG.
                  </span>
                </div>

                <div className="fix-form-row-large">
                  <label htmlFor="notes">Ghi ch√∫:</label>
                  <textarea
                    id="notes"
                    name="notes"
                    value={formData.notes}
                    onChange={handleChange}
                    placeholder="C√°c l∆∞u √Ω ƒë·∫∑c bi·ªát v·ªÅ vi·ªác d√πng thu·ªëc (n·∫øu c√≥)"
                    rows="4"
                  ></textarea>
                </div>
              </div>

              <div className="fix-form-actions">
                <button
                  type="button"
                  className="fix-btn-secondary"
                  onClick={() => {
                    if (isUpdating) {
                      // N·∫øu ƒëang c·∫≠p nh·∫≠t th√¨ h·ªßy v√† reset form
                      setIsUpdating(false);
                      setUpdateRequestId(null);
                      setFormData({
                        studentId: "",
                        medicineName: "",
                        dosage: "",
                        frequency: "",
                        startDate: "",
                        endDate: "",
                        timeToTake: [],
                        notes: "",
                        prescriptionImage: null,
                      });
                    } else {
                      // N·∫øu ƒëang t·∫°o m·ªõi th√¨ quay l·∫°i trang ch·ªß
                      navigate("/parent");
                    }
                  }}
                >
                  {isUpdating ? "H·ªßy c·∫≠p nh·∫≠t" : "H·ªßy b·ªè"}
                </button>

                <button
                  type="submit"
                  className="fix-btn-primary"
                  disabled={loading}
                >
                  {loading ? (
                    <span className="fix-spinner"></span>
                  ) : (
                    "G·ª≠i y√™u c·∫ßu"
                  )}
                </button>
              </div>
            </form>
          )
        ) : (
          // Tab l·ªãch s·ª≠
          <div className="fix-medication-history-container">
            <div className="fix-history-header">
              <h2>L·ªãch s·ª≠ y√™u c·∫ßu d√πng thu·ªëc</h2>

              {students && students.length > 0 && (
                <div className="fix-history-filter">
                  <label htmlFor="studentFilter">L·ªçc theo h·ªçc sinh:</label>
                  <select
                    id="studentFilter"
                    className="selectstudentfix"
                    value={selectedStudentFilter}
                    onChange={(e) => setSelectedStudentFilter(e.target.value)}
                  >
                    <option value="">T·∫•t c·∫£ h·ªçc sinh</option>
                    {students.map((student) => (
                      <option key={student.id} value={student.id}>
                        {student.name}
                      </option>
                    ))}
                  </select>
                </div>
              )}
            </div>

            {historyError && (
              <div className="error-message">{historyError}</div>
            )}

            {isHistoryLoading ? (
              <div className="fix-loading-container">
                <div className="fix-spinner"></div>
                <p>ƒêang t·∫£i l·ªãch s·ª≠ y√™u c·∫ßu...</p>
              </div>
            ) : medicationHistory.length === 0 ? (
              <div className="fix-empty-history">
                <p>B·∫°n ch∆∞a c√≥ y√™u c·∫ßu d√πng thu·ªëc n√†o</p>
                <button
                  className="fix-btn-primary"
                  onClick={() => setActiveTab("form")}
                >
                  T·∫°o y√™u c·∫ßu m·ªõi
                </button>
              </div>
            ) : (
              <div className="fix-medication-request-list">
                {getFilteredHistory().map((request) => (
                  <div className="fix-medication-request-card" key={request.id}>
                    <div className="fix-med-request-header">
                      <div className="fix-med-request-title">
                        <h3>{request.medicationName}</h3>
                        <p className="fix-med-request-student">
                          {request.studentName} - L·ªõp {request.studentClass}
                        </p>
                        <p className="fix-med-request-date">
                          Ng√†y y√™u c·∫ßu: {formatDate(request.submittedAt)}
                        </p>
                      </div>
                      <div className="fix-med-request-actions">
                        {request.status === "PENDING_APPROVAL" && (
                          <>
                            <button
                              className="fix-med-btn fix-med-btn-primary"
                              onClick={() => handleUpdateRequest(request.id)}
                            >
                              C·∫≠p nh·∫≠t
                            </button>
                            <button
                              className="fix-med-btn fix-med-btn-danger"
                              onClick={() => handleDeleteRequest(request.id)}
                            >
                              X√≥a
                            </button>
                          </>
                        )}
                        {(request.status === "APPROVED" ||
                          request.status === "FULLY_TAKEN" ||
                          request.status === "PARTIALLY_TAKEN") && (
                          <button
                            className="fix-med-btn fix-med-btn-success"
                            onClick={() => fetchConfirmationData(request.id)}
                            disabled={confirmationLoading}
                          >
                            {confirmationLoading
                              ? "ƒêang t·∫£i..."
                              : "Xem x√°c nh·∫≠n"}
                          </button>
                        )}
                        <div
                          className={`fix-med-status fix-med-status-${request.status
                            .toLowerCase()
                            .replace("_", "-")}`}
                        >
                          {getStatusLabel(request.status)}
                        </div>
                      </div>
                    </div>

                    <div className="fix-request-details">
                      <div className="fix-med-info-container">
                        <div className="fix-med-info-row">
                          <div className="fix-med-info-item">
                            <span className="fix-med-info-label">
                              Li·ªÅu l∆∞·ª£ng:
                            </span>
                            <div className="med-info-value">
                              {request.dosageInstructions}
                            </div>
                          </div>

                          <div className="fix-med-info-item">
                            <span className="fix-med-info-label">
                              T·∫ßn su·∫•t:
                            </span>
                            <div className="med-info-value">
                              <strong>
                                {request.frequencyPerDay} l·∫ßn/ng√†y
                              </strong>
                              <div className="med-date-range">
                                <span>
                                  {formatDate(request.startDate)} -{" "}
                                  {formatDate(request.endDate)}
                                </span>
                              </div>
                            </div>
                          </div>
                        </div>

                        <div className="fix-med-info-row">
                          <div className="fix-med-info-full">
                            <span className="fix-med-info-label">
                              Th·ªùi ƒëi·ªÉm u·ªëng:
                            </span>
                            <div className="fix-time-tags">
                              {(() => {
                                console.log(
                                  `üîç Request ID: ${request.id} - Raw timeOfDay:`,
                                  request.timeOfDay
                                );
                                const parsedTimes = parseTimeOfDay(
                                  request.timeOfDay
                                );
                                console.log(
                                  `üîç Request ID: ${request.id} - Parsed times:`,
                                  parsedTimes
                                );
                                return parsedTimes.map((time, index) => {
                                  console.log(
                                    `üéØ About to render TimeTag for: ${time}`
                                  );
                                  const label = getTimeOfDayLabel(time);
                                  console.log(
                                    `üè∑Ô∏è INLINE render - Request ${request.id} - Time: ${time} ‚Üí Label: ${label}`
                                  );
                                  return (
                                    <span
                                      key={`req-${request.id}-time-${time}-${index}`}
                                      className="fix-time-tag"
                                      style={{
                                        background: "var(--fix-primary-color)",
                                        color: "white",
                                        padding: "2px 8px",
                                        borderRadius: "12px",
                                        fontSize: "0.75rem",
                                        fontWeight: "500",
                                        display: "inline-block",
                                      }}
                                      title={`Debug: Req ${request.id} - ${time} ‚Üí ${label}`}
                                    >
                                      {label}
                                    </span>
                                  );
                                });
                              })()}
                            </div>
                          </div>
                        </div>

                        {request.specialInstructions && (
                          <div className="fix-med-info-row">
                            <div className="fix-med-info-full">
                              <span className="fix-med-info-label">
                                H∆∞·ªõng d·∫´n ƒë·∫∑c bi·ªát:
                              </span>
                              <div className="fix-med-info-note">
                                {request.specialInstructions}
                              </div>
                            </div>
                          </div>
                        )}

                        {request.status === "REJECTED" &&
                          request.rejectionReason && (
                            <div className="rejection-reason">
                              <span className="detail-label">
                                L√Ω do t·ª´ ch·ªëi:
                              </span>
                              <span className="detail-value">
                                {request.rejectionReason}
                              </span>
                            </div>
                          )}
                      </div>
                    </div>

                    {request.approvedBy && (
                      <div className="request-footer">
                        <div className="approval-info">
                          <span>Duy·ªát b·ªüi: {request.approvedBy}</span>
                          {request.responseDate && (
                            <span>
                              Ng√†y ph·∫£n h·ªìi:{" "}
                              {formatTimestamp(request.responseDate)}
                            </span>
                          )}
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        {/* Modal c·∫≠p nh·∫≠t */}
        {isModalOpen && (
          <div className="fix-med-modal-overlay">
            <div className="fix-med-modal">
              <div className="fix-med-modal-header">
                <h3>C·∫≠p nh·∫≠t y√™u c·∫ßu thu·ªëc</h3>
                <button
                  className="fix-med-modal-close"
                  onClick={() => setIsModalOpen(false)}
                >
                  <svg
                    width="18"
                    height="18"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M6 6L18 18M6 18L18 6"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                    />
                  </svg>
                </button>
              </div>
              <div className="fix-med-modal-content">
                <form onSubmit={handleModalFormSubmit}>
                  {/* Student info */}
                  <div className="fix-form-group">
                    <label htmlFor="modal-studentId">H·ªçc sinh:</label>
                    <input
                      type="text"
                      id="modal-studentName"
                      value={`${editFormData.studentName || ""} - L·ªõp ${
                        editFormData.studentClass || ""
                      }`}
                      disabled
                    />
                  </div>

                  {/* Medicine info */}
                  <div className="fix-form-group">
                    <label htmlFor="modal-medicationName">T√™n thu·ªëc:</label>
                    <input
                      type="text"
                      id="modal-medicationName"
                      name="medicationName"
                      value={editFormData.medicationName || ""}
                      onChange={handleModalInputChange}
                      placeholder="Nh·∫≠p t√™n thu·ªëc"
                      className={modalErrors.medicationName ? "error" : ""}
                      required
                    />
                    {modalErrors.medicationName && (
                      <span className="fix-error-text">
                        {modalErrors.medicationName}
                      </span>
                    )}
                  </div>

                  {/* Form rows for better layout */}
                  <div className="fix-form-row">
                    <div className="fix-form-group">
                      <label htmlFor="modal-dosageInstructions">
                        Li·ªÅu l∆∞·ª£ng:
                      </label>
                      <input
                        type="text"
                        id="modal-dosageInstructions"
                        name="dosageInstructions"
                        value={editFormData.dosageInstructions || ""}
                        onChange={handleModalInputChange}
                        placeholder="V√≠ d·ª•: 1 vi√™n m·ªói l·∫ßn"
                        className={
                          modalErrors.dosageInstructions ? "error" : ""
                        }
                        required
                      />
                      {modalErrors.dosageInstructions && (
                        <span className="fix-error-text">
                          {modalErrors.dosageInstructions}
                        </span>
                      )}
                    </div>

                    <div className="fix-form-group">
                      <label htmlFor="modal-frequencyPerDay">
                        S·ªë l·∫ßn d√πng m·ªói ng√†y:
                      </label>
                      <input
                        type="number"
                        id="modal-frequencyPerDay"
                        name="frequencyPerDay"
                        value={editFormData.frequencyPerDay || ""}
                        onChange={handleModalInputChange}
                        min="1"
                        max="10"
                        placeholder="S·ªë l·∫ßn d√πng thu·ªëc trong ng√†y"
                        className={modalErrors.frequencyPerDay ? "error" : ""}
                        required
                      />
                      {modalErrors.frequencyPerDay && (
                        <span className="fix-error-text">
                          {modalErrors.frequencyPerDay}
                        </span>
                      )}
                    </div>
                  </div>

                  <div className="fix-form-row">
                    <div className="fix-form-group">
                      <label htmlFor="modal-startDate">Ng√†y b·∫Øt ƒë·∫ßu:</label>
                      <input
                        type="date"
                        id="modal-startDate"
                        name="startDate"
                        value={editFormData.startDate || ""}
                        onChange={handleModalInputChange}
                        className={modalErrors.startDate ? "error" : ""}
                        required
                      />
                      {modalErrors.startDate && (
                        <span className="fix-error-text">
                          {modalErrors.startDate}
                        </span>
                      )}
                    </div>

                    <div className="fix-form-group">
                      <label htmlFor="modal-endDate">Ng√†y k·∫øt th√∫c:</label>
                      <input
                        type="date"
                        id="modal-endDate"
                        name="endDate"
                        value={editFormData.endDate || ""}
                        onChange={handleModalInputChange}
                        className={modalErrors.endDate ? "error" : ""}
                        required
                      />
                      {modalErrors.endDate && (
                        <span className="fix-error-text">
                          {modalErrors.endDate}
                        </span>
                      )}
                    </div>
                  </div>

                  <div className="fix-form-group">
                    <label htmlFor="time-options">Th·ªùi gian u·ªëng thu·ªëc:</label>
                    <div className="fix-checkbox-group">
                      {timeOptions.map((option) => (
                        <div className="fix-checkbox-item" key={option.value}>
                          <input
                            type="checkbox"
                            id={`modal-${option.value}`}
                            name="timeToTake"
                            value={option.value}
                            checked={editFormData.timeToTake.includes(
                              option.value
                            )}
                            onChange={handleModalTimeChange}
                          />
                          <label htmlFor={`modal-${option.value}`}>
                            {option.label}
                          </label>
                        </div>
                      ))}
                    </div>
                    {editFormData.timeToTake.length === 0 && (
                      <span className="fix-error-text">
                        Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt th·ªùi ƒëi·ªÉm u·ªëng thu·ªëc
                      </span>
                    )}
                  </div>

                  <div className="fix-form-group">
                    <label htmlFor="modal-specialInstructions">
                      H∆∞·ªõng d·∫´n ƒë·∫∑c bi·ªát:
                    </label>
                    <textarea
                      id="modal-specialInstructions"
                      name="specialInstructions"
                      value={editFormData.specialInstructions || ""}
                      onChange={handleModalInputChange}
                      placeholder="Nh·∫≠p h∆∞·ªõng d·∫´n ƒë·∫∑c bi·ªát (n·∫øu c√≥)"
                      rows="3"
                    ></textarea>
                  </div>

                  {/* Image Upload Section */}
                  <div className="fix-form-group">
                    <label htmlFor="modal-prescriptionImage">
                      H√¨nh ·∫£nh ƒë∆°n thu·ªëc:
                    </label>
                    <div className="fix-image-upload-container">
                      {/* Show existing image info if available */}
                      {editFormData.prescriptionImageUrl &&
                        !modalPrescriptionImage && (
                          <div className="fix-existing-image-info">
                            <p className="fix-existing-image-label">
                              <strong>H√¨nh ·∫£nh hi·ªán t·∫°i:</strong>
                            </p>
                            <div className="fix-existing-image-preview">
                              <img
                                src={modalImagePreview}
                                alt="ƒê∆°n thu·ªëc hi·ªán t·∫°i"
                                className="fix-image-preview"
                                onClick={() =>
                                  handleImageClick(modalImagePreview)
                                }
                              />
                              <p className="fix-image-note">
                                Nh·∫•n v√†o h√¨nh ƒë·ªÉ xem chi ti·∫øt
                              </p>
                            </div>
                          </div>
                        )}

                      <input
                        type="file"
                        id="modal-prescriptionImage"
                        name="prescriptionImage"
                        accept="image/jpeg,image/png,image/jpg"
                        onChange={handleModalImageChange}
                        className="fix-image-input"
                      />
                      <label
                        htmlFor="modal-prescriptionImage"
                        className="fix-upload-button"
                      >
                        {editFormData.prescriptionImageUrl
                          ? "Thay ƒë·ªïi h√¨nh ·∫£nh"
                          : "Ch·ªçn ·∫£nh"}
                      </label>

                      {modalPrescriptionImage && (
                        <span className="fix-file-name">
                          <strong>H√¨nh m·ªõi:</strong>{" "}
                          {modalPrescriptionImage.name}
                        </span>
                      )}

                      <span className="fix-help-text">
                        {editFormData.prescriptionImageUrl
                          ? "Ch·ªçn h√¨nh ·∫£nh m·ªõi ƒë·ªÉ thay th·∫ø h√¨nh hi·ªán t·∫°i. T·ªëi ƒëa 5MB. ƒê·ªãnh d·∫°ng: JPG, PNG."
                          : "T·ªëi ƒëa 5MB. ƒê·ªãnh d·∫°ng: JPG, PNG."}
                      </span>

                      {/* Show new image preview if selected */}
                      {modalPrescriptionImage && modalImagePreview && (
                        <div className="fix-new-image-preview">
                          <p className="fix-new-image-label">
                            <strong>H√¨nh ·∫£nh m·ªõi:</strong>
                          </p>
                          <div className="fix-image-preview-container">
                            <img
                              src={modalImagePreview}
                              alt="ƒê∆°n thu·ªëc m·ªõi"
                              className="fix-image-preview"
                              onClick={() =>
                                handleImageClick(modalImagePreview)
                              }
                            />
                          </div>
                        </div>
                      )}
                    </div>
                  </div>

                  <div className="fix-form-actions">
                    <button
                      type="button"
                      className="fix-btn-secondary"
                      onClick={() => setIsModalOpen(false)}
                    >
                      H·ªßy
                    </button>
                    <button
                      type="submit"
                      className="fix-btn-primary"
                      disabled={loading}
                    >
                      {loading ? "ƒêang c·∫≠p nh·∫≠t..." : "C·∫≠p nh·∫≠t"}
                    </button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        )}

        {/* Confirmation Modal - Updated with pagination */}
        {isConfirmationModalOpen && confirmationData && (
          <div className="fix-med-modal-overlay">
            <div className="fix-med-modal">
              <div className="fix-med-modal-header">
                <h3>
                  Th√¥ng tin x√°c nh·∫≠n cho thu·ªëc
                  {confirmationList.length > 1 && (
                    <span className="confirmation-pagination-info">
                      (Trang {currentConfirmationIndex + 1}/
                      {confirmationList.length})
                    </span>
                  )}
                </h3>
                {confirmationList.length > 1 && (
                  <div className="confirmation-header-info">
                    <small>
                      T√¨m th·∫•y {confirmationList.length} l·∫ßn x√°c nh·∫≠n ‚Ä¢ D√πng
                      ph√≠m ‚Üê ‚Üí ho·∫∑c s·ªë 1-{confirmationList.length} ƒë·ªÉ chuy·ªÉn
                      trang
                    </small>
                  </div>
                )}
                <button
                  className="fix-med-modal-close"
                  onClick={() => {
                    setIsConfirmationModalOpen(false);
                    setConfirmationData(null);
                    setConfirmationList([]);
                    setCurrentConfirmationIndex(0);
                  }}
                >
                  <svg
                    width="18"
                    height="18"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M6 6L18 18M6 18L18 6"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                    />
                  </svg>
                </button>
              </div>

              <div className="fix-med-modal-content">
                <div className="confirmation-details">
                  {/* Th√¥ng tin c∆° b·∫£n */}
                  <div className="confirmation-section">
                    <h4>Th√¥ng tin thu·ªëc</h4>
                    <div className="confirmation-row">
                      <div className="confirmation-item">
                        <span className="confirmation-label">T√™n thu·ªëc:</span>
                        <span className="confirmation-value">
                          {confirmationData.medicationName}
                        </span>
                      </div>
                      <div className="confirmation-item">
                        <span className="confirmation-label">H·ªçc sinh:</span>
                        <span className="confirmation-value">
                          {confirmationData.studentName}
                        </span>
                      </div>
                    </div>
                    <div className="confirmation-row">
                      <div className="confirmation-item">
                        <span className="confirmation-label">
                          M√£ y√™u c·∫ßu thu·ªëc:
                        </span>
                        <span className="confirmation-value">
                          #{confirmationData.medicationInstructionId || "N/A"}
                        </span>
                      </div>
                      <div className="confirmation-item">
                        <span className="confirmation-label">M√£ x√°c nh·∫≠n:</span>
                        <span className="confirmation-value">
                          #{confirmationData.id || "N/A"}
                        </span>
                      </div>
                    </div>
                    <div className="confirmation-row">
                      <div className="confirmation-item">
                        <span className="confirmation-label">
                          S·ªë l·∫ßn d√πng m·ªói ng√†y:
                        </span>
                        <span className="confirmation-value">
                          {confirmationData.frequencyPerDay || "N/A"}
                        </span>
                      </div>
                    </div>
                  </div>

                  {/* Th√¥ng tin th·ª±c hi·ªán */}
                  <div className="confirmation-section">
                    <h4>Th√¥ng tin th·ª±c hi·ªán</h4>
                    <div className="confirmation-row">
                      <div className="confirmation-item">
                        <span className="confirmation-label">
                          Th·ªùi gian cho thu·ªëc:
                        </span>
                        <span className="confirmation-value">
                          {formatConfirmationTimestamp(
                            confirmationData.administeredAt
                          )}
                        </span>
                      </div>
                      <div className="confirmation-item">
                        <span className="confirmation-label">
                          Ng∆∞·ªùi th·ª±c hi·ªán:
                        </span>
                        <span className="confirmation-value">
                          {confirmationData.administeredBy}
                        </span>
                      </div>
                    </div>
                  </div>

                  {/* Tr·∫°ng th√°i */}
                  <div className="confirmation-section">
                    <h4>Tr·∫°ng th√°i</h4>
                    <div className="confirmation-row">
                      <div className="confirmation-item">
                        <span className="confirmation-label">
                          Tr·∫°ng th√°i th·ª±c hi·ªán:
                        </span>
                        <span
                          className={`confirmation-status ${
                            getAdministrationStatusInfo(
                              confirmationData.administrationStatus
                            ).class
                          }`}
                        >
                          {
                            getAdministrationStatusInfo(
                              confirmationData.administrationStatus
                            ).label
                          }
                        </span>
                      </div>
                    </div>
                  </div>

                  {/* Ghi ch√∫ */}
                  {confirmationData.notes && (
                    <div className="confirmation-section">
                      <h4>Ghi ch√∫</h4>
                      <div className="confirmation-notes">
                        {confirmationData.notes}
                      </div>
                    </div>
                  )}

                  {/* H√¨nh ·∫£nh x√°c nh·∫≠n */}
                  <div className="confirmation-section">
                    <h4>H√¨nh ·∫£nh x√°c nh·∫≠n</h4>
                    <div className="confirmation-image">
                      {confirmationData.confirmationImageUrl ? (
                        <img
                          src={confirmationData.confirmationImageUrl}
                          alt="H√¨nh ·∫£nh x√°c nh·∫≠n cho thu·ªëc"
                          className="confirmation-img"
                          onClick={() =>
                            handleImageClick(
                              confirmationData.confirmationImageUrl
                            )
                          }
                          onError={(e) => {
                            e.target.style.display = "none";
                            e.target.nextSibling.style.display = "block";
                          }}
                        />
                      ) : (
                        <div className="no-image-placeholder">
                          <p>Kh√¥ng c√≥ h√¨nh ·∫£nh x√°c nh·∫≠n</p>
                        </div>
                      )}
                    </div>
                  </div>
                </div>

                {/* Pagination controls */}
                {confirmationList.length > 1 && (
                  <div className="confirmation-pagination">
                    <div className="pagination-info">
                      <span>
                        X√°c nh·∫≠n {currentConfirmationIndex + 1} /{" "}
                        {confirmationList.length}
                      </span>
                    </div>

                    <div className="pagination-controls">
                      <button
                        className="pagination-btn prev-btn"
                        onClick={goToPreviousConfirmation}
                        disabled={currentConfirmationIndex === 0}
                        title="Xem x√°c nh·∫≠n tr∆∞·ªõc"
                      >
                        <i className="fas fa-chevron-left"></i>
                        Tr∆∞·ªõc
                      </button>

                      <div className="pagination-pages">
                        {confirmationList.map((_, index) => (
                          <button
                            key={index}
                            className={`pagination-page ${
                              index === currentConfirmationIndex ? "active" : ""
                            }`}
                            onClick={() => goToConfirmationPage(index)}
                            title={`Xem x√°c nh·∫≠n ${index + 1}`}
                          >
                            {index + 1}
                          </button>
                        ))}
                      </div>

                      <button
                        className="pagination-btn next-btn"
                        onClick={goToNextConfirmation}
                        disabled={
                          currentConfirmationIndex ===
                          confirmationList.length - 1
                        }
                        title="Xem x√°c nh·∫≠n ti·∫øp theo"
                      >
                        Sau
                        <i className="fas fa-chevron-right"></i>
                      </button>
                    </div>
                  </div>
                )}

                <div className="fix-med-modal-actions">
                  <button
                    className="fix-btn-primary"
                    onClick={() => {
                      setIsConfirmationModalOpen(false);
                      setConfirmationData(null);
                      setConfirmationList([]);
                      setCurrentConfirmationIndex(0);
                    }}
                  >
                    ƒê√≥ng
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Notification Modal */}
        {notificationModal.show && (
          <div className="fix-notification-modal-overlay">
            <div
              className={`fix-notification-modal fix-notification-${notificationModal.type}`}
            >
              <div className="fix-notification-icon">
                {notificationModal.type === "success" ? (
                  <svg width="48" height="48" viewBox="0 0 24 24" fill="none">
                    <path
                      d="M20 6L9 17L4 12"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                  </svg>
                ) : (
                  <svg width="48" height="48" viewBox="0 0 24 24" fill="none">
                    <path
                      d="M18 6L6 18M6 6L18 18"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                  </svg>
                )}
              </div>
              <div className="fix-notification-content">
                <h3>{notificationModal.title}</h3>
                <p>{notificationModal.message}</p>
              </div>
              <div className="fix-notification-progress"></div>
              <button
                className="fix-notification-close"
                onClick={() =>
                  setNotificationModal({ ...notificationModal, show: false })
                }
              >
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                  <path
                    d="M18 6L6 18M6 6L18 18"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                </svg>
              </button>
            </div>
          </div>
        )}

        {/* Image Zoom Overlay */}
        {zoomedImage && (
          <div className="zoom-overlay" onClick={handleCloseZoom}>
            <img
              src={zoomedImage}
              alt="H√¨nh ·∫£nh chi ti·∫øt"
              className="zoomed-image"
              onClick={(e) => e.stopPropagation()}
            />
            <button className="zoom-close-btn" onClick={handleCloseZoom}>
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M6 6L18 18M6 18L18 6"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                />
              </svg>
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default SendMedicine;

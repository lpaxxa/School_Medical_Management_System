import React, { useState, useEffect, useCallback } from "react";
import { Link } from "react-router-dom";
import "../shared/header-fix.css"; // Import header-fix TR∆Ø·ªöC Community.css
import "./Community.css";
import LoadingSpinner from "../../../../components/LoadingSpinner/LoadingSpinner";
import SearchBox from "../../../../components/SearchBox/SearchBox"; // Import SearchBox component
import { useAuth } from "../../../../context/AuthContext";
import communityService from "../../../../services/communityService"; // Import communityService

const Community = () => {
  const { currentUser } = useAuth();
  const [allPosts, setAllPosts] = useState([]); // Store all posts t·ª´ API
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState("all");
  const [searchQuery, setSearchQuery] = useState("");
  const [showCreatePostForm, setShowCreatePostForm] = useState(false);
  const [newPost, setNewPost] = useState({
    title: "",
    content: "",
    excerpt: "", // Th√™m tr∆∞·ªùng excerpt theo API
    category: "H·ªèi ƒë√°p", // C·∫≠p nh·∫≠t category m·∫∑c ƒë·ªãnh
    tags: [], // Th√™m tr∆∞·ªùng tags
  });
  // Th√™m state ƒë·ªÉ theo d√µi b√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c like
  const [likedPosts, setLikedPosts] = useState([]);
  // Th√™m state ƒë·ªÉ qu·∫£n l√Ω b√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c ghim
  const [bookmarkedPosts, setBookmarkedPosts] = useState([]);
  const [currentPage, setCurrentPage] = useState(1); // Trang hi·ªán t·∫°i cho pagination client-side
  const postsPerPage = 10; // S·ªë b√†i vi·∫øt m·ªói trang
  const [totalPages, setTotalPages] = useState(1);

  // API URL
  const API_URL = "http://localhost:8080/api/v1";

  // Function to check authentication
  const checkAuthentication = () => {
    const token = localStorage.getItem("authToken");
    const userData = localStorage.getItem("userData");

    console.log("üîê Authentication check:", {
      token: token ? `${token.substring(0, 20)}...` : null,
      userData: userData ? JSON.parse(userData) : null,
      currentUser,
    });

    if (!token || !currentUser) {
      console.warn("‚ö†Ô∏è No authentication found");
      return false;
    }

    return true;
  };

  // Helper function to normalize role matching
  const matchRole = (postAuthorRole, targetRole) => {
    if (!postAuthorRole) return false;

    const normalizedPostRole = postAuthorRole.toString().toLowerCase();
    const normalizedTargetRole = targetRole.toLowerCase();

    return (
      normalizedPostRole === normalizedTargetRole ||
      normalizedPostRole === normalizedTargetRole + "s" || // Handle plurals
      normalizedTargetRole === normalizedPostRole + "s"
    );
  };

  // Gi·ªØ l·∫°i MOCK_POSTS ƒë·ªÉ s·ª≠ d·ª•ng khi API l·ªói
  const MOCK_POSTS = [
    {
      id: "post1",
      title: "H∆∞·ªõng d·∫´n chƒÉm s√≥c tr·∫ª b·ªã s·ªët t·∫°i nh√†",
      content:
        "Khi tr·∫ª b·ªã s·ªët, ph·ª• huynh c·∫ßn theo d√µi nhi·ªát ƒë·ªô th∆∞·ªùng xuy√™n v√† gi·ªØ cho tr·∫ª ƒë·ªß n∆∞·ªõc. N·∫øu nhi·ªát ƒë·ªô v∆∞·ª£t qu√° 38.5¬∞C, c√≥ th·ªÉ d√πng paracetamol li·ªÅu l∆∞·ª£ng ph√π h·ª£p v·ªõi ƒë·ªô tu·ªïi v√† c√¢n n·∫∑ng c·ªßa tr·∫ª...",
      author: {
        id: "nurse1",
        name: "Y t√° Nguy·ªÖn Th·ªã H∆∞∆°ng",
        avatar: "https://randomuser.me/api/portraits/women/45.jpg",
        role: "nurse",
      },
      category: "health-guide",
      createdAt: "2023-05-15T08:30:00",
      likes: 24,
      comments: 8,
      isPinned: true,
    },
    {
      id: "post2",
      title:
        "Con t√¥i hay b·ªã ƒëau b·ª•ng m·ªói bu·ªïi s√°ng tr∆∞·ªõc khi ƒë·∫øn tr∆∞·ªùng, l√†m th·∫ø n√†o?",
      content:
        "Con trai t√¥i, h·ªçc l·ªõp 3, th∆∞·ªùng xuy√™n than phi·ªÅn v·ªÅ vi·ªác ƒëau b·ª•ng v√†o bu·ªïi s√°ng tr∆∞·ªõc khi ƒëi h·ªçc. Khi ·ªü nh√† v√†o cu·ªëi tu·∫ßn, ch√°u kh√¥ng c√≥ tri·ªáu ch·ª©ng n√†y. T√¥i lo l·∫Øng kh√¥ng bi·∫øt c√≥ ph·∫£i do lo √¢u ho·∫∑c cƒÉng th·∫≥ng li√™n quan ƒë·∫øn tr∆∞·ªùng h·ªçc kh√¥ng?",
      author: {
        id: "parent1",
        name: "Tr·∫ßn VƒÉn Nam",
        avatar: "https://randomuser.me/api/portraits/men/35.jpg",
        role: "parent",
      },
      category: "question",
      createdAt: "2023-05-14T10:15:00",
      likes: 5,
      comments: 12,
      isPinned: false,
    },
    {
      id: "post3",
      title: "Th√¥ng b√°o: Chi·∫øn d·ªãch ti√™m ch·ªßng s·∫Øp di·ªÖn ra t·∫°i tr∆∞·ªùng",
      content:
        "K√≠nh g·ª≠i qu√Ω ph·ª• huynh, nh√† tr∆∞·ªùng s·∫Ω t·ªï ch·ª©c chi·∫øn d·ªãch ti√™m ch·ªßng v·∫Øc-xin ph√≤ng b·ªánh c√∫m v√†o ng√†y 25/5/2023. ƒê√¢y l√† ch∆∞∆°ng tr√¨nh t·ª± nguy·ªán, ph·ª• huynh vui l√≤ng ƒëi·ªÅn v√†o m·∫´u ƒë∆°n ƒë·ªìng √Ω v√† g·ª≠i l·∫°i cho gi√°o vi√™n ch·ªß nhi·ªám tr∆∞·ªõc ng√†y 20/5/2023...",
      author: {
        id: "nurse2",
        name: "Y t√° Tr∆∞·ªüng Ph·∫°m Minh Tu·∫•n",
        avatar: "https://randomuser.me/api/portraits/men/32.jpg",
        role: "nurse",
      },
      category: "announcement",
      createdAt: "2023-05-10T14:00:00",
      likes: 32,
      comments: 15,
      isPinned: true,
    },
    {
      id: "post4",
      title: "Chia s·∫ª: C√°ch gi√∫p tr·∫ª tƒÉng c∆∞·ªùng mi·ªÖn d·ªãch trong m√πa d·ªãch",
      content:
        "Sau ƒë·∫°i d·ªãch COVID-19, gia ƒë√¨nh t√¥i ƒë√£ √°p d·ª•ng m·ªôt s·ªë th√≥i quen gi√∫p tƒÉng c∆∞·ªùng mi·ªÖn d·ªãch cho c√°c con. Ch√∫ng t√¥i t·∫≠p trung v√†o ch·∫ø ƒë·ªô ƒÉn gi√†u rau xanh v√† tr√°i c√¢y, b·ªï sung vitamin D, ƒë·∫£m b·∫£o gi·∫•c ng·ªß ƒë·ªß gi·ªù v√† v·∫≠n ƒë·ªông ƒë·ªÅu ƒë·∫∑n...",
      author: {
        id: "parent2",
        name: "L√™ Th·ªã H√†",
        avatar: "https://randomuser.me/api/portraits/women/22.jpg",
        role: "parent",
      },
      category: "sharing",
      createdAt: "2023-05-08T16:45:00",
      likes: 18,
      comments: 7,
      isPinned: false,
    },
    {
      id: "post5",
      title: "Nh·∫≠n bi·∫øt c√°c d·∫•u hi·ªáu tr·∫ª b·ªã r·ªëi lo·∫°n lo √¢u",
      content:
        "Trong vai tr√≤ y t√° h·ªçc ƒë∆∞·ªùng, t√¥i nh·∫≠n th·∫•y ng√†y c√†ng nhi·ªÅu h·ªçc sinh c√≥ d·∫•u hi·ªáu c·ªßa r·ªëi lo·∫°n lo √¢u. Ph·ª• huynh n√™n ch√∫ √Ω n·∫øu con c√≥ c√°c bi·ªÉu hi·ªán nh∆∞: kh√≥ ng·ªß, √°c m·ªông th∆∞·ªùng xuy√™n, ƒëau ƒë·∫ßu ho·∫∑c ƒëau b·ª•ng kh√¥ng r√µ nguy√™n nh√¢n...",
      author: {
        id: "nurse1",
        name: "Y t√° Nguy·ªÖn Th·ªã H∆∞∆°ng",
        avatar: "https://randomuser.me/api/portraits/women/45.jpg",
        role: "nurse",
      },
      category: "mental-health",
      createdAt: "2023-05-05T09:20:00",
      likes: 27,
      comments: 14,
      isPinned: false,
    },
  ];

  // Load t·∫•t c·∫£ posts m·ªôt l·∫ßn duy nh·∫•t khi component mount
  useEffect(() => {
    const fetchAllPosts = async () => {
      setLoading(true);
      console.log("üîÑ Fetching all posts once...");

      // Check authentication first
      if (!checkAuthentication()) {
        console.log("üîÑ Using mock data due to authentication issues");
        setAllPosts(MOCK_POSTS);
        setLoading(false);
        return;
      }

      try {
        // Fetch all posts without pagination (or with a large page size)
        const result = await communityService.getPosts(1, 1000, null, null);
        console.log("üìù API response:", result);

        if (
          result &&
          result.status === "success" &&
          result.data &&
          Array.isArray(result.data.content)
        ) {
          console.log(
            "‚úÖ Posts data valid:",
            result.data.content.length,
            "posts"
          );

          // C·∫≠p nh·∫≠t liked v√† bookmarked posts t·ª´ API response
          const likedPostIds = [];
          const bookmarkedPostIds = [];

          result.data.content.forEach((post) => {
            if (post.liked) {
              likedPostIds.push(parseInt(post.id));
            }
            if (post.bookmarked) {
              bookmarkedPostIds.push(parseInt(post.id));
            }
          });

          setLikedPosts(likedPostIds);
          setBookmarkedPosts(bookmarkedPostIds);
          setAllPosts(result.data.content);
        } else {
          console.warn("‚ö†Ô∏è API response invalid, using mock data:", result);
          setAllPosts(MOCK_POSTS);
        }
      } catch (error) {
        console.error("‚ùå Error fetching posts:", error);
        console.log("üîÑ Falling back to mock data");
        setAllPosts(MOCK_POSTS);
      } finally {
        setLoading(false);
      }
    };

    fetchAllPosts();
  }, []); // Ch·ªâ ch·∫°y m·ªôt l·∫ßn khi component mount

  // Function ƒë·ªÉ refresh l·∫°i d·ªØ li·ªáu
  const refreshPosts = () => {
    fetchAllPosts();
  };

  // L·ªçc v√† t√¨m ki·∫øm b√†i vi·∫øt tr√™n client-side
  const filteredPosts = Array.isArray(allPosts)
    ? allPosts.filter((post) => {
        // ƒê·∫£m b·∫£o post v√† c√°c thu·ªôc t√≠nh c·∫ßn thi·∫øt t·ªìn t·∫°i
        if (!post || !post.author) return false;

        // L·ªçc theo tab
        const matchesTab =
          activeTab === "all" ||
          (activeTab === "nurse" && matchRole(post.author.role, "nurse")) ||
          (activeTab === "parent" && matchRole(post.author.role, "parent")) ||
          (activeTab === "bookmarked" &&
            bookmarkedPosts.includes(parseInt(post.id))) ||
          activeTab === post.category;

        // C·∫£i thi·ªán t√¨m ki·∫øm: t√¨m trong ti√™u ƒë·ªÅ, n·ªôi dung, excerpt v√† t√™n t√°c gi·∫£
        const matchesSearch =
          searchQuery === "" ||
          (post.title &&
            post.title.toLowerCase().includes(searchQuery.toLowerCase())) ||
          (post.content &&
            post.content.toLowerCase().includes(searchQuery.toLowerCase())) ||
          (post.excerpt &&
            post.excerpt.toLowerCase().includes(searchQuery.toLowerCase())) ||
          (post.author?.name &&
            post.author.name
              .toLowerCase()
              .includes(searchQuery.toLowerCase())) ||
          (post.category &&
            post.category.toLowerCase().includes(searchQuery.toLowerCase()));

        return matchesTab && matchesSearch;
      })
    : [];

  // S·∫Øp x·∫øp b√†i vi·∫øt: ghim l√™n ƒë·∫ßu, sau ƒë√≥ s·∫Øp x·∫øp theo th·ªùi gian
  const sortedPosts = [...filteredPosts].sort((a, b) => {
    if (a.pinned && !b.pinned) return -1;
    if (!a.pinned && b.pinned) return 1;
    return new Date(b.createdAt) - new Date(a.createdAt);
  });

  // Pagination tr√™n client-side
  const totalFilteredPages = Math.ceil(sortedPosts.length / postsPerPage);
  const startIndex = (currentPage - 1) * postsPerPage;
  const endIndex = startIndex + postsPerPage;
  const currentPosts = sortedPosts.slice(startIndex, endIndex);

  // Reset v·ªÅ trang ƒë·∫ßu khi thay ƒë·ªïi filter ho·∫∑c search
  useEffect(() => {
    setCurrentPage(1);
  }, [activeTab, searchQuery]);

  const handleNewPostChange = (e) => {
    const { name, value } = e.target;
    setNewPost((prev) => ({ ...prev, [name]: value }));
  };

  const handleFileUpload = (e) => {
    // X·ª≠ l√Ω upload file (gi·∫£ l·∫≠p)
    const files = Array.from(e.target.files);
    console.log(
      "Files selected:",
      files.map((file) => file.name)
    );
    // Trong th·ª±c t·∫ø, s·∫Ω c√≥ logic upload file l√™n server
  };

  // S·ª≠a l·∫°i h√†m handleCreatePost ƒë·ªÉ s·ª≠ d·ª•ng communityService
  const handleCreatePost = async (e) => {
    e.preventDefault();

    if (!currentUser) {
      alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o b√†i vi·∫øt");
      return;
    }

    if (!checkAuthentication()) {
      alert("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i");
      return;
    }

    setLoading(true);

    try {
      // Chu·∫©n b·ªã d·ªØ li·ªáu theo ƒë·ªãnh d·∫°ng API mong mu·ªën
      const postData = {
        title: newPost.title,
        excerpt: newPost.excerpt || newPost.content.substring(0, 100) + "...", // S·ª≠ d·ª•ng excerpt n·∫øu c√≥
        content: newPost.content,
        category: newPost.category,
        tags: newPost.tags || [],
      };

      console.log("üìù Sending post data:", postData); // Log d·ªØ li·ªáu g·ª≠i ƒëi

      // S·ª≠ d·ª•ng communityService thay v√¨ axios tr·ª±c ti·∫øp
      const result = await communityService.createPost(postData);
      console.log("üìù Create post result:", result);

      if (result && result.status === "success") {
        // Th√™m b√†i vi·∫øt m·ªõi v√†o ƒë·∫ßu danh s√°ch allPosts
        setAllPosts((prev) => [result.data, ...prev]);

        // Reset form v√† ƒë√≥ng modal
        setShowCreatePostForm(false);
        setNewPost({
          title: "",
          content: "",
          excerpt: "",
          category: "H·ªèi ƒë√°p",
          tags: [],
        });

        alert("ƒêƒÉng b√†i th√†nh c√¥ng!");
      }
    } catch (error) {
      console.error("‚ùå Error creating post:", error);

      // Hi·ªÉn th·ªã chi ti·∫øt l·ªói ƒë·ªÉ debug
      if (error.response) {
        console.error("‚ùå API response error:", error.response.data);
        if (error.response.status === 401) {
          alert("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i");
        } else {
          alert(
            `L·ªói: ${
              error.response?.data?.message ||
              error.response?.statusText ||
              "Kh√¥ng th·ªÉ t·∫°o b√†i vi·∫øt"
            }`
          );
        }
      } else {
        alert("Kh√¥ng th·ªÉ t·∫°o b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau.");
      }
    } finally {
      setLoading(false);
    }
  };

  const handlePostLike = async (postId, e) => {
    e.preventDefault(); // NgƒÉn ch·∫∑n vi·ªác chuy·ªÉn trang khi click v√†o n√∫t like

    if (!currentUser) {
      alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√≠ch b√†i vi·∫øt");
      return;
    }

    if (!checkAuthentication()) {
      alert("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i");
      return;
    }

    // ƒê·∫£m b·∫£o postId l√† number
    const numericPostId = parseInt(postId);

    if (isNaN(numericPostId)) {
      console.error("‚ùå Invalid postId for like:", postId);
      alert("L·ªói: ID b√†i vi·∫øt kh√¥ng h·ª£p l·ªá");
      return;
    }

    try {
      console.log("üëç Attempting to like post:", numericPostId);
      const result = await communityService.toggleLike(numericPostId);
      console.log("üëç Like result:", result);

      if (result.status === "success") {
        const { liked, likesCount } = result.data;

        // C·∫≠p nh·∫≠t state cho likedPosts
        if (liked) {
          setLikedPosts((prev) => [...prev, numericPostId]);
        } else {
          setLikedPosts((prev) => prev.filter((id) => id !== numericPostId));
        }

        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£t like trong danh s√°ch b√†i vi·∫øt
        setAllPosts((prev) =>
          prev.map((post) =>
            parseInt(post.id) === numericPostId
              ? { ...post, likes: likesCount }
              : post
          )
        );
      }
    } catch (error) {
      console.error("‚ùå Error liking post:", error);
      console.error("‚ùå Error details:", {
        message: error.message,
        response: error.response?.data,
        status: error.response?.status,
      });

      if (error.response?.status === 401) {
        alert("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i");
      } else if (error.response?.status === 400) {
        alert("L·ªói y√™u c·∫ßu kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i");
      } else {
        alert("Kh√¥ng th·ªÉ th·ª±c hi·ªán thao t√°c. Vui l√≤ng th·ª≠ l·∫°i sau.");
      }
    }
  };

  // X·ª≠ l√Ω vi·ªác ghim b√†i vi·∫øt
  const handleBookmark = async (postId, e) => {
    e.preventDefault(); // NgƒÉn chuy·ªÉn trang khi click

    if (!currentUser) {
      alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ghim b√†i vi·∫øt");
      return;
    }

    // ƒê·∫£m b·∫£o postId l√† number
    const numericPostId = parseInt(postId);

    if (isNaN(numericPostId)) {
      console.error("‚ùå Invalid postId for bookmark:", postId);
      alert("L·ªói: ID b√†i vi·∫øt kh√¥ng h·ª£p l·ªá");
      return;
    }

    try {
      console.log("üìå Attempting to bookmark post:", numericPostId);

      // S·ª≠ d·ª•ng communityService thay v√¨ fetch tr·ª±c ti·∫øp
      const result = await communityService.toggleBookmark(numericPostId);
      console.log("üìå Bookmark result:", result);

      if (result.status === "success") {
        const { bookmarked } = result.data;

        // C·∫≠p nh·∫≠t state cho bookmarkedPosts
        if (bookmarked) {
          setBookmarkedPosts((prev) => [...prev, numericPostId]);
        } else {
          setBookmarkedPosts((prev) =>
            prev.filter((id) => id !== numericPostId)
          );
        }

        // C·∫≠p nh·∫≠t trong posts list
        setAllPosts((prev) =>
          prev.map((post) =>
            parseInt(post.id) === numericPostId ? { ...post, bookmarked } : post
          )
        );
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi ghim b√†i vi·∫øt:", error);
      console.error("‚ùå Error details:", {
        message: error.message,
        response: error.response?.data,
        status: error.response?.status,
      });

      if (error.response?.status === 401) {
        alert("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i");
      } else if (error.response?.status === 400) {
        alert("L·ªói y√™u c·∫ßu kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i");
      } else {
        alert("Kh√¥ng th·ªÉ ghim b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau.");
      }
    }
  };

  const formatDate = (dateString) => {
    const options = {
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    };
    return new Date(dateString).toLocaleDateString("vi-VN", options);
  };

  const getCategoryIcon = (category) => {
    switch (category) {
      case "H·ªèi ƒë√°p":
        return "fa-question-circle";
      case "Th√¥ng b√°o":
        return "fa-bullhorn";
      case "H∆∞·ªõng d·∫´n s·ª©c kh·ªèe":
        return "fa-book-medical";
      case "Chia s·∫ª":
        return "fa-share-alt";
      case "S·ª©c kh·ªèe t√¢m th·∫ßn":
        return "fa-brain";
      default:
        return "fa-clipboard";
    }
  };

  const getCategoryName = (category) => {
    // ƒê√£ c√≥ t√™n category t·ª´ API, tr·∫£ v·ªÅ tr·ª±c ti·∫øp
    return category || "Kh√°c";
  };

  const handleTopicFilter = (topicCategory) => {
    // S·ª≠ d·ª•ng handleTabChange ƒë·ªÉ ƒë·∫£m b·∫£o consistency
    handleTabChange(topicCategory);

    // Cu·ªôn l√™n ƒë·∫ßu trang ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£ l·ªçc
    // Remove scroll to prevent conflicts with layout
  };

  // Helper function ƒë·ªÉ x·ª≠ l√Ω chuy·ªÉn tab
  const handleTabChange = (newTab) => {
    setActiveTab(newTab);
    // Reset v·ªÅ trang ƒë·∫ßu khi chuy·ªÉn tab
    setCurrentPage(1);
  };

  if (loading) {
    return <LoadingSpinner text="ƒêang t·∫£i n·ªôi dung c·ªông ƒë·ªìng..." />;
  }

  return (
    <div className="parent-content-wrapper">
      <div className="community-container">
        <div className="community-header">
          <div className="community-title">
            <h1>C·ªông ƒë·ªìng s·ª©c kh·ªèe h·ªçc ƒë∆∞·ªùng</h1>
            <p>Chia s·∫ª, trao ƒë·ªïi v√† h·ªçc h·ªèi c√πng ph·ª• huynh v√† ƒë·ªôi ng≈© y t·∫ø</p>
          </div>

          <div className="community-actions">
            <button
              className="create-post-btn"
              onClick={() => setShowCreatePostForm(true)}
            >
              <i className="fas fa-plus-circle"></i> T·∫°o b√†i vi·∫øt m·ªõi
            </button>
            <button
              className="refresh-posts-btn"
              onClick={refreshPosts}
              disabled={loading}
              title="T·∫£i l·∫°i b√†i vi·∫øt"
            >
              <i className={`fas fa-sync-alt ${loading ? "fa-spin" : ""}`}></i>
              L√†m m·ªõi
            </button>
          </div>
        </div>

        <div className="community-filter-bar">
          <div className="filter-tabs">
            <button
              className={`filter-tab ${activeTab === "all" ? "active" : ""}`}
              onClick={() => handleTabChange("all")}
            >
              <i className="fas fa-th-large"></i> T·∫•t c·∫£
            </button>

            {/* Th√™m tab b√†i vi·∫øt ƒë√£ ghim */}
            <button
              className={`filter-tab ${
                activeTab === "bookmarked" ? "active" : ""
              }`}
              onClick={() => handleTabChange("bookmarked")}
            >
              <i className="fas fa-bookmark"></i> ƒê√£ ghim
            </button>

            {/* C√°c tab kh√°c */}
            <button
              className={`filter-tab ${activeTab === "nurse" ? "active" : ""}`}
              onClick={() => handleTabChange("nurse")}
            >
              <i className="fas fa-user-nurse"></i> T·ª´ y t√°
            </button>
            <button
              className={`filter-tab ${activeTab === "parent" ? "active" : ""}`}
              onClick={() => handleTabChange("parent")}
            >
              <i className="fas fa-user-friends"></i> T·ª´ ph·ª• huynh
            </button>
            <button
              className={`filter-tab ${
                activeTab === "question" ? "active" : ""
              }`}
              onClick={() => handleTabChange("question")}
            >
              <i className="fas fa-question-circle"></i> C√¢u h·ªèi
            </button>
            <button
              className={`filter-tab ${
                activeTab === "announcement" ? "active" : ""
              }`}
              onClick={() => handleTabChange("announcement")}
            >
              <i className="fas fa-bullhorn"></i> Th√¥ng b√°o
            </button>
          </div>

          <div className="search-bar">
            <SearchBox
              placeholder="T√¨m ki·∫øm b√†i vi·∫øt (ti√™u ƒë·ªÅ, n·ªôi dung, t√°c gi·∫£...)..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              onSearch={() => {}} // Search t·ª± ƒë·ªông x·ª≠ l√Ω qua onChange
              className="community-search"
            />
          </div>
        </div>

        {showCreatePostForm && (
          <div className="create-post-modal">
            <div className="create-post-container">
              <div className="modal-header">
                <h2>T·∫°o b√†i vi·∫øt m·ªõi</h2>
                <button
                  className="close-modal-btn"
                  onClick={() => setShowCreatePostForm(false)}
                >
                  <i className="fas fa-times"></i>
                </button>
              </div>

              <form className="create-post-form" onSubmit={handleCreatePost}>
                <div className="form-group">
                  <label htmlFor="post-title">Ti√™u ƒë·ªÅ</label>
                  <input
                    type="text"
                    id="post-title"
                    name="title"
                    value={newPost.title}
                    onChange={handleNewPostChange}
                    placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b√†i vi·∫øt"
                    required
                  />
                </div>

                <div className="form-group">
                  <label htmlFor="post-category">Danh m·ª•c</label>
                  <select
                    id="post-category"
                    name="category"
                    value={newPost.category}
                    onChange={handleNewPostChange}
                    required
                  >
                    <option value="H·ªèi ƒë√°p">C√¢u h·ªèi</option>
                    <option value="Chia s·∫ª">Chia s·∫ª kinh nghi·ªám</option>
                    <option value="COVID-19 v√† tr·∫ª em">
                      COVID-19 v√† tr·∫ª em
                    </option>
                    <option value="Dinh d∆∞·ª°ng h·ªçc ƒë∆∞·ªùng">
                      Dinh d∆∞·ª°ng h·ªçc ƒë∆∞·ªùng
                    </option>
                    <option value="S·ª©c kh·ªèe t√¢m th·∫ßn">S·ª©c kh·ªèe t√¢m th·∫ßn</option>
                    <option value="Tu·ªïi d·∫≠y th√¨">Tu·ªïi d·∫≠y th√¨</option>
                    <option value="V·∫Øc-xin cho h·ªçc sinh">
                      V·∫Øc-xin cho h·ªçc sinh
                    </option>
                    {currentUser?.role === "NURSE" && (
                      <>
                        <option value="Th√¥ng b√°o">Th√¥ng b√°o</option>
                        <option value="H∆∞·ªõng d·∫´n s·ª©c kh·ªèe">
                          H∆∞·ªõng d·∫´n s·ª©c kh·ªèe
                        </option>
                      </>
                    )}
                  </select>
                </div>

                <div className="form-group">
                  <label htmlFor="post-content">N·ªôi dung</label>
                  <textarea
                    id="post-content"
                    name="content"
                    value={newPost.content}
                    onChange={handleNewPostChange}
                    placeholder="Nh·∫≠p n·ªôi dung b√†i vi·∫øt..."
                    rows="10"
                    required
                  ></textarea>
                </div>

                <div className="form-group">
                  <label htmlFor="post-attachments">
                    ƒê√≠nh k√®m file (t√πy ch·ªçn)
                  </label>
                  <div className="file-upload-container">
                    <input
                      type="file"
                      id="post-attachments"
                      onChange={handleFileUpload}
                      multiple
                    />
                    <label
                      htmlFor="post-attachments"
                      className="file-upload-btn"
                    >
                      <i className="fas fa-paperclip"></i> Ch·ªçn file
                    </label>
                  </div>
                  <span className="help-text">
                    Cho ph√©p file: jpg, png, pdf, doc, docx. T·ªëi ƒëa 5MB/file
                  </span>
                </div>

                <div className="form-actions">
                  <button
                    type="button"
                    className="cancel-btn"
                    onClick={() => setShowCreatePostForm(false)}
                  >
                    H·ªßy b·ªè
                  </button>
                  <button type="submit" className="submit-btn">
                    <i className="fas fa-paper-plane"></i> ƒêƒÉng b√†i
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

        <div className="posts-section">
          {currentPosts.length === 0 ? (
            <div className="empty-posts">
              <i className="fas fa-search"></i>
              <p>
                {searchQuery
                  ? `Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt n√†o ch·ª©a "${searchQuery}"`
                  : "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt n√†o ph√π h·ª£p"}
              </p>
              <button
                onClick={() => {
                  handleTabChange("all");
                  setSearchQuery("");
                }}
                className="reset-filters-btn"
              >
                <i className="fas fa-sync"></i> X√≥a b·ªô l·ªçc
              </button>
            </div>
          ) : (
            <>
              {/* Hi·ªÉn th·ªã th√¥ng tin t√¨m ki·∫øm */}
              {(searchQuery || activeTab !== "all") && (
                <div className="search-results-info">
                  <p>
                    T√¨m th·∫•y <strong>{sortedPosts.length}</strong> b√†i vi·∫øt
                    {searchQuery && (
                      <span>
                        {" "}
                        cho t·ª´ kh√≥a "<strong>{searchQuery}</strong>"
                      </span>
                    )}
                    {activeTab !== "all" && (
                      <span>
                        {" "}
                        trong danh m·ª•c "<strong>{activeTab}</strong>"
                      </span>
                    )}
                  </p>
                </div>
              )}

              <div className="posts-list">
                {currentPosts.map((post) => (
                  <div
                    key={post.id}
                    className={`post-card ${post.pinned ? "pinned" : ""}`}
                  >
                    {post.pinned && (
                      <div className="pin-indicator">
                        <i className="fas fa-thumbtack"></i> Ghim
                      </div>
                    )}

                    <div className="post-header">
                      <div className="post-author">
                        {post.author.role === "PARENT" ? (
                          // Icon cho ph·ª• huynh
                          <div className="author-icon parent-icon">
                            <i className="fas fa-user-friends"></i>
                          </div>
                        ) : post.author.role === "NURSE" ? (
                          // Icon cho y t√°
                          <div className="author-icon nurse-icon">
                            <i className="fas fa-user-nurse"></i>
                          </div>
                        ) : (
                          // Icon m·∫∑c ƒë·ªãnh cho c√°c vai tr√≤ kh√°c
                          <div className="author-icon default-icon">
                            <i className="fas fa-user"></i>
                          </div>
                        )}
                        <div className="author-info">
                          <div className="author-name">
                            {post.author.name}
                            {post.author.role === "NURSE" && (
                              <span className="author-badge nurse">
                                <i className="fas fa-user-nurse"></i> Y t√°
                              </span>
                            )}
                            {post.author.role === "PARENT" && (
                              <span className="author-badge parent">
                                <i className="fas fa-users"></i> Ph·ª• huynh
                              </span>
                            )}
                          </div>
                          <div className="post-time">
                            {formatDate(post.createdAt)}
                          </div>
                        </div>
                      </div>

                      <div className="post-category">
                        <i
                          className={`fas ${getCategoryIcon(post.category)}`}
                        ></i>
                        {getCategoryName(post.category)}
                      </div>
                    </div>

                    <div className="post-content">
                      <h3 className="post-title">
                        <Link to={`/parent/community/post/${post.id}`}>
                          {post.title}
                        </Link>
                      </h3>
                      <p className="post-excerpt">
                        {post.excerpt || post.content.substring(0, 250) + "..."}
                      </p>
                    </div>

                    <div className="post-footer">
                      <div className="post-stats">
                        <button
                          className={`like-btn ${
                            likedPosts.includes(parseInt(post.id))
                              ? "liked"
                              : ""
                          }`}
                          onClick={(e) => handlePostLike(post.id, e)}
                        >
                          <i
                            className={`${
                              likedPosts.includes(parseInt(post.id))
                                ? "fas"
                                : "far"
                            } fa-heart`}
                          ></i>{" "}
                          {post.likes}
                        </button>
                        <Link
                          to={`/parent/community/post/${post.id}`}
                          className="comments-btn"
                        >
                          <i className="fas fa-comment"></i>{" "}
                          {post.commentsCount}
                        </Link>

                        {/* Th√™m n√∫t bookmark */}
                        <button
                          className={`bookmark-btn ${
                            bookmarkedPosts.includes(parseInt(post.id))
                              ? "bookmarked"
                              : ""
                          }`}
                          onClick={(e) => handleBookmark(post.id, e)}
                          title={
                            bookmarkedPosts.includes(parseInt(post.id))
                              ? "B·ªè ghim"
                              : "Ghim b√†i vi·∫øt"
                          }
                        >
                          <i
                            className={`${
                              bookmarkedPosts.includes(parseInt(post.id))
                                ? "fas"
                                : "far"
                            } fa-bookmark`}
                          ></i>
                        </button>
                      </div>

                      <Link
                        to={`/parent/community/post/${post.id}`}
                        className="read-more-btn"
                      >
                        ƒê·ªçc ti·∫øp <i className="fas fa-arrow-right"></i>
                      </Link>
                    </div>
                  </div>
                ))}
              </div>
            </>
          )}
        </div>

        {/* Pagination Controls */}
        {totalFilteredPages > 1 && (
          <div className="pagination-controls">
            <button
              onClick={() => setCurrentPage((prev) => Math.max(1, prev - 1))}
              disabled={currentPage <= 1}
              className="pagination-btn prev-btn"
            >
              <i className="fas fa-chevron-left"></i> Trang tr∆∞·ªõc
            </button>

            <span className="pagination-info">
              Trang {currentPage} / {totalFilteredPages}
            </span>

            <button
              onClick={() =>
                setCurrentPage((prev) => Math.min(totalFilteredPages, prev + 1))
              }
              disabled={currentPage >= totalFilteredPages}
              className="pagination-btn next-btn"
            >
              Trang sau <i className="fas fa-chevron-right"></i>
            </button>
          </div>
        )}

        <div className="community-sidebar">
          <div className="sidebar-section popular-topics">
            <h3>Ch·ªß ƒë·ªÅ ph·ªï bi·∫øn</h3>
            <ul className="topic-list">
              <li>
                <button
                  className={`topic-link ${
                    activeTab === "COVID-19 v√† tr·∫ª em" ? "active" : ""
                  }`}
                  onClick={() => handleTopicFilter("COVID-19 v√† tr·∫ª em")}
                >
                  <i className="fas fa-virus"></i> COVID-19 v√† tr·∫ª em
                </button>
              </li>
              <li>
                <button
                  className={`topic-link ${
                    activeTab === "Dinh d∆∞·ª°ng h·ªçc ƒë∆∞·ªùng" ? "active" : ""
                  }`}
                  onClick={() => handleTopicFilter("Dinh d∆∞·ª°ng h·ªçc ƒë∆∞·ªùng")}
                >
                  <i className="fas fa-apple-alt"></i> Dinh d∆∞·ª°ng h·ªçc ƒë∆∞·ªùng
                </button>
              </li>
              <li>
                <button
                  className={`topic-link ${
                    activeTab === "S·ª©c kh·ªèe t√¢m th·∫ßn" ? "active" : ""
                  }`}
                  onClick={() => handleTopicFilter("S·ª©c kh·ªèe t√¢m th·∫ßn")}
                >
                  <i className="fas fa-brain"></i> S·ª©c kh·ªèe t√¢m th·∫ßn
                </button>
              </li>
              <li>
                <button
                  className={`topic-link ${
                    activeTab === "Tu·ªïi d·∫≠y th√¨" ? "active" : ""
                  }`}
                  onClick={() => handleTopicFilter("Tu·ªïi d·∫≠y th√¨")}
                >
                  <i className="fas fa-child"></i> Tu·ªïi d·∫≠y th√¨
                </button>
              </li>
              <li>
                <button
                  className={`topic-link ${
                    activeTab === "V·∫Øc-xin cho h·ªçc sinh" ? "active" : ""
                  }`}
                  onClick={() => handleTopicFilter("V·∫Øc-xin cho h·ªçc sinh")}
                >
                  <i className="fas fa-syringe"></i> V·∫Øc-xin cho h·ªçc sinh
                </button>
              </li>
            </ul>
          </div>

          <div className="sidebar-section community-rules">
            <h3>Quy ƒë·ªãnh c·ªông ƒë·ªìng</h3>
            <ul className="rules-list">
              <li>T√¥n tr·ªçng m·ªçi th√†nh vi√™n trong c·ªông ƒë·ªìng</li>
              <li>Kh√¥ng chia s·∫ª th√¥ng tin c√° nh√¢n c·ªßa h·ªçc sinh</li>
              <li>Kh√¥ng ƒëƒÉng n·ªôi dung qu·∫£ng c√°o, spam</li>
              <li>Ki·ªÉm tra th√¥ng tin tr∆∞·ªõc khi chia s·∫ª</li>
              <li>B√°o c√°o nh·ªØng n·ªôi dung kh√¥ng ph√π h·ª£p</li>
            </ul>
          </div>

          <div className="sidebar-section contact-nurse">
            <h3>Li√™n h·ªá y t√° tr∆∞·ªùng h·ªçc</h3>
            <div className="nurse-contact">
              <div className="nurse-info">
                <div className="nurse-avatar-container">
                  <i className="fas fa-user-nurse"></i>
                </div>
                <div className="nurse-details">
                  <div className="nurse-name">Y t√° Nguy·ªÖn Th·ªã H∆∞∆°ng</div>
                  <div className="nurse-title">Y t√° tr∆∞·ªüng</div>
                </div>
              </div>
              <a href="tel:+84912345678" className="contact-btn">
                <i className="fas fa-phone"></i> G·ªçi ƒëi·ªán
              </a>
              <Link to="/parent/contact" className="contact-btn message">
                <i className="fas fa-envelope"></i> Nh·∫Øn tin
              </Link>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Community;

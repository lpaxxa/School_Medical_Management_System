// Test script ƒë·ªÉ test to√†n b·ªô flow API
import healthCheckupConsentService from "../../../../services/healthCheckupConsentService";

const testFullFlow = async () => {
  console.log("üß™ === TESTING FULL API FLOW ===");
  
  try {
    // 1. Test load danh s√°ch th√¥ng b√°o
    console.log("\nüìã 1. Testing load notifications list...");
    const parentId = 1;
    const listResponse = await healthCheckupConsentService.getAllConsents(parentId);
    
    console.log("‚úÖ List Response:", {
      parentName: listResponse.parentName,
      totalNotifications: listResponse.totalNotifications,
      childrenCount: listResponse.childrenNotifications?.length,
    });
    
    // L·∫•y consent ID ƒë·∫ßu ti√™n ƒë·ªÉ test
    const firstChild = listResponse.childrenNotifications?.[0];
    const firstNotification = firstChild?.notifications?.[0];
    const consentId = firstNotification?.consentId;
    
    if (!consentId) {
      console.error("‚ùå No consent ID found for testing");
      return;
    }
    
    console.log(`üìç Using consent ID: ${consentId} (${firstChild.studentName})`);
    
    // 2. Test load chi ti·∫øt consent
    console.log("\nüìÑ 2. Testing load consent details...");
    const detailResponse = await healthCheckupConsentService.getConsentDetails(consentId);
    
    console.log("‚úÖ Detail Response:", {
      campaignTitle: detailResponse.campaignTitle,
      studentName: detailResponse.studentName,
      consentStatus: detailResponse.consentStatus,
      availableItems: detailResponse.availableSpecialCheckupItems?.length,
      selectedItems: detailResponse.selectedSpecialCheckupItems?.length,
    });
    
    // 3. Test submit consent (ch·ªâ log, kh√¥ng th·ª±c s·ª± submit)
    console.log("\nüì§ 3. Testing submit consent (dry run)...");
    const consentData = {
      consentGiven: true,
      specialCheckupItems: ["Kh√°m m·∫Øt chuy√™n s√¢u", "X√©t nghi·ªám m√°u"],
      parentNotes: "Test note from API test script",
    };
    
    console.log("üîÑ Would submit:", consentData);
    console.log("üìç To endpoint: PUT /parent-consents/" + consentId);
    
    // Uncomment ƒë·ªÉ th·ª±c s·ª± submit:
    // const submitResponse = await healthCheckupConsentService.submitConsent(consentId, consentData);
    // console.log("‚úÖ Submit Response:", submitResponse);
    
    console.log("\nüéâ === ALL TESTS PASSED ===");
    
    return {
      listData: listResponse,
      detailData: detailResponse,
      testConsentId: consentId,
    };
    
  } catch (error) {
    console.error("‚ùå Test failed:", error);
    return null;
  }
};

// Test individual consent details
const testConsentDetails = async (consentId) => {
  try {
    console.log(`üß™ Testing consent details for ID: ${consentId}`);
    const response = await healthCheckupConsentService.getConsentDetails(consentId);
    
    console.log("‚úÖ Success! Data structure:");
    console.log("- Campaign:", response.campaignTitle);
    console.log("- Student:", response.studentName);
    console.log("- Status:", response.consentStatus);
    console.log("- Available items:", response.availableSpecialCheckupItems?.length);
    console.log("- Selected items:", response.selectedSpecialCheckupItems?.length);
    console.log("- Parent notes:", response.consent?.parentNotes || "None");
    
    return response;
  } catch (error) {
    console.error(`‚ùå Failed to load consent ${consentId}:`, error);
    return null;
  }
};

export { testFullFlow, testConsentDetails };
export default testFullFlow;

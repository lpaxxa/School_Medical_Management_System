// Test script cho API submit consent v·ªõi c·∫•u tr√∫c m·ªõi
import healthCheckupConsentService from "../../../../services/healthCheckupConsentService";

const testSubmitConsent = async (consentId, action = "approve") => {
  try {
    console.log(`üß™ Testing ${action} consent for ID: ${consentId}`);
    
    let consentData;
    
    if (action === "approve") {
      consentData = {
        consentStatus: "APPROVED",
        specialCheckupItems: [
          "Kh√°m m·∫Øt chuy√™n s√¢u",
          "Kh√°m rƒÉng mi·ªáng"
        ],
        parentNotes: "Con t√¥i b·ªã d·ªã ·ª©ng nh·∫π"
      };
    } else if (action === "reject") {
      consentData = {
        consentStatus: "REJECTED",
        specialCheckupItems: [],
        parentNotes: "Kh√¥ng mu·ªën tham gia l√∫c n√†y"
      };
    }
    
    console.log("üì§ Request data:", consentData);
    console.log(`üìç API: PUT http://localhost:8080/api/v1/parent-consents/${consentId}`);
    
    // Th·ª±c t·∫ø ch∆∞a submit ƒë·ªÉ tr√°nh l√†m thay ƒë·ªïi data
    console.log("üîÑ Would submit to API...");
    
    // Uncomment d√≤ng d∆∞·ªõi ƒë·ªÉ th·ª±c s·ª± test:
    // const response = await healthCheckupConsentService.submitConsent(consentId, consentData);
    // console.log("‚úÖ Submit response:", response);
    
    console.log(`‚úÖ Test ${action} consent structure completed!`);
    
    return {
      consentId,
      action,
      requestData: consentData,
      success: true
    };
    
  } catch (error) {
    console.error(`‚ùå Test ${action} consent failed:`, error);
    return {
      consentId,
      action,
      error: error.message,
      success: false
    };
  }
};

// Test both approve and reject
const testBothActions = async (consentId = 1) => {
  console.log("üß™ === TESTING BOTH APPROVE & REJECT ===");
  
  const approveResult = await testSubmitConsent(consentId, "approve");
  await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1s
  
  const rejectResult = await testSubmitConsent(consentId, "reject");
  
  console.log("\nüìä Test Results:");
  console.log("- Approve test:", approveResult.success ? "‚úÖ PASS" : "‚ùå FAIL");
  console.log("- Reject test:", rejectResult.success ? "‚úÖ PASS" : "‚ùå FAIL");
  
  return { approveResult, rejectResult };
};

// Test API format validation
const validateAPIFormat = () => {
  console.log("üîç === API FORMAT VALIDATION ===");
  
  const expectedApproveFormat = {
    consentStatus: "APPROVED",
    specialCheckupItems: ["Kh√°m m·∫Øt chuy√™n s√¢u", "Kh√°m rƒÉng mi·ªáng"],
    parentNotes: "Con t√¥i b·ªã d·ªã ·ª©ng nh·∫π"
  };
  
  const expectedRejectFormat = {
    consentStatus: "REJECTED", 
    specialCheckupItems: [],
    parentNotes: "Kh√¥ng mu·ªën tham gia l√∫c n√†y"
  };
  
  console.log("‚úÖ APPROVE format:", JSON.stringify(expectedApproveFormat, null, 2));
  console.log("‚úÖ REJECT format:", JSON.stringify(expectedRejectFormat, null, 2));
  
  return { expectedApproveFormat, expectedRejectFormat };
};

export { testSubmitConsent, testBothActions, validateAPIFormat };
export default testSubmitConsent;

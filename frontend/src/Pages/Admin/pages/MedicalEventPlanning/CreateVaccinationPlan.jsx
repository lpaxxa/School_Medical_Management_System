import React, { useState, useEffect } from "react";
import {
  FaSyringe,
  FaCalendarAlt,
  FaFileAlt,
  FaCheck,
  FaTimes,
  FaSpinner,
  FaPlusCircle,
  FaHospital,
  FaSchool,
  FaClock,
  FaTrash,
} from "react-icons/fa";
import vaccinationPlanService from "../../../../services/APIAdmin/vaccinationPlanService";
import vaccineService from "../../../../services/APIAdmin/vaccineService";
import "./CreateVaccinationPlan.css";

const CreateVaccinationPlan = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);
  const [showError, setShowError] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [vaccines, setVaccines] = useState([]);
  const [loadingVaccines, setLoadingVaccines] = useState(true);

  // Form data v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh theo API m·ªõi
  const [formData, setFormData] = useState({
    name: "",
    description: "",
    vaccinationDate: "",
    deadlineDate: "",
    vaccineIds: [],
    className: [],
  });

  // State cho vi·ªác th√™m l·ªõp h·ªçc
  const [newClassName, setNewClassName] = useState("");

  // L·∫•y danh s√°ch vaccine khi component mount
  useEffect(() => {
    fetchVaccines();
  }, []);

  const fetchVaccines = async () => {
    try {
      setLoadingVaccines(true);
      const result = await vaccineService.getAllVaccines();
      if (result.success) {
        setVaccines(result.data);
      } else {
        console.error("L·ªói khi l·∫•y danh s√°ch vaccine:", result.message);
      }
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch vaccine:", error);
    } finally {
      setLoadingVaccines(false);
    }
  };

  // Validate form
  const validateForm = () => {
    if (!formData.name.trim()) {
      setErrorMessage("Vui l√≤ng nh·∫≠p t√™n k·∫ø ho·∫°ch ti√™m ch·ªßng");
      return false;
    }
    if (!formData.description.trim()) {
      setErrorMessage("Vui l√≤ng nh·∫≠p m√¥ t·∫£ k·∫ø ho·∫°ch");
      return false;
    }
    if (!formData.vaccinationDate) {
      setErrorMessage("Vui l√≤ng ch·ªçn ng√†y ti√™m");
      return false;
    }
    if (!formData.deadlineDate) {
      setErrorMessage("Vui l√≤ng ch·ªçn h·∫°n ch√≥t ƒëƒÉng k√Ω");
      return false;
    }
    if (formData.vaccineIds.length === 0) {
      setErrorMessage("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt lo·∫°i vaccine");
      return false;
    }
    if (formData.className.length === 0) {
      setErrorMessage("Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt l·ªõp h·ªçc");
      return false;
    }

    // Ki·ªÉm tra deadline ph·∫£i tr∆∞·ªõc ng√†y ti√™m
    const deadlineDate = new Date(formData.deadlineDate);
    const vaccinationDate = new Date(formData.vaccinationDate);
    if (deadlineDate >= vaccinationDate) {
      setErrorMessage("H·∫°n ch√≥t ƒëƒÉng k√Ω ph·∫£i tr∆∞·ªõc ng√†y ti√™m");
      return false;
    }

    return true;
  };

  // Validation chi ti·∫øt cho t·ª´ng field
  const validateField = (field, value) => {
    switch (field) {
      case "name":
        return value.trim().length >= 5
          ? null
          : "T√™n k·∫ø ho·∫°ch ph·∫£i c√≥ √≠t nh·∫•t 5 k√Ω t·ª±";
      case "description":
        return value.trim().length >= 10
          ? null
          : "M√¥ t·∫£ ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±";
      case "vaccinationDate":
        const vacDate = new Date(value);
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        return vacDate >= today ? null : "Ng√†y ti√™m ph·∫£i t·ª´ h√¥m nay tr·ªü ƒëi";
      case "deadlineDate":
        const deadlineDate = new Date(value);
        const vaccinationDate = new Date(formData.vaccinationDate);
        if (deadlineDate >= vaccinationDate) {
          return "H·∫°n ch√≥t ƒëƒÉng k√Ω ph·∫£i tr∆∞·ªõc ng√†y ti√™m";
        }
        return null;
      default:
        return null;
    }
  };

  // State ƒë·ªÉ l∆∞u l·ªói validation realtime
  const [fieldErrors, setFieldErrors] = useState({});

  // X·ª≠ l√Ω submit form
  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!validateForm()) {
      setShowError(true);
      setTimeout(() => setShowError(false), 5000);
      return;
    }

    setIsLoading(true);
    setShowSuccess(false);
    setShowError(false);

    try {
      // Chu·∫©n b·ªã data theo format API m·ªõi
      const planData = {
        name: formData.name,
        description: formData.description,
        vaccinationDate: formData.vaccinationDate,
        deadlineDate: new Date(formData.deadlineDate).toISOString(), // Convert to ISO string
        vaccineIds: formData.vaccineIds,
        className: formData.className,
      };

      console.log("üöÄ T·∫°o k·∫ø ho·∫°ch ti√™m ch·ªßng:", planData);

      const result = await vaccinationPlanService.createVaccinationPlan(
        planData
      );

      if (result.success) {
        setShowSuccess(true);
        // Reset form sau khi th√†nh c√¥ng
        setFormData({
          name: "",
          description: "",
          vaccinationDate: "",
          deadlineDate: "",
          vaccineIds: [],
          className: [],
        });
        setTimeout(() => setShowSuccess(false), 5000);
      } else {
        throw new Error(result.message || "C√≥ l·ªói x·∫£y ra khi t·∫°o k·∫ø ho·∫°ch");
      }
    } catch (err) {
      console.error("‚ùå L·ªói t·∫°o k·∫ø ho·∫°ch:", err);
      setErrorMessage(err.message || "C√≥ l·ªói kh√¥ng mong mu·ªën x·∫£y ra");
      setShowError(true);
      setTimeout(() => setShowError(false), 5000);
    } finally {
      setIsLoading(false);
    }
  };

  // X·ª≠ l√Ω thay ƒë·ªïi input
  const handleInputChange = (field, value) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  // X·ª≠ l√Ω validation khi ng∆∞·ªùi d√πng nh·∫≠p
  const handleInputChangeWithValidation = (field, value) => {
    handleInputChange(field, value);

    // Validate field
    const error = validateField(field, value);
    setFieldErrors((prev) => ({
      ...prev,
      [field]: error,
    }));
  };

  // X·ª≠ l√Ω ch·ªçn vaccine
  const handleVaccineChange = (vaccineId) => {
    setFormData((prev) => {
      const currentIds = prev.vaccineIds;
      const newIds = currentIds.includes(vaccineId)
        ? currentIds.filter((id) => id !== vaccineId)
        : [...currentIds, vaccineId];

      return {
        ...prev,
        vaccineIds: newIds,
      };
    });
  };

  // X·ª≠ l√Ω th√™m l·ªõp h·ªçc
  const handleAddClassName = () => {
    if (
      newClassName.trim() &&
      !formData.className.includes(newClassName.trim())
    ) {
      setFormData((prev) => ({
        ...prev,
        className: [...prev.className, newClassName.trim()],
      }));
      setNewClassName("");
    }
  };

  // X·ª≠ l√Ω x√≥a l·ªõp h·ªçc
  const handleRemoveClassName = (classToRemove) => {
    setFormData((prev) => ({
      ...prev,
      className: prev.className.filter((cls) => cls !== classToRemove),
    }));
  };

  // X·ª≠ l√Ω Enter key cho input l·ªõp h·ªçc
  const handleClassNameKeyPress = (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      handleAddClassName();
    }
  };

  // Helper functions ƒë·ªÉ format d·ªØ li·ªáu hi·ªÉn th·ªã
  const formatVaccineDisplay = (vaccine) => {
    const ageDisplay =
      vaccine.minAgeMonths && vaccine.maxAgeMonths
        ? `${vaccine.minAgeMonths} - ${vaccine.maxAgeMonths} th√°ng`
        : "Ch∆∞a x√°c ƒë·ªãnh ƒë·ªô tu·ªïi";

    return {
      ...vaccine,
      ageDisplay,
      displayName: vaccine.name || "Vaccine kh√¥ng t√™n",
    };
  };

  const formatSelectedVaccines = (selectedIds, vaccines) => {
    return selectedIds
      .map((id) => vaccines.find((v) => v.id === id))
      .filter(Boolean)
      .map((v) => v.name)
      .join(", ");
  };

  return (
    <div className="create-vaccination-plan">
      {/* Header */}
      <div className="form-header">
        <div className="header-icon">
          <FaHospital />
        </div>
        <div className="header-content">
          <h2>T·∫°o K·∫ø Ho·∫°ch Ti√™m Ch·ªßng M·ªõi</h2>
          <p>L·∫≠p k·∫ø ho·∫°ch ti√™m ch·ªßng cho h·ªçc sinh trong tr∆∞·ªùng</p>
        </div>
      </div>

      {/* Success Message */}
      {showSuccess && (
        <div className="notification success">
          <FaCheck className="notification-icon" />
          <div className="notification-content">
            <h4>Th√†nh c√¥ng!</h4>
            <p>K·∫ø ho·∫°ch ti√™m ch·ªßng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng</p>
          </div>
        </div>
      )}

      {/* Error Message */}
      {showError && (
        <div className="notification error">
          <FaTimes className="notification-icon" />
          <div className="notification-content">
            <h4>C√≥ l·ªói x·∫£y ra!</h4>
            <p>{errorMessage}</p>
          </div>
        </div>
      )}

      {/* Form */}
      <form onSubmit={handleSubmit} className="vaccination-form">
        {/* Th√¥ng tin c∆° b·∫£n */}
        <div className="form-section">
          <h3>
            <FaFileAlt className="section-icon" />
            Th√¥ng Tin C∆° B·∫£n
          </h3>

          <div className="form-grid">
            <div className="form-group">
              <label htmlFor="name">
                <FaSyringe className="label-icon" />
                T√™n K·∫ø Ho·∫°ch Ti√™m Ch·ªßng *
              </label>
              <input
                id="name"
                type="text"
                placeholder="V√≠ d·ª•: Ti√™m nh·∫Øc DPT cho h·ªçc sinh l·ªõp 1"
                value={formData.name}
                onChange={(e) =>
                  handleInputChangeWithValidation("name", e.target.value)
                }
                required
              />
              {fieldErrors.name && (
                <div className="field-error">{fieldErrors.name}</div>
              )}
            </div>

            <div className="form-group full-width">
              <label htmlFor="description">
                <FaFileAlt className="label-icon" />
                M√¥ T·∫£ K·∫ø Ho·∫°ch *
              </label>
              <textarea
                id="description"
                rows="4"
                placeholder="V√≠ d·ª•: Ti√™m nh·∫Øc v·∫Øc-xin ph√≤ng b·∫°ch h·∫ßu, ho g√† v√† u·ªën v√°n cho h·ªçc sinh l·ªõp 1 theo ch∆∞∆°ng tr√¨nh ti√™m ch·ªßng m·ªü r·ªông."
                value={formData.description}
                onChange={(e) =>
                  handleInputChangeWithValidation("description", e.target.value)
                }
                required
              />
              {fieldErrors.description && (
                <div className="field-error">{fieldErrors.description}</div>
              )}
            </div>
          </div>
        </div>

        {/* Th·ªùi gian */}
        <div className="form-section">
          <h3>
            <FaCalendarAlt className="section-icon" />
            Th·ªùi Gian Th·ª±c Hi·ªán
          </h3>

          <div className="form-grid">
            <div className="form-group">
              <label htmlFor="vaccinationDate">
                <FaCalendarAlt className="label-icon" />
                Ng√†y Ti√™m *
              </label>
              <input
                id="vaccinationDate"
                type="date"
                value={formData.vaccinationDate}
                onChange={(e) =>
                  handleInputChangeWithValidation(
                    "vaccinationDate",
                    e.target.value
                  )
                }
                min={new Date().toISOString().split("T")[0]}
                required
              />
              {fieldErrors.vaccinationDate && (
                <div className="field-error">{fieldErrors.vaccinationDate}</div>
              )}
            </div>

            <div className="form-group">
              <label htmlFor="deadlineDate">
                <FaClock className="label-icon" />
                H·∫°n Ch√≥t ƒêƒÉng K√Ω *
              </label>
              <input
                id="deadlineDate"
                type="datetime-local"
                value={formData.deadlineDate}
                onChange={(e) =>
                  handleInputChangeWithValidation(
                    "deadlineDate",
                    e.target.value
                  )
                }
                min={new Date().toISOString().slice(0, 16)}
                required
              />
              {fieldErrors.deadlineDate && (
                <div className="field-error">{fieldErrors.deadlineDate}</div>
              )}
              <small className="helper-text">
                H·∫°n ch√≥t ph·∫£i tr∆∞·ªõc ng√†y ti√™m
              </small>
            </div>
          </div>
        </div>

        {/* Ch·ªçn vaccine */}
        <div className="form-section">
          <h3>
            <FaSyringe className="section-icon" />
            Ch·ªçn Vaccine
          </h3>

          {loadingVaccines ? (
            <div className="loading-vaccines">
              <FaSpinner className="spinning" />
              <span>ƒêang t·∫£i danh s√°ch vaccine...</span>
            </div>
          ) : (
            <div className="vaccine-list">
              {vaccines.length > 0 ? (
                vaccines.map((vaccine) => {
                  const formatted = formatVaccineDisplay(vaccine);
                  return (
                    <div key={vaccine.id} className="vaccine-item">
                      <label className="vaccine-checkbox">
                        <input
                          type="checkbox"
                          checked={formData.vaccineIds.includes(vaccine.id)}
                          onChange={() => handleVaccineChange(vaccine.id)}
                        />
                        <span className="checkmark"></span>
                        <div className="vaccine-info">
                          <div className="vaccine-name">
                            {formatted.displayName}
                          </div>
                          <div className="vaccine-details">
                            ƒê·ªô tu·ªïi: {formatted.ageDisplay}
                            {vaccine.description && (
                              <span className="vaccine-description">
                                | {vaccine.description}
                              </span>
                            )}
                          </div>
                        </div>
                      </label>
                    </div>
                  );
                })
              ) : (
                <div className="no-vaccines">
                  <p>Kh√¥ng c√≥ vaccine n√†o trong h·ªá th·ªëng</p>
                </div>
              )}

              {formData.vaccineIds.length > 0 && (
                <div className="selected-vaccines-summary">
                  <strong>ƒê√£ ch·ªçn {formData.vaccineIds.length} vaccine:</strong>
                  <span>
                    {formatSelectedVaccines(formData.vaccineIds, vaccines)}
                  </span>
                </div>
              )}
            </div>
          )}
        </div>

        {/* Ch·ªçn l·ªõp h·ªçc */}
        <div className="form-section">
          <h3>
            <FaSchool className="section-icon" />
            L·ªõp H·ªçc Tham Gia
          </h3>

          <div className="class-input-section">
            <div className="add-class-input">
              <input
                type="text"
                placeholder="Nh·∫≠p t√™n l·ªõp (v√≠ d·ª•: 1A1, 1B2)"
                value={newClassName}
                onChange={(e) => setNewClassName(e.target.value)}
                onKeyPress={handleClassNameKeyPress}
              />
              <button
                type="button"
                onClick={handleAddClassName}
                className="add-class-btn"
                disabled={!newClassName.trim()}
              >
                <FaPlusCircle />
                Th√™m
              </button>
            </div>

            {formData.className.length > 0 && (
              <div className="selected-classes">
                <h4>C√°c l·ªõp ƒë√£ ch·ªçn:</h4>
                <div className="class-tags">
                  {formData.className.map((className, index) => (
                    <div key={index} className="class-tag">
                      <span>{className}</span>
                      <button
                        type="button"
                        onClick={() => handleRemoveClassName(className)}
                        className="remove-class-btn"
                      >
                        <FaTrash />
                      </button>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Submit Button */}
        <div className="form-actions">
          <button type="submit" className="submit-button" disabled={isLoading}>
            {isLoading ? (
              <>
                <FaSpinner className="spinning" />
                ƒêang t·∫°o k·∫ø ho·∫°ch...
              </>
            ) : (
              <>
                <FaPlusCircle />
                T·∫°o K·∫ø Ho·∫°ch
              </>
            )}
          </button>
        </div>
      </form>

      {/* Info Cards */}
      <div className="info-cards">
        <div className="info-card">
          <div className="card-icon">üìã</div>
          <div className="card-content">
            <h4>L∆∞u √Ω quan tr·ªçng</h4>
            <p>
              K·∫ø ho·∫°ch ti√™m ch·ªßng c·∫ßn ƒë∆∞·ª£c th√¥ng b√°o tr∆∞·ªõc cho ph·ª• huynh √≠t nh·∫•t
              7 ng√†y
            </p>
          </div>
        </div>

        <div className="info-card">
          <div className="card-icon">‚è∞</div>
          <div className="card-content">
            <h4>Th·ªùi gian th·ª±c hi·ªán</h4>
            <p>
              N√™n l√™n k·∫ø ho·∫°ch v√†o th·ªùi gian kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn vi·ªác h·ªçc c·ªßa
              h·ªçc sinh
            </p>
          </div>
        </div>

        <div className="info-card">
          <div className="card-icon">üë•</div>
          <div className="card-content">
            <h4>ƒê·ªëi t∆∞·ª£ng tham gia</h4>
            <p>
              Y t√° tr∆∞·ªùng, gi√°o vi√™n ch·ªß nhi·ªám v√† ƒë·∫°i di·ªán ph·ª• huynh c·∫ßn ph·ªëi
              h·ª£p
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CreateVaccinationPlan;

import React, { useState } from "react";
import {
  FaSyringe,
  FaCalendarAlt,
  FaFileAlt,
  FaCheck,
  FaTimes,
  FaSpinner,
  FaPlusCircle,
  FaHospital,
} from "react-icons/fa";
import vaccinationPlanService from "../../../../services/APIAdmin/vaccinationPlanService";
import "./CreateVaccinationPlan.css";

const CreateVaccinationPlan = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);
  const [showError, setShowError] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");

  // Form data v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh
  const [formData, setFormData] = useState({
    vaccineName: "",
    vaccinationDate: "",
    status: "PENDING",
    statusVietnamese: "Ch·ªù th·ª±c hi·ªán",
    description: "",
  });

  // Validate form
  const validateForm = () => {
    if (!formData.vaccineName.trim()) {
      setErrorMessage("Vui l√≤ng nh·∫≠p t√™n vaccine");
      return false;
    }
    if (!formData.vaccinationDate) {
      setErrorMessage("Vui l√≤ng ch·ªçn ng√†y ti√™m");
      return false;
    }
    if (!formData.description.trim()) {
      setErrorMessage("Vui l√≤ng nh·∫≠p m√¥ t·∫£");
      return false;
    }
    return true;
  };

  // X·ª≠ l√Ω submit form
  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!validateForm()) {
      setShowError(true);
      setTimeout(() => setShowError(false), 5000);
      return;
    }

    setIsLoading(true);
    setShowSuccess(false);
    setShowError(false);

    try {
      // T·∫°o data ƒë·ªÉ g·ª≠i API
      const planData = {
        ...formData,
        id: Date.now(), // T·∫°o ID t·∫°m th·ªùi
        createdAt: new Date().toISOString().split("T")[0],
        updatedAt: new Date().toISOString().split("T")[0],
      };

      console.log("üöÄ T·∫°o k·∫ø ho·∫°ch ti√™m ch·ªßng:", planData);

      const result = await vaccinationPlanService.createVaccinationPlan(
        planData
      );

      if (result.success) {
        setShowSuccess(true);
        // Reset form sau khi th√†nh c√¥ng
        setFormData({
          vaccineName: "",
          vaccinationDate: "",
          status: "PENDING",
          statusVietnamese: "Ch·ªù th·ª±c hi·ªán",
          description: "",
        });
        setTimeout(() => setShowSuccess(false), 5000);
      } else {
        throw new Error(result.message || "C√≥ l·ªói x·∫£y ra khi t·∫°o k·∫ø ho·∫°ch");
      }
    } catch (err) {
      console.error("‚ùå L·ªói t·∫°o k·∫ø ho·∫°ch:", err);
      setErrorMessage(err.message || "C√≥ l·ªói kh√¥ng mong mu·ªën x·∫£y ra");
      setShowError(true);
      setTimeout(() => setShowError(false), 5000);
    } finally {
      setIsLoading(false);
    }
  };

  // X·ª≠ l√Ω thay ƒë·ªïi input
  const handleInputChange = (field, value) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }));

    // Auto update statusVietnamese when status changes
    if (field === "status") {
      const statusMap = {
        PENDING: "Ch·ªù th·ª±c hi·ªán",
        ONGOING: "ƒêang di·ªÖn ra",
        COMPLETED: "ƒê√£ ho√†n th√†nh",
        CANCELLED: "ƒê√£ h·ªßy",
      };
      setFormData((prev) => ({
        ...prev,
        [field]: value,
        statusVietnamese: statusMap[value] || value,
      }));
    }
  };

  return (
    <div className="create-vaccination-plan">
      {/* Header */}
      <div className="form-header">
        <div className="header-icon">
          <FaHospital />
        </div>
        <div className="header-content">
          <h2>T·∫°o K·∫ø Ho·∫°ch Ti√™m Ch·ªßng M·ªõi</h2>
          <p>L·∫≠p k·∫ø ho·∫°ch ti√™m ch·ªßng cho h·ªçc sinh trong tr∆∞·ªùng</p>
        </div>
      </div>

      {/* Success Message */}
      {showSuccess && (
        <div className="notification success">
          <FaCheck className="notification-icon" />
          <div className="notification-content">
            <h4>Th√†nh c√¥ng!</h4>
            <p>K·∫ø ho·∫°ch ti√™m ch·ªßng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng</p>
          </div>
        </div>
      )}

      {/* Error Message */}
      {showError && (
        <div className="notification error">
          <FaTimes className="notification-icon" />
          <div className="notification-content">
            <h4>C√≥ l·ªói x·∫£y ra!</h4>
            <p>{errorMessage}</p>
          </div>
        </div>
      )}

      {/* Form */}
      <form onSubmit={handleSubmit} className="vaccination-form">
        <div className="form-section">
          <h3>
            <FaSyringe className="section-icon" />
            Th√¥ng Tin Vaccine
          </h3>

          <div className="form-grid">
            <div className="form-group">
              <label htmlFor="vaccineName">
                <FaSyringe className="label-icon" />
                T√™n Vaccine *
              </label>
              <input
                id="vaccineName"
                type="text"
                placeholder="V√≠ d·ª•: Covid-19, Hepatitis B, MMR..."
                value={formData.vaccineName}
                onChange={(e) =>
                  handleInputChange("vaccineName", e.target.value)
                }
                required
              />
            </div>

            <div className="form-group">
              <label htmlFor="vaccinationDate">
                <FaCalendarAlt className="label-icon" />
                Ng√†y Th·ª±c Hi·ªán *
              </label>
              <input
                id="vaccinationDate"
                type="date"
                value={formData.vaccinationDate}
                onChange={(e) =>
                  handleInputChange("vaccinationDate", e.target.value)
                }
                min={new Date().toISOString().split("T")[0]}
                required
              />
            </div>

            <div className="form-group">
              <label htmlFor="status">
                <FaCheck className="label-icon" />
                Tr·∫°ng Th√°i
              </label>
              <select
                id="status"
                value={formData.status}
                onChange={(e) => handleInputChange("status", e.target.value)}
              >
                <option value="PENDING">Ch·ªù th·ª±c hi·ªán</option>
                <option value="ONGOING">ƒêang di·ªÖn ra</option>
                <option value="COMPLETED">ƒê√£ ho√†n th√†nh</option>
                <option value="CANCELLED">ƒê√£ h·ªßy</option>
              </select>
            </div>
          </div>
        </div>

        <div className="form-section">
          <h3>
            <FaFileAlt className="section-icon" />
            M√¥ T·∫£ Chi Ti·∫øt
          </h3>

          <div className="form-group full-width">
            <label htmlFor="description">
              <FaFileAlt className="label-icon" />
              M√¥ T·∫£ K·∫ø Ho·∫°ch *
            </label>
            <textarea
              id="description"
              rows="6"
              placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ k·∫ø ho·∫°ch ti√™m ch·ªßng, ƒë·ªëi t∆∞·ª£ng, quy tr√¨nh, l∆∞u √Ω..."
              value={formData.description}
              onChange={(e) => handleInputChange("description", e.target.value)}
              required
            />
            <small className="helper-text">
              M√¥ t·∫£ chi ti·∫øt gi√∫p ph·ª• huynh v√† h·ªçc sinh hi·ªÉu r√µ h∆°n v·ªÅ k·∫ø ho·∫°ch
            </small>
          </div>
        </div>

        {/* Submit Button */}
        <div className="form-actions">
          <button type="submit" className="submit-button" disabled={isLoading}>
            {isLoading ? (
              <>
                <FaSpinner className="spinning" />
                ƒêang t·∫°o k·∫ø ho·∫°ch...
              </>
            ) : (
              <>
                <FaPlusCircle />
                T·∫°o K·∫ø Ho·∫°ch
              </>
            )}
          </button>
        </div>
      </form>

      {/* Info Cards */}
      <div className="info-cards">
        <div className="info-card">
          <div className="card-icon">üìã</div>
          <div className="card-content">
            <h4>L∆∞u √Ω quan tr·ªçng</h4>
            <p>
              K·∫ø ho·∫°ch ti√™m ch·ªßng c·∫ßn ƒë∆∞·ª£c th√¥ng b√°o tr∆∞·ªõc cho ph·ª• huynh √≠t nh·∫•t
              7 ng√†y
            </p>
          </div>
        </div>

        <div className="info-card">
          <div className="card-icon">‚è∞</div>
          <div className="card-content">
            <h4>Th·ªùi gian th·ª±c hi·ªán</h4>
            <p>
              N√™n l√™n k·∫ø ho·∫°ch v√†o th·ªùi gian kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn vi·ªác h·ªçc c·ªßa
              h·ªçc sinh
            </p>
          </div>
        </div>

        <div className="info-card">
          <div className="card-icon">üë•</div>
          <div className="card-content">
            <h4>ƒê·ªëi t∆∞·ª£ng tham gia</h4>
            <p>
              Y t√° tr∆∞·ªùng, gi√°o vi√™n ch·ªß nhi·ªám v√† ƒë·∫°i di·ªán ph·ª• huynh c·∫ßn ph·ªëi
              h·ª£p
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CreateVaccinationPlan;

import React, { useState } from "react";
import {
  FaHeartbeat,
  FaCalendarAlt,
  FaFileAlt,
  FaCheck,
  FaTimes,
  FaSpinner,
  FaPlusCircle,
  FaStethoscope,
} from "react-icons/fa";
import healthCampaignService from "../../../../services/APIAdmin/healthCampaignService";
import "./CreateHealthCampaign.css";

const CreateHealthCampaign = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);
  const [showError, setShowError] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");

  // Form data v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh
  const [formData, setFormData] = useState({
    title: "",
    startDate: "",
    status: "PREPARING",
    notes: "",
  });

  // Validate form
  const validateForm = () => {
    if (!formData.title.trim()) {
      setErrorMessage("Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ chi·∫øn d·ªãch");
      return false;
    }
    if (!formData.startDate) {
      setErrorMessage("Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu");
      return false;
    }
    if (!formData.notes.trim()) {
      setErrorMessage("Vui l√≤ng nh·∫≠p ghi ch√∫");
      return false;
    }
    return true;
  };

  // X·ª≠ l√Ω submit form
  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!validateForm()) {
      setShowError(true);
      setTimeout(() => setShowError(false), 5000);
      return;
    }

    setIsLoading(true);
    setShowSuccess(false);
    setShowError(false);

    try {
      console.log("üöÄ T·∫°o chi·∫øn d·ªãch ki·ªÉm tra s·ª©c kh·ªèe:", formData);

      const result = await healthCampaignService.createHealthCampaign(formData);

      if (result.success) {
        setShowSuccess(true);
        // Reset form sau khi th√†nh c√¥ng
        setFormData({
          title: "",
          startDate: "",
          status: "PREPARING",
          notes: "",
        });
        setTimeout(() => setShowSuccess(false), 5000);
      } else {
        throw new Error(result.message || "C√≥ l·ªói x·∫£y ra khi t·∫°o chi·∫øn d·ªãch");
      }
    } catch (err) {
      console.error("‚ùå L·ªói t·∫°o chi·∫øn d·ªãch:", err);
      setErrorMessage(err.message || "C√≥ l·ªói kh√¥ng mong mu·ªën x·∫£y ra");
      setShowError(true);
      setTimeout(() => setShowError(false), 5000);
    } finally {
      setIsLoading(false);
    }
  };

  // X·ª≠ l√Ω thay ƒë·ªïi input
  const handleInputChange = (field, value) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  return (
    <div className="create-health-campaign">
      {/* Header */}
      <div className="form-header">
        <div className="header-icon">
          <FaStethoscope />
        </div>
        <div className="header-content">
          <h2>T·∫°o Chi·∫øn D·ªãch Ki·ªÉm Tra S·ª©c Kh·ªèe M·ªõi</h2>
          <p>L·∫≠p k·∫ø ho·∫°ch ki·ªÉm tra s·ª©c kh·ªèe ƒë·ªãnh k·ª≥ cho h·ªçc sinh</p>
        </div>
      </div>

      {/* Success Message */}
      {showSuccess && (
        <div className="notification success">
          <FaCheck className="notification-icon" />
          <div className="notification-content">
            <h4>Th√†nh c√¥ng!</h4>
            <p>Chi·∫øn d·ªãch ki·ªÉm tra s·ª©c kh·ªèe ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng</p>
          </div>
        </div>
      )}

      {/* Error Message */}
      {showError && (
        <div className="notification error">
          <FaTimes className="notification-icon" />
          <div className="notification-content">
            <h4>C√≥ l·ªói x·∫£y ra!</h4>
            <p>{errorMessage}</p>
          </div>
        </div>
      )}

      {/* Form */}
      <form onSubmit={handleSubmit} className="campaign-form">
        <div className="form-section">
          <h3>
            <FaHeartbeat className="section-icon" />
            Th√¥ng Tin Chi·∫øn D·ªãch
          </h3>

          <div className="form-grid">
            <div className="form-group">
              <label htmlFor="title">
                <FaHeartbeat className="label-icon" />
                Ti√™u ƒê·ªÅ Chi·∫øn D·ªãch *
              </label>
              <input
                id="title"
                type="text"
                placeholder="V√≠ d·ª•: Kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥, Ph√≤ng ch·ªëng s·ªët xu·∫•t huy·∫øt..."
                value={formData.title}
                onChange={(e) => handleInputChange("title", e.target.value)}
                required
              />
            </div>

            <div className="form-group">
              <label htmlFor="startDate">
                <FaCalendarAlt className="label-icon" />
                Ng√†y B·∫Øt ƒê·∫ßu *
              </label>
              <input
                id="startDate"
                type="date"
                value={formData.startDate}
                onChange={(e) => handleInputChange("startDate", e.target.value)}
                min={new Date().toISOString().split("T")[0]}
                required
              />
            </div>

            <div className="form-group">
              <label htmlFor="status">
                <FaCheck className="label-icon" />
                Tr·∫°ng Th√°i
              </label>
              <select
                id="status"
                value={formData.status}
                onChange={(e) => handleInputChange("status", e.target.value)}
              >
                <option value="PREPARING">ƒêang chu·∫©n b·ªã</option>
                <option value="ONGOING">ƒêang th·ª±c hi·ªán</option>
                <option value="COMPLETED">ƒê√£ ho√†n th√†nh</option>
                <option value="CANCELLED">ƒê√£ h·ªßy</option>
              </select>
            </div>
          </div>
        </div>

        <div className="form-section">
          <h3>
            <FaFileAlt className="section-icon" />
            Ghi Ch√∫ Chi Ti·∫øt
          </h3>

          <div className="form-group full-width">
            <label htmlFor="notes">
              <FaFileAlt className="label-icon" />
              Ghi Ch√∫ Chi·∫øn D·ªãch *
            </label>
            <textarea
              id="notes"
              rows="6"
              placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ chi·∫øn d·ªãch, ƒë·ªëi t∆∞·ª£ng tham gia, quy tr√¨nh th·ª±c hi·ªán, l∆∞u √Ω ƒë·∫∑c bi·ªát..."
              value={formData.notes}
              onChange={(e) => handleInputChange("notes", e.target.value)}
              required
            />
            <small className="helper-text">
              Ghi ch√∫ chi ti·∫øt gi√∫p c√°c b√™n li√™n quan hi·ªÉu r√µ h∆°n v·ªÅ chi·∫øn d·ªãch
            </small>
          </div>
        </div>

        {/* Submit Button */}
        <div className="form-actions">
          <button type="submit" className="submit-button" disabled={isLoading}>
            {isLoading ? (
              <>
                <FaSpinner className="spinning" />
                ƒêang t·∫°o chi·∫øn d·ªãch...
              </>
            ) : (
              <>
                <FaPlusCircle />
                T·∫°o Chi·∫øn D·ªãch
              </>
            )}
          </button>
        </div>
      </form>

      {/* Info Cards */}
      <div className="info-cards">
        <div className="info-card">
          <div className="card-icon">ü©∫</div>
          <div className="card-content">
            <h4>Quy tr√¨nh chu·∫©n</h4>
            <p>
              T·∫•t c·∫£ chi·∫øn d·ªãch c·∫ßn tu√¢n th·ªß quy tr√¨nh ki·ªÉm tra s·ª©c kh·ªèe theo
              quy ƒë·ªãnh c·ªßa B·ªô Y t·∫ø
            </p>
          </div>
        </div>

        <div className="info-card">
          <div className="card-icon">üìÖ</div>
          <div className="card-content">
            <h4>L·∫≠p k·∫ø ho·∫°ch</h4>
            <p>
              N√™n l·∫≠p k·∫ø ho·∫°ch tr∆∞·ªõc √≠t nh·∫•t 2 tu·∫ßn ƒë·ªÉ chu·∫©n b·ªã ƒë·∫ßy ƒë·ªß nh√¢n l·ª±c
              v√† trang thi·∫øt b·ªã
            </p>
          </div>
        </div>

        <div className="info-card">
          <div className="card-icon">üë®‚Äç‚öïÔ∏è</div>
          <div className="card-content">
            <h4>ƒê·ªôi ng≈© th·ª±c hi·ªán</h4>
            <p>
              B√°c sƒ©, y t√° v√† c√°c chuy√™n gia y t·∫ø c·∫ßn c√≥ ƒë·ªß chuy√™n m√¥n v√† kinh
              nghi·ªám
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CreateHealthCampaign;

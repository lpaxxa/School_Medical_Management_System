import React, { useState } from "react";
import {
  FaUser,
  FaIdCard,
  FaSchool,
  FaGraduationCap,
  FaEye,
  FaTrashAlt,
  FaSearch,
  FaArrowLeft,
  FaUsers,
  FaChild,
  FaVenusMars,
} from "react-icons/fa";
import "./StudentListView.css";
import BackButton from "./BackButton";
import ReportHeader from "./ReportHeader";
import ErrorModal from "../../../components/ErrorModal";
import ConfirmModal from "../../../components/ConfirmModal";
import SuccessModal from "../../../components/SuccessModal";
import { useErrorModal } from "../../../hooks/useErrorModal";
import { useConfirmModal } from "../../../hooks/useConfirmModal";
import { useSuccessModal } from "../../../hooks/useSuccessModal";

const StudentListView = ({
  students,
  isLoading,
  onViewDetail,
  onBack,
  onStudentDeleted,
}) => {
  const [searchTerm, setSearchTerm] = useState("");

  // Modal hooks
  const {
    isOpen: isErrorOpen,
    modalData: errorData,
    showError,
    hideError,
  } = useErrorModal();

  const {
    isOpen: isConfirmOpen,
    modalData: confirmData,
    showConfirm,
    hideConfirm,
  } = useConfirmModal();

  const {
    isOpen: isSuccessOpen,
    modalData: successData,
    showSuccess,
    hideSuccess,
  } = useSuccessModal();

  // Helper function to normalize gender display
  const normalizeGender = (gender) => {
    if (!gender) return "Kh√¥ng x√°c ƒë·ªãnh";
    const genderLower = gender.toLowerCase();
    if (genderLower === "male" || genderLower === "nam") return "Nam";
    if (
      genderLower === "female" ||
      genderLower === "n·ªØ" ||
      genderLower === "nu"
    )
      return "N·ªØ";
    return gender; // Return original if not recognized
  };

  // Helper function to get gender class
  const getGenderClass = (gender) => {
    const normalized = normalizeGender(gender);
    return normalized === "Nam" ? "male" : "female";
  };

  // Delete student function
  const handleDeleteStudent = async (student) => {
    // Validate student object
    if (!student || !student.id) {
      console.error("‚ùå Invalid student object:", student);
      showError(
        "L·ªói d·ªØ li·ªáu",
        "Th√¥ng tin h·ªçc sinh kh√¥ng h·ª£p l·ªá.",
        "Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c t·∫£i l·∫°i trang."
      );
      return;
    }

    console.log("üîî Showing confirm modal for student:", student.fullName);
    showConfirm(
      "X√°c nh·∫≠n x√≥a h·ªçc sinh",
      `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a h·ªçc sinh "${
        student.fullName || "N/A"
      }"?\n\nThao t√°c n√†y kh√¥ng th·ªÉ ho√†n t√°c.`,
      async () => {
        console.log("‚úÖ User confirmed deletion, proceeding...");
        try {
          console.log("üóëÔ∏è Attempting to delete student:", {
            id: student.id,
            name: student.fullName,
            studentId: student.studentId,
          });
          const token = localStorage.getItem("authToken");
          if (!token) {
            showError(
              "Ch∆∞a ƒëƒÉng nh·∫≠p",
              "Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n.",
              "Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ ti·∫øp t·ª•c."
            );
            return;
          }

          // Get backend URL safely
          const backendUrl =
            import.meta.env.VITE_BACKEND_URL || "http://localhost:8080";
          const deleteUrl = `${backendUrl}/api/v1/students/${student.id}`;
          console.log("üåê Backend URL:", backendUrl);
          console.log("üåê Delete URL:", deleteUrl);

          // Create AbortController for timeout
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout

          const response = await fetch(deleteUrl, {
            method: "DELETE",
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
            signal: controller.signal,
          });

          clearTimeout(timeoutId);

          console.log("üì° Delete response status:", response.status);
          console.log("üì° Delete response ok:", response.ok);

          if (!response.ok) {
            // Try to get error details from response
            let errorDetails = "";
            try {
              const errorData = await response.text();
              console.log("‚ùå Error response body:", errorData);
              errorDetails = errorData;
            } catch (e) {
              console.log("‚ùå Could not read error response");
            }

            if (response.status === 401) {
              showError(
                "Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n",
                "Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n.",
                "Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ ti·∫øp t·ª•c."
              );
            } else if (response.status === 403) {
              showError(
                "Kh√¥ng c√≥ quy·ªÅn",
                "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a h·ªçc sinh.",
                "Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n."
              );
            } else {
              showError(
                "L·ªói x√≥a h·ªçc sinh",
                `Kh√¥ng th·ªÉ x√≥a h·ªçc sinh (${response.status})`,
                errorDetails || "Vui l√≤ng th·ª≠ l·∫°i sau."
              );
            }
            return;
          }

          // Try to get success response data
          let responseData = null;
          try {
            responseData = await response.text();
            console.log("‚úÖ Success response data:", responseData);
          } catch (e) {
            console.log("‚úÖ No response data to read");
          }

          console.log("‚úÖ Student deleted successfully");

          showSuccess(
            "X√≥a h·ªçc sinh th√†nh c√¥ng!",
            "H·ªçc sinh ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi h·ªá th·ªëng.",
            `H·ªçc sinh "${student.fullName}" (${student.studentId}) ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.`
          );

          // Notify parent component to refresh data
          console.log("üîÑ Calling onStudentDeleted with ID:", student.id);
          if (onStudentDeleted) {
            onStudentDeleted(student.id);
          } else {
            console.warn("‚ö†Ô∏è onStudentDeleted callback not provided");
          }
        } catch (error) {
          console.error("Error deleting student:", error);

          let errorTitle = "L·ªói x√≥a h·ªçc sinh";
          let errorMessage = "C√≥ l·ªói x·∫£y ra khi x√≥a h·ªçc sinh.";
          let errorDetails = error.message;

          if (error.name === "AbortError") {
            errorTitle = "Timeout";
            errorMessage = "Y√™u c·∫ßu x√≥a h·ªçc sinh b·ªã timeout.";
            errorDetails = "Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.";
          } else if (error.message.includes("fetch")) {
            errorTitle = "L·ªói k·∫øt n·ªëi";
            errorMessage = "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server.";
            errorDetails =
              "Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† ƒë·∫£m b·∫£o server ƒëang ch·∫°y.";
          }

          showError(errorTitle, errorMessage, errorDetails);
        }
      },
      {
        type: "danger",
        confirmText: "X√°c nh·∫≠n",
        cancelText: "H·ªßy",
      }
    );
  };

  // X·ª≠ l√Ω m√†n h√¨nh loading
  if (isLoading) {
    return (
      <div className="reports-student-list-container theme-teal">
        <div className="reports-student-list-loading">
          <div className="reports-student-loading-spinner"></div>
          <div className="reports-student-loading-text">
            ƒêang t·∫£i danh s√°ch h·ªçc sinh...
          </div>
          <div className="reports-student-loading-subtext">
            Vui l√≤ng ch·ªù trong gi√¢y l√°t
          </div>
        </div>
      </div>
    );
  }

  // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p kh√¥ng c√≥ d·ªØ li·ªáu
  if (!students || students.length === 0) {
    return (
      <div className="reports-student-list-container theme-teal">
        <ReportHeader
          title="Qu·∫£n l√Ω h·ªçc sinh"
          subtitle="Th·ªëng k√™ h·ªçc sinh"
          icon="fas fa-user-graduate"
          onBack={onBack}
          colorTheme="teal"
        />
        <div className="reports-student-list-empty">
          <FaUsers size={48} color="#ccc" />
          <h3>Kh√¥ng c√≥ d·ªØ li·ªáu h·ªçc sinh</h3>
          <p>Ch∆∞a c√≥ h·ªçc sinh n√†o ƒë∆∞·ª£c th√™m v√†o h·ªá th·ªëng</p>
        </div>
      </div>
    );
  }

  // T√≠nh to√°n th·ªëng k√™
  const genderStats = students.reduce(
    (acc, student) => {
      const normalizedGender = normalizeGender(student.gender);
      if (normalizedGender === "Nam") acc.male++;
      else if (normalizedGender === "N·ªØ") acc.female++;
      return acc;
    },
    { male: 0, female: 0 }
  );

  // L·∫•y danh s√°ch l·ªõp duy nh·∫•t
  const classes = [
    ...new Set(students.map((s) => s.className).filter(Boolean)),
  ];

  // L·ªçc h·ªçc sinh theo t√¨m ki·∫øm
  const filteredStudents = students.filter((student) => {
    const matchesSearch =
      searchTerm === "" ||
      student.fullName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      student.studentId?.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesSearch;
  });

  return (
    <div className="reports-student-list-container theme-teal">
      {/* Header Section */}
      <ReportHeader
        title="Qu·∫£n l√Ω h·ªçc sinh"
        subtitle="Th·ªëng k√™ h·ªçc sinh"
        icon="fas fa-user-graduate"
        onBack={onBack}
        colorTheme="teal"
      />

      {/* Stats Section */}
      <div className="reports-student-stats-section">
        <div className="reports-student-stat-item">
          <div className="reports-student-stat-icon">
            <FaUsers />
          </div>
          <div className="reports-student-stat-content">
            <div className="reports-student-stat-number">{students.length}</div>
            <div className="reports-student-stat-label">T·ªïng s·ªë h·ªçc sinh</div>
          </div>
        </div>

        <div className="reports-student-stat-item">
          <div className="reports-student-stat-icon">
            <FaChild />
          </div>
          <div className="reports-student-stat-content">
            <div className="reports-student-stat-number">
              {genderStats.male}
            </div>
            <div className="reports-student-stat-label">H·ªçc sinh nam</div>
          </div>
        </div>

        <div className="reports-student-stat-item">
          <div className="reports-student-stat-icon">
            <FaVenusMars />
          </div>
          <div className="reports-student-stat-content">
            <div className="reports-student-stat-number">
              {genderStats.female}
            </div>
            <div className="reports-student-stat-label">H·ªçc sinh n·ªØ</div>
          </div>
        </div>

        <div className="reports-student-stat-item">
          <div className="reports-student-stat-icon">
            <FaSchool />
          </div>
          <div className="reports-student-stat-content">
            <div className="reports-student-stat-number">{classes.length}</div>
            <div className="reports-student-stat-label">L·ªõp h·ªçc</div>
          </div>
        </div>
      </div>

      {/* Controls Section */}
      <div className="reports-student-list-controls-section">
        <div className="reports-student-list-controls">
          <div className="reports-student-search-section">
            <div className="reports-student-search">
              <FaSearch />
              <input
                type="text"
                placeholder="T√¨m ki·∫øm h·ªçc sinh..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
          </div>
          <div className="reports-student-stats-section-controls">
            <div className="reports-student-count">
              <FaUsers /> Danh s√°ch h·ªçc sinh ({filteredStudents.length} h·ªçc
              sinh)
            </div>
          </div>
        </div>
      </div>

      {/* Student Table */}
      <div className="reports-student-list-section">
        {filteredStudents.length === 0 ? (
          <div className="reports-student-list-empty">
            <FaSearch size={48} color="#ccc" />
            <h3>Kh√¥ng t√¨m th·∫•y h·ªçc sinh</h3>
            <p>Th·ª≠ thay ƒë·ªïi t·ª´ kh√≥a t√¨m ki·∫øm</p>
          </div>
        ) : (
          <div className="reports-student-table-container">
            <table className="reports-student-table">
              <thead>
                <tr>
                  <th>STT</th>
                  <th>M√£ h·ªçc sinh</th>
                  <th>H·ªç v√† t√™n</th>
                  <th>L·ªõp h·ªçc</th>
                  <th>Kh·ªëi l·ªõp</th>
                  <th>Gi·ªõi t√≠nh</th>
                  <th>H√†nh ƒë·ªông</th>
                </tr>
              </thead>
              <tbody>
                {filteredStudents.map((student, index) => (
                  <tr key={student.id} className="reports-student-table-row">
                    <td className="reports-student-table-stt">{index + 1}</td>
                    <td className="reports-student-table-id">
                      <span className="reports-student-id-badge">
                        {student.studentId}
                      </span>
                    </td>
                    <td className="reports-student-table-name">
                      <div className="reports-student-name-info">
                        <FaUser className="reports-student-table-icon" />
                        <span className="reports-student-name">
                          {student.fullName}
                        </span>
                      </div>
                    </td>
                    <td className="reports-student-table-class">
                      <span className="reports-student-class-badge">
                        {student.className}
                      </span>
                    </td>
                    <td className="reports-student-table-grade">
                      <span className="reports-student-grade-badge">
                        {student.gradeLevel}
                      </span>
                    </td>
                    <td className="reports-student-table-gender">
                      <span
                        className={`reports-student-gender-badge ${getGenderClass(
                          student.gender
                        )}`}
                      >
                        {normalizeGender(student.gender)}
                      </span>
                    </td>
                    <td className="reports-student-table-actions">
                      <div className="reports-student-action-buttons">
                        <button
                          className="reports-student-action-btn reports-student-view-btn"
                          onClick={() => onViewDetail(student)}
                          title="Xem chi ti·∫øt"
                        >
                          <FaEye />
                        </button>
                        <button
                          className="reports-student-action-btn reports-student-delete-btn"
                          onClick={() => {
                            console.log(
                              "üñ±Ô∏è Delete button clicked for student:",
                              student
                            );
                            handleDeleteStudent(student);
                          }}
                          title="X√≥a h·ªçc sinh"
                        >
                          <FaTrashAlt />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Modal Components */}
      <ErrorModal
        isOpen={isErrorOpen}
        onClose={hideError}
        title={errorData.title}
        message={errorData.message}
        details={errorData.details}
      />

      <ConfirmModal
        isOpen={isConfirmOpen}
        onClose={hideConfirm}
        onConfirm={confirmData.onConfirm}
        title={confirmData.title}
        message={confirmData.message}
        type={confirmData.type}
      />

      <SuccessModal
        isOpen={isSuccessOpen}
        onClose={hideSuccess}
        title={successData.title}
        message={successData.message}
        details={successData.details}
      />
    </div>
  );
};

export default StudentListView;

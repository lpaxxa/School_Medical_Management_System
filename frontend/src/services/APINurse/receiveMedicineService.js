// Service API cho qu·∫£n l√Ω thu·ªëc t·ª´ ph·ª• huynh
import api from './../api.js';

// URL c∆° s·ªü cho t·∫•t c·∫£ API g·ªçi
const BASE_URL = "http://localhost:8080/api/v1/nurse-medication-approvals";

// L∆∞u tr·ªØ mock data cho c√°c ch·ª©c nƒÉng ch∆∞a c√≥ API
const mockMedicineRequests = [
  {
    id: 1,
    studentId: 'HS001',
    studentName: 'Nguy·ªÖn VƒÉn A',
    requestedBy: 'Nguy·ªÖn Th·ªã B (Ph·ª• huynh)',
    startDate: '2025-06-18',
    endDate: '2025-06-25',
    status: 0, // 0: ch·ªù ph√™ duy·ªát, 1: ƒë√£ duy·ªát, 2: t·ª´ ch·ªëi, 3: ƒë√£ h·ªßy
    notes: 'Thu·ªëc h·∫° s·ªët Paracetamol, 3 l·∫ßn/ng√†y sau b·ªØa ƒÉn',
    class: '10A1',
    medicationDetails: [
      { name: 'Paracetamol', dosage: '500mg', frequency: '3 l·∫ßn/ng√†y', time: 'Sau ƒÉn' }
    ],
    reason: 'Tr·∫ª c√≥ d·∫•u hi·ªáu s·ªët nh·∫π'
  },
  {
    id: 2,
    studentId: 'HS002',
    studentName: 'Tr·∫ßn Th·ªã C',
    requestedBy: 'Tr·∫ßn VƒÉn D (Ph·ª• huynh)',
    startDate: '2025-06-17',
    endDate: '2025-06-24',
    status: 1,
    notes: 'Thu·ªëc kh√°ng sinh theo ƒë∆°n c·ªßa b√°c sƒ©',
    class: '11B2',
    medicationDetails: [
      { name: 'Amoxicillin', dosage: '250mg', frequency: '2 l·∫ßn/ng√†y', time: 'S√°ng - T·ªëi' }
    ],
    reason: 'ƒêang ƒëi·ªÅu tr·ªã vi√™m h·ªçng'
  },
  {
    id: 3,
    studentId: 'HS003',
    studentName: 'L√™ VƒÉn E',
    requestedBy: 'L√™ Th·ªã F (Ph·ª• huynh)',
    startDate: '2025-06-19',
    endDate: '2025-07-03',
    status: 0,
    notes: 'Vitamin t·ªïng h·ª£p ƒë·ªÉ tƒÉng c∆∞·ªùng s·ª©c ƒë·ªÅ kh√°ng',
    class: '9A3',
    medicationDetails: [
      { name: 'Vitamin C', dosage: '500mg', frequency: '1 l·∫ßn/ng√†y', time: 'Sau ƒÉn s√°ng' },
      { name: 'Vitamin D', dosage: '400 IU', frequency: '1 l·∫ßn/ng√†y', time: 'Sau ƒÉn tr∆∞a' }
    ],
    reason: 'TƒÉng c∆∞·ªùng s·ª©c ƒë·ªÅ kh√°ng trong m√πa thi'
  },
  {
    id: 4,
    studentId: 'HS004',
    studentName: 'Ph·∫°m Th·ªã G',
    requestedBy: 'Ph·∫°m VƒÉn H (Ph·ª• huynh)',
    startDate: '2025-06-15',
    endDate: '2025-06-20',
    status: 2,
    notes: 'Thu·ªëc ch·ªëng d·ªã ·ª©ng, c·∫ßn u·ªëng sau b·ªØa s√°ng',
    class: '10A2',
    medicationDetails: [
      { name: 'Loratadine', dosage: '10mg', frequency: '1 l·∫ßn/ng√†y', time: 'Sau ƒÉn s√°ng' }
    ],
    reason: 'D·ªã ·ª©ng ph·∫•n hoa m√πa h√®',
    rejectionReason: 'C·∫ßn b·ªï sung th√™m ƒë∆°n thu·ªëc t·ª´ b√°c sƒ©'
  },
  {
    id: 5,
    studentId: 'HS005',
    studentName: 'Ho√†ng VƒÉn I',
    requestedBy: 'Ho√†ng Th·ªã K (Ph·ª• huynh)',
    startDate: '2025-06-16',
    endDate: '2025-06-30',
    status: 1,
    notes: 'Thu·ªëc ƒëi·ªÅu tr·ªã hen suy·ªÖn, c·∫ßn s·ª≠ d·ª•ng khi c√≥ d·∫•u hi·ªáu kh√≥ th·ªü',
    class: '12A1',
    medicationDetails: [
      { name: 'Ventolin', dosage: '2 nh√°t', frequency: 'Khi c·∫ßn', time: 'Khi c√≥ tri·ªáu ch·ª©ng' }
    ],
    reason: 'H·ªçc sinh b·ªã hen suy·ªÖn, c·∫ßn thu·ªëc d·ª± ph√≤ng'
  },
  {
    id: 6,
    studentId: 'HS006',
    studentName: 'ƒê·∫∑ng VƒÉn L',
    requestedBy: 'ƒê·∫∑ng Th·ªã M (Ph·ª• huynh)',
    startDate: '2025-06-20',
    endDate: '2025-06-27',
    status: 0,
    notes: 'Thu·ªëc kh√°ng histamine ƒëi·ªÅu tr·ªã vi√™m m≈©i d·ªã ·ª©ng',
    class: '11A3',
    medicationDetails: [
      { name: 'Cetirizine', dosage: '10mg', frequency: '1 l·∫ßn/ng√†y', time: 'Tr∆∞·ªõc khi ƒëi ng·ªß' }
    ],
    reason: 'Vi√™m m≈©i d·ªã ·ª©ng theo m√πa'
  },
  {
    id: 7,
    studentId: 'HS007',
    studentName: 'V≈© Th·ªã N',
    requestedBy: 'V≈© VƒÉn P (Ph·ª• huynh)',
    startDate: '2025-06-14',
    endDate: '2025-06-21',
    status: 3,
    notes: 'Thu·ªëc gi·∫£m ƒëau cho ƒëau b·ª•ng kinh',
    class: '11A1',
    medicationDetails: [
      { name: 'Ibuprofen', dosage: '400mg', frequency: 'Khi c·∫ßn', time: 'Khi ƒëau' }
    ],
    reason: 'ƒêau b·ª•ng kinh'
  },
  {
    id: 8,
    studentId: 'HS008',
    studentName: 'Ng√¥ VƒÉn Q',
    requestedBy: 'Ng√¥ Th·ªã R (Ph·ª• huynh)',
    startDate: '2025-06-19',
    endDate: '2025-06-26',
    status: 0,
    notes: 'Probiotics ƒë·ªÉ c·∫£i thi·ªán h·ªá ti√™u h√≥a',
    class: '10B2',
    medicationDetails: [
      { name: 'Probiotics', dosage: '1 g√≥i', frequency: '2 l·∫ßn/ng√†y', time: 'Sau ƒÉn s√°ng v√† t·ªëi' }
    ],
    reason: 'ƒêang ƒëi·ªÅu tr·ªã r·ªëi lo·∫°n ti√™u h√≥a'
  }
];
// Mock data cho l·ªãch s·ª≠ d√πng thu·ªëc - Updated to match API format
const mockMedicationAdministrations = [
  {
    id: 1,
    medicationInstructionId: 1,
    medicationName: "Paracetamol 500mg",
    studentName: "Nguy·ªÖn Minh An",
    administeredAt: "2024-03-09T08:00:00",
    administeredBy: "Nguy·ªÖn Th·ªã Lan Anh",
    administrationStatus: "SUCCESSFUL",
    notes: "ƒê√£ cho u·ªëng 1 vi√™n khi s·ªët 38.7¬∞C",
    confirmationImageUrl: "https://schoolmed.com/images/admin-001.jpg"
  },
  {
    id: 2,
    medicationInstructionId: 2,
    medicationName: "Ventolin Inhaler",
    studentName: "Nguy·ªÖn Minh Tu·∫•n",
    administeredAt: "2024-12-30T10:00:00",
    administeredBy: "Nguy·ªÖn Th·ªã Lan Anh",
    administrationStatus: "SUCCESSFUL",
    notes: "ƒê√£ x·ªãt 2 nh√°t khi h·ªçc sinh kh√≥ th·ªü.",
    confirmationImageUrl: "https://schoolmed.com/images/admin-002.jpg"
  },
  {
    id: 3,
    medicationInstructionId: 3,
    medicationName: "Amoxicillin 500mg",
    studentName: "L√™ B·∫£o Ng·ªçc",
    administeredAt: "2024-03-10T07:30:00",
    administeredBy: "Nguy·ªÖn Th·ªã Lan Anh",
    administrationStatus: "SUCCESSFUL",
    notes: "Cho u·ªëng 1 vi√™n s√°ng v√† 1 vi√™n t·ªëi.",
    confirmationImageUrl: "https://schoolmed.com/images/admin-003.jpg"
  },
  {
    id: 4,
    medicationInstructionId: 4,
    medicationName: "Vitamin C 500mg",
    studentName: "L√™ B·∫£o Minh",
    administeredAt: "2024-04-02T08:00:00",
    administeredBy: "Nguy·ªÖn Th·ªã Lan Anh",
    administrationStatus: "SUCCESSFUL",
    notes: "U·ªëng 1 vi√™n v√†o bu·ªïi s√°ng nh∆∞ ch·ªâ ƒë·ªãnh.",
    confirmationImageUrl: "https://schoolmed.com/images/admin-004.jpg"
  },
  {
    id: 5,
    medicationInstructionId: 5,
    medicationName: "ORS (Oresol)",
    studentName: "Ph·∫°m Minh Th∆∞",
    administeredAt: "2024-03-18T11:45:00",
    administeredBy: "Nguy·ªÖn Th·ªã Lan Anh",
    administrationStatus: "SUCCESSFUL",
    notes: "H·ªçc sinh u·ªëng 1 g√≥i Oresol pha lo√£ng v·ªõi 200ml n∆∞·ªõc.",
    confirmationImageUrl: "https://schoolmed.com/images/admin-005.jpg"
  },
  {
    id: 6,
    medicationInstructionId: 106,
    medicationName: "Cetirizine",
    studentName: "ƒê·∫∑ng VƒÉn F",
    administeredAt: "2025-06-24T08:45:00",
    administeredBy: "Y t√° Ng·ªçc",
    administrationStatus: "REFUSED",
    notes: "H·ªçc sinh t·ª´ ch·ªëi u·ªëng thu·ªëc"
  },
  {
    id: 7,
    medicationInstructionId: 107,
    medicationName: "Ibuprofen",
    studentName: "Ph·∫°m Th·ªã Mai",
    administeredAt: "2025-06-24T09:30:00",
    administeredBy: "Y t√° Lan",
    administrationStatus: "PARTIAL",
    notes: "H·ªçc sinh ch·ªâ u·ªëng m·ªôt ph·∫ßn thu·ªëc"
  }
];

// Thay th·∫ø h√†m checkAuthToken hi·ªán t·∫°i
const checkAuthToken = () => {
  const token = localStorage.getItem('authToken');
  if (token) {
    console.log(`Token exists: ${token.substring(0, 15)}...`);
    
    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng JWT
    const parts = token.split('.');
    if (parts.length !== 3) {
      console.warn('Token kh√¥ng c√≥ ƒë·ªãnh d·∫°ng JWT h·ª£p l·ªá!');
      return false;
    }
    
    // Ki·ªÉm tra th·ªùi h·∫°n token
    try {
      const payload = JSON.parse(atob(parts[1]));
      const expiration = payload.exp * 1000; // Chuy·ªÉn ƒë·ªïi t·ª´ gi√¢y sang mili gi√¢y
      const now = Date.now();
      
      if (expiration < now) {
        console.warn('Token ƒë√£ h·∫øt h·∫°n!');
        return false;
      }
      
      console.log('Token h·ª£p l·ªá v√† ch∆∞a h·∫øt h·∫°n.');
      return true;
    } catch (err) {
      console.warn('Kh√¥ng th·ªÉ gi·∫£i m√£ JWT payload:', err);
      return false;
    }
  } else {
    console.warn('No authentication token found in localStorage');
    return false;
  }
};

// G·ªçi h√†m ƒë·ªÉ ki·ªÉm tra
const tokenValid = checkAuthToken();
console.log('Token valid:', tokenValid);

const receiveMedicineService = {
  // Test server connectivity - Function ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi server
  testServerConnection: async () => {
    try {
      console.log('üîç Testing server connection...');
      console.log('üîç API Service 1 Base URL:', apiService1.defaults.baseURL);
      
      // Test with a simple GET request to a known endpoint
      const response = await apiService1.get('/recent?page=1&size=1');
      console.log('‚úÖ Server connection successful:', response.status);
      return {
        success: true,
        message: "Server connection successful",
        status: response.status
      };
    } catch (error) {
      console.error('‚ùå Server connection failed:', error);
      return {
        success: false,
        message: "Server connection failed",
        error: error.message,
        status: error.response?.status
      };
    }
  },

  // API th·∫≠t ƒë·ªÉ l·∫•y t·∫•t c·∫£ y√™u c·∫ßu thu·ªëc
  getAllMedicineRequests: async () => {
    try {
      try {
        // S·ª≠ d·ª•ng axios thay v√¨ fetch ƒë·ªÉ c√≥ headers v√† interceptors t·ª± ƒë·ªông
        const response = await api.get('/nurse-medication-approvals/all-requests');
        
        console.log('API getAllMedicineRequests response:', response.data);
        
        if (!response.data) {
          throw new Error('Kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ API');
        }
        
        return response.data;
      } catch (apiError) {
        console.error("API call failed, fallback to mock data:", apiError);
        // Log chi ti·∫øt h∆°n v·ªÅ l·ªói API ƒë·ªÉ debug
        if (apiError.response) {
          // Server tr·∫£ v·ªÅ l·ªói
          console.error('Error response:', {
            status: apiError.response.status,
            headers: apiError.response.headers,
            data: apiError.response.data
          });
        } else if (apiError.request) {
          // Request ƒë∆∞·ª£c g·ª≠i nh∆∞ng kh√¥ng nh·∫≠n ƒë∆∞·ª£c response
          console.error('Error request:', apiError.request);
        } else {
          // L·ªói kh√°c khi c√†i ƒë·∫∑t request
          console.error('Error message:', apiError.message);
        }
        
        // Fallback to mock data
        return [...mockMedicineRequests];
      }
    } catch (error) {
      console.error("Error in getAllMedicineRequests:", error);
      // Lu√¥n tr·∫£ v·ªÅ mock data ƒë·ªÉ tr√°nh l·ªói
      return [...mockMedicineRequests];
    }
  },

  // TODO: Ch·ªù API - T√¨m ki·∫øm thu·ªëc theo t√™n
  searchMedicationByName: async (searchTerm) => {
    console.log("TODO: Implement real API - Searching medication by name:", searchTerm);
    
    // D·ªØ li·ªáu m·∫´u cho c√°c m·ª•c thu·ªëc
    const mockMedicationItems = [
      { id: 1, name: "Paracetamol", dosage: "500mg", quantity: 120, expiryDate: "2026-05-20" },
      { id: 2, name: "Amoxicillin", dosage: "250mg", quantity: 60, expiryDate: "2026-03-15" },
      { id: 3, name: "Cetirizine", dosage: "10mg", quantity: 90, expiryDate: "2026-10-10" },
      { id: 4, name: "Vitamin C", dosage: "500mg", quantity: 200, expiryDate: "2027-01-30" },
      { id: 5, name: "Loratadine", dosage: "10mg", quantity: 50, expiryDate: "2026-08-12" }
    ];
    
    // L·ªçc theo t·ª´ kh√≥a t√¨m ki·∫øm n·∫øu c√≥
    if (searchTerm && searchTerm.trim() !== '') {
      return mockMedicationItems.filter(item => 
        item.name.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    return mockMedicationItems;
  },
  // TODO: Ch·ªù API - L·∫•y chi ti·∫øt y√™u c·∫ßu thu·ªëc theo ID
  getMedicineRequestById: async (id) => {
    console.log("TODO: Implement real API - Getting medicine request by ID:", id);
    const mockRequest = mockMedicineRequests.find(req => req.id === Number(id));
    
    if (mockRequest) {
      return {...mockRequest};
    } else {
      throw new Error(`Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu thu·ªëc v·ªõi ID ${id}`);
    }
  },
  // TODO: Ch·ªù API - Th√™m y√™u c·∫ßu thu·ªëc m·ªõi
  addMedicineRequest: async (medicineData) => {
    console.log("TODO: Implement real API - Adding new medicine request");
    try {
      // Th·ª≠ g·ªçi API th·∫≠t
      try {
        const data = await fetch(`${BASE_URL}/create`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(medicineData)
        });
        
        if (!data.ok) {
          throw new Error('Network response was not ok');
        }
        
        const responseData = await data.json();
        return responseData;
      } catch (apiError) {
        console.log("Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi API th·∫≠t ƒë·ªÉ th√™m y√™u c·∫ßu, x·ª≠ l√Ω d·ªØ li·ªáu m·∫´u", apiError);
        
        // X·ª≠ l√Ω tr√™n d·ªØ li·ªáu m·∫´u
        const newId = Math.max(...mockMedicineRequests.map(item => item.id)) + 1;
        const newMedicineRequest = {
          id: newId,
          status: 0, // M·∫∑c ƒë·ªãnh l√† ch·ªù ph√™ duy·ªát
          ...medicineData,
          startDate: medicineData.startDate || new Date().toISOString().split('T')[0],
          endDate: medicineData.endDate || new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
        };
        
        mockMedicineRequests.push(newMedicineRequest);
        return { 
          success: true, 
          message: "ƒê√£ th√™m y√™u c·∫ßu thu·ªëc m·ªõi th√†nh c√¥ng", 
          data: newMedicineRequest 
        };
      }
    } catch (error) {
      console.error("L·ªói khi th√™m y√™u c·∫ßu thu·ªëc m·ªõi:", error);
      return { success: false, message: error.message };
    }
  },
  
  // TODO: Ch·ªù API - C·∫≠p nh·∫≠t y√™u c·∫ßu thu·ªëc
  updateMedicineRequest: async (id, medicineData) => {
    console.log("TODO: Implement real API - Updating medicine request");
    try {
      // Th·ª≠ g·ªçi API th·∫≠t
      try {
        const data = await fetch(`${BASE_URL}/update/${id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(medicineData)
        });
        
        if (!data.ok) {
          throw new Error('Network response was not ok');
        }
        
        const responseData = await data.json();
        return responseData;
      } catch (apiError) {
        console.log(`Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi API th·∫≠t ƒë·ªÉ c·∫≠p nh·∫≠t y√™u c·∫ßu ${id}, x·ª≠ l√Ω d·ªØ li·ªáu m·∫´u`, apiError);
        
        // X·ª≠ l√Ω tr√™n d·ªØ li·ªáu m·∫´u
        const index = mockMedicineRequests.findIndex(req => req.id === Number(id));
        if (index !== -1) {
          mockMedicineRequests[index] = { 
            ...mockMedicineRequests[index], 
            ...medicineData,
            id: Number(id) // ƒê·∫£m b·∫£o ID kh√¥ng thay ƒë·ªïi
          };
          return { 
            success: true, 
            message: "ƒê√£ c·∫≠p nh·∫≠t y√™u c·∫ßu thu·ªëc th√†nh c√¥ng", 
            data: mockMedicineRequests[index] 
          };
        } else {
          throw new Error(`Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu thu·ªëc v·ªõi ID ${id}`);
        }
      }
    } catch (error) {
      console.error(`L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin thu·ªëc v·ªõi ID ${id}:`, error);
      return { success: false, message: error.message };
    }
  },  // X·ª≠ l√Ω y√™u c·∫ßu thu·ªëc (ph√™ duy·ªát/t·ª´ ch·ªëi)
  processMedicineRequest: async (id, requestData) => {
    try {
      console.log(`Processing medicine request ${id} with data:`, requestData);
      
      // Format payload theo ƒë√∫ng y√™u c·∫ßu API
      const payload = {
        decision: requestData.decision,
        ...(requestData.decision === 'REJECTED' && requestData.reason ? { reason: requestData.reason } : {})
      };
      
      console.log('Preparing payload for API:', payload);
      
      try {
        // S·ª≠ d·ª•ng axios qua instance api thay v√¨ fetch ƒë·ªÉ t·∫≠n d·ª•ng interceptor
        const response = await api.put(`/nurse-medication-approvals/${id}/process`, payload);
        
        console.log('Response status:', response.status);
        console.log('API Response data:', response.data);
        
        return {
          success: true,
          message: `ƒê√£ ${requestData.decision === 'APPROVED' ? 'ph√™ duy·ªát' : 't·ª´ ch·ªëi'} y√™u c·∫ßu thu·ªëc th√†nh c√¥ng`,
          data: response.data
        };      } catch (apiError) {
        console.log('API call failed, fallback to mock data', apiError);
        
        // Log chi ti·∫øt h∆°n v·ªÅ l·ªói API ƒë·ªÉ debug
        if (apiError.response) {
          // Server tr·∫£ v·ªÅ l·ªói
          console.error('Error response:', {
            status: apiError.response.status,
            headers: apiError.response.headers,
            data: apiError.response.data
          });
        } else if (apiError.request) {
          // Request ƒë∆∞·ª£c g·ª≠i nh∆∞ng kh√¥ng nh·∫≠n ƒë∆∞·ª£c response
          console.error('Error request:', apiError.request);
        } else {
          // L·ªói kh√°c khi c√†i ƒë·∫∑t request
          console.error('Error message:', apiError.message);
        }
        
        // FALLBACK: S·ª≠ d·ª•ng mock data khi API th·∫•t b·∫°i
        // T√¨m request trong mock data
        const index = mockMedicineRequests.findIndex(req => req.id === Number(id));
        if (index !== -1) {
          // C·∫≠p nh·∫≠t tr·∫°ng th√°i theo quy·∫øt ƒë·ªãnh
          const newStatus = requestData.decision === 'APPROVED' ? 1 : 2;
          
          // C·∫≠p nh·∫≠t mock data
          mockMedicineRequests[index] = {
            ...mockMedicineRequests[index],
            status: newStatus,
            ...(requestData.decision === 'REJECTED' && { 
              rejectionReason: requestData.reason || 'Kh√¥ng ƒë√°p ·ª©ng y√™u c·∫ßu' 
            })
          };
          
          console.log(`Mock: Updated request ${id} status to ${newStatus}`);
          
          return {
            success: true,
            message: `ƒê√£ ${requestData.decision === 'APPROVED' ? 'ph√™ duy·ªát' : 't·ª´ ch·ªëi'} y√™u c·∫ßu thu·ªëc th√†nh c√¥ng (d·ªØ li·ªáu m·∫´u)`,
            data: mockMedicineRequests[index]
          };
        } else {
          throw new Error(`Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu thu·ªëc v·ªõi ID ${id}`);
        }
      }
    } catch (error) {
      console.error(`L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu thu·ªëc v·ªõi ID ${id}:`, error);
      return { 
        success: false, 
        message: error.message || 'Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu thu·ªëc'
      };
    }
  },
  // TODO: Ch·ªù API - X√≥a y√™u c·∫ßu thu·ªëc
  deleteMedicineRequest: async (id) => {
    console.log("TODO: Implement real API - Deleting medicine request");
    try {
      // X·ª≠ l√Ω tr·ª±c ti·∫øp tr√™n d·ªØ li·ªáu m·∫´u
      const index = mockMedicineRequests.findIndex(req => req.id === Number(id));
      if (index !== -1) {
        mockMedicineRequests.splice(index, 1);
        return { success: true, message: 'ƒê√£ x√≥a y√™u c·∫ßu thu·ªëc th√†nh c√¥ng' };
      } else {
        throw new Error(`Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu thu·ªëc v·ªõi ID ${id}`);
      }
    } catch (error) {
      console.error(`L·ªói khi x√≥a y√™u c·∫ßu thu·ªëc v·ªõi ID ${id}:`, error);
      return { success: false, message: error.message };
    }
  },
  
  // TODO: Ch·ªù API - T√¨m ki·∫øm thu·ªëc t·ª´ ph·ª• huynh theo c√°c ti√™u ch√≠
  searchMedicineRequests: async (filters) => {
    console.log("TODO: Implement real API - Searching medicine requests with filters");
    try {
      console.log("T√¨m ki·∫øm tr√™n d·ªØ li·ªáu m·∫´u v·ªõi c√°c b·ªô l·ªçc:", filters);
        
      // T√¨m ki·∫øm tr√™n d·ªØ li·ªáu m·∫´u
      let filteredData = [...mockMedicineRequests];
        
      // √Åp d·ª•ng c√°c ƒëi·ªÅu ki·ªán l·ªçc
      if (filters.studentId) {
        filteredData = filteredData.filter(item => 
          item.studentId.toLowerCase().includes(filters.studentId.toLowerCase())
        );
      }
        
      if (filters.studentName) {
        filteredData = filteredData.filter(item => 
          item.studentName.toLowerCase().includes(filters.studentName.toLowerCase())
        );
      }
        
      if (filters.medicineName && Array.isArray(filteredData[0]?.medicationDetails)) {
        filteredData = filteredData.filter(item => 
          item.medicationDetails.some(med => 
            med.name.toLowerCase().includes(filters.medicineName.toLowerCase())
          )
        );
      }
        
      if (filters.status !== undefined) {
        filteredData = filteredData.filter(item => 
          item.status === parseInt(filters.status)
        );
      }
        
      // L·ªçc theo ng√†y n·∫øu c√≥
      if (filters.fromDate) {
        const fromDate = new Date(filters.fromDate);
        filteredData = filteredData.filter(item => 
          new Date(item.startDate) >= fromDate
        );
      }
        
      if (filters.toDate) {
        const toDate = new Date(filters.toDate);
        filteredData = filteredData.filter(item => 
          new Date(item.endDate) <= toDate
        );
      }
        
      return filteredData;
    } catch (error) {
      console.error("L·ªói khi t√¨m ki·∫øm thu·ªëc t·ª´ ph·ª• huynh:", error);
      // Tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫´u trong tr∆∞·ªùng h·ª£p x·∫£y ra l·ªói
      return [...mockMedicineRequests]; 
    }
  },

  // L·∫•y l·ªãch s·ª≠ d√πng thu·ªëc g·∫ßn ƒë√¢y - Function ƒë∆∞·ª£c g·ªçi b·ªüi MedicationHistory.jsx
  getRecentMedicationAdministrations: async (page = 1, size = 10) => {
    try {
      console.log(`Getting recent medication administrations with images (page ${page}, size ${size})`);
      
      // G·ªçi API th·∫≠t v·ªõi pagination (1-based) v√† include images
      const response = await apiService1.get('/recent', {
        params: { 
          page: page, // API s·ª≠ d·ª•ng 1-based index
          size: size,
          includeImages: true // Request to include image URLs in response
        }
      });
      
      console.log('API Response for recent administrations:', response.data);
      console.log('üîç DEBUG - Full response structure:', JSON.stringify(response.data, null, 2));
      console.log('üîç DEBUG - Response.data type:', typeof response.data);
      console.log('üîç DEBUG - Response.data keys:', Object.keys(response.data));
      
      // Check different possible response structures
      let actualData = [];
      let totalItems = 0;
      let totalPages = 0;
      
      if (response.data.data && response.data.data.content) {
        // Backend structure: { status: "success", data: { content: [...], totalElements: X } }
        actualData = response.data.data.content;
        totalItems = response.data.data.totalElements || 0;
        totalPages = response.data.data.totalPages || 0;
        console.log('üîç Using backend nested structure (data.data.content)');
      } else if (response.data.content) {
        // Spring Boot pageable response structure
        actualData = response.data.content;
        totalItems = response.data.totalElements || 0;
        totalPages = response.data.totalPages || 0;
        console.log('üîç Using Spring Boot pageable structure');
      } else if (response.data.data) {
        // Nested data structure
        actualData = response.data.data;
        totalItems = response.data.totalItems || actualData.length;
        totalPages = response.data.totalPages || Math.ceil(totalItems / size);
        console.log('üîç Using nested data structure');
      } else if (Array.isArray(response.data)) {
        // Direct array response
        actualData = response.data;
        totalItems = actualData.length;
        totalPages = Math.ceil(totalItems / size);
        console.log('üîç Using direct array structure');
      } else {
        console.log('üîç Unknown response structure, checking all properties...');
        for (const [key, value] of Object.entries(response.data)) {
          console.log(`üîç Property ${key}:`, value);
          if (Array.isArray(value)) {
            console.log(`üîç Found array in property ${key} with ${value.length} items`);
            actualData = value;
            totalItems = value.length;
            totalPages = Math.ceil(totalItems / size);
            break;
          }
        }
      }
      
      // Process and enhance data to include image URLs if not present
      if (Array.isArray(actualData)) {
        actualData = actualData.map(item => {
          // Log each item to see its structure
          console.log('üîç Processing administration item:', item);
          
          // Ensure imageUrl field exists - check various possible field names
          const imageUrl = item.imageUrl || 
                          item.confirmationImageUrl || 
                          item.image_url || 
                          item.confirmation_image_url ||
                          item.attachmentUrl ||
                          null;
          
          return {
            ...item,
            imageUrl: imageUrl
          };
        });
        
        console.log(`üîç DEBUG - Enhanced data with images: ${actualData.length} items`);
        // Log first item to see structure
        if (actualData.length > 0) {
          console.log('üîç DEBUG - First item structure:', actualData[0]);
        }
      }
      
      console.log(`üîç DEBUG - Extracted data: ${actualData.length} items`);
      console.log(`üîç DEBUG - Total items: ${totalItems}, Total pages: ${totalPages}`);
      
      // Ensure we always return an array
      if (!Array.isArray(actualData)) {
        console.log('üîç WARNING - actualData is not an array, forcing to empty array');
        actualData = [];
      }
      
      return {
        success: true,
        data: actualData,
        totalItems: totalItems,
        totalPages: totalPages,
        currentPage: page
      };
    } catch (error) {
      console.error("Error in getRecentMedicationAdministrations:", error);
      console.error("API call failed, attempting fallback to mock data with images");
      
      // Fallback to enhanced mock data with sample images
      const enhancedMockData = mockMedicationAdministrations.map(item => ({
        ...item,
        imageUrl: item.id % 3 === 0 ? `https://via.placeholder.com/400x300?text=Medication+${item.id}` : null
      }));
      
      // Apply pagination to mock data
      const startIndex = (page - 1) * size;
      const endIndex = startIndex + size;
      const paginatedData = enhancedMockData.slice(startIndex, endIndex);
      
      return {
        success: false,
        data: paginatedData,
        totalItems: enhancedMockData.length,
        totalPages: Math.ceil(enhancedMockData.length / size),
        currentPage: page,
        message: error.response?.data?.message || error.message || "S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u - kh√¥ng th·ªÉ k·∫øt n·ªëi API"
      };
    }
  },

  // T·∫°o b·∫£n ghi cung c·∫•p thu·ªëc m·ªõi - Function ƒë∆∞·ª£c g·ªçi b·ªüi MedicationAdministration.jsx
  createMedicationAdministration: async (data) => {
    try {
      console.log('Creating new medication administration:', data);
      console.log('Using API endpoint:', apiService1.defaults.baseURL);
      console.log('Request config:', {
        method: 'POST',
        url: apiService1.defaults.baseURL,
        data: data,
        headers: apiService1.defaults.headers
      });
      
      // G·ªçi API th·∫≠t v·ªõi endpoint ch√≠nh x√°c
      const response = await apiService1.post('', data);
      
      console.log('‚úÖ API Response for create:', response.data);
      
      return {
        success: true,
        data: response.data,
        message: "ƒê√£ t·∫°o b·∫£n ghi cung c·∫•p thu·ªëc th√†nh c√¥ng"
      };
    } catch (error) {
      console.error("‚ùå Error in createMedicationAdministration:", error);
      console.error("‚ùå Error response:", error.response);
      console.error("‚ùå Error config:", error.config);
      console.error("‚ùå Request URL:", error.config?.url);
      console.error("‚ùå Error status:", error.response?.status);
      console.error("‚ùå Error data:", error.response?.data);
      
      // Check if it's a network error (server not running)
      if (!error.response) {
        console.log("üîç Network error detected - server might not be running");
        return {
          success: false,
          message: "Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server. Vui l√≤ng ki·ªÉm tra xem backend c√≥ ƒëang ch·∫°y kh√¥ng?"
        };
      }
      
      // Check if it's a 404 error (endpoint not found)
      if (error.response?.status === 404) {
        console.log("üîç 404 error - endpoint not found");
        return {
          success: false,
          message: "Endpoint API kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra server backend."
        };
      }
      
      // Check if it's an auth error
      if (error.response?.status === 401 || error.response?.status === 403) {
        console.log("üîç Authentication error detected");
        return {
          success: false,
          message: "L·ªói x√°c th·ª±c. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i."
        };
      }
      
      return {
        success: false,
        message: error.response?.data?.message || error.message || "Kh√¥ng th·ªÉ t·∫°o b·∫£n ghi cung c·∫•p thu·ªëc"
      };
    }
  },

  // Upload ·∫£nh x√°c nh·∫≠n - Function ƒë∆∞·ª£c g·ªçi b·ªüi MedicationAdministration.jsx
  uploadConfirmationImage: async (administrationId, imageFile) => {
    try {
      console.log(`Uploading confirmation image for administration ${administrationId}`);
      
      // T·∫°o FormData ƒë·ªÉ upload file
      const formData = new FormData();
      formData.append('image', imageFile);
      
      // G·ªçi API th·∫≠t v·ªõi endpoint ch√≠nh x√°c
      const response = await apiService1.post(`/${administrationId}/upload-confirmation-image`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });
      
      console.log('API Response for image upload:', response.data);
      
      return {
        success: true,
        data: response.data,
        message: "ƒê√£ t·∫£i l√™n ·∫£nh x√°c nh·∫≠n th√†nh c√¥ng"
      };
    } catch (error) {
      console.error("Error in uploadConfirmationImage:", error);
      console.error("Error response:", error.response);
      
      return {
        success: false,
        message: error.response?.data?.message || error.message || "Kh√¥ng th·ªÉ t·∫£i l√™n ·∫£nh x√°c nh·∫≠n"
      };
    }
  },

  // API ƒë·ªÉ l·∫•y t·∫•t c·∫£ l·ªãch s·ª≠ d√πng thu·ªëc
  getAllMedicationAdministrations: async (page = 1, size = 10) => {
    try {
      console.log('üîç Calling getAllMedicationAdministrations API...');
      console.log('API URL:', `${BASE_URL1}/all`);
      
      // G·ªçi API th·∫≠t v·ªõi endpoint /all
      const response = await apiService1.get('/all');
      
      console.log('‚úÖ API Response:', response.data);
      
      // Ki·ªÉm tra format response
      if (response.data && response.data.status === 'success') {
        const allData = response.data.data || [];
        const totalItems = response.data.count || allData.length;
        
        // Th·ª±c hi·ªán ph√¢n trang tr√™n client side
        const startIndex = (page - 1) * size;
        const endIndex = startIndex + size;
        const paginatedData = allData.slice(startIndex, endIndex);
        const totalPages = Math.ceil(totalItems / size);
        
        return {
          status: 'success',
          data: {
            posts: paginatedData,
            totalItems: totalItems,
            totalPages: totalPages,
            currentPage: page
          }
        };
      } else {
        throw new Error('Invalid response format from API');
      }
    } catch (error) {
      console.error("‚ùå Error in getAllMedicationAdministrations:", error);
      console.error("‚ùå Error response:", error.response);
      
      // Fallback to mock data if API fails
      console.log("üîÑ API failed, using mock data as fallback");
      console.log("üìä Mock data count:", mockMedicationAdministrations.length);
      
      const allData = mockMedicationAdministrations;
      const totalItems = allData.length;
      const startIndex = (page - 1) * size;
      const endIndex = startIndex + size;
      const paginatedData = allData.slice(startIndex, endIndex);
      const totalPages = Math.ceil(totalItems / size);
      
      console.log('üìÑ Paginated mock data:', {
        totalItems,
        totalPages,
        currentPage: page,
        startIndex,
        endIndex,
        paginatedDataLength: paginatedData.length
      });
      
      return {
        status: 'success',
        data: {
          posts: paginatedData,
          totalItems: totalItems,
          totalPages: totalPages,
          currentPage: page
        }
      };
    }
  },
  
  // Th√™m m·ªõi l·ªãch s·ª≠ d√πng thu·ªëc
  addMedicationAdministration: async (data) => {
    try {
      // G·ªçi API th·∫≠t b·∫±ng instance ƒë√∫ng baseURL1
      const response = await apiService1.post('', data);
      return response.data;
    } catch (error) {
      console.error("Error in addMedicationAdministration:", error);
      throw new Error(error.response?.data?.message || error.message || "Kh√¥ng th·ªÉ th√™m m·ªõi l·ªãch s·ª≠ d√πng thu·ªëc");
    }
  },
  
  // C·∫≠p nh·∫≠t l·ªãch s·ª≠ d√πng thu·ªëc
  updateMedicationAdministration: async (id, data) => {
    try {
      // G·ªçi API th·∫≠t b·∫±ng instance ƒë√∫ng baseURL1
      const response = await apiService1.put(`/${id}`, data);
      return response.data;
    } catch (error) {
      console.error("Error in updateMedicationAdministration:", error);
      throw new Error(error.response?.data?.message || error.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t l·ªãch s·ª≠ d√πng thu·ªëc");
    }
  },
  
  // X√≥a l·ªãch s·ª≠ d√πng thu·ªëc
  deleteMedicationAdministration: async (id) => {
    try {
      // G·ªçi API th·∫≠t b·∫±ng instance ƒë√∫ng baseURL1
      await apiService1.delete(`/${id}`);
      return { success: true };
    } catch (error) {
      console.error("Error in deleteMedicationAdministration:", error);
      throw new Error(error.response?.data?.message || error.message || "Kh√¥ng th·ªÉ x√≥a l·ªãch s·ª≠ d√πng thu·ªëc");
    }
  },

};

export default receiveMedicineService;

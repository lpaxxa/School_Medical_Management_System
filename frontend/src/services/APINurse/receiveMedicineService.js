// Service API cho qu·∫£n l√Ω thu·ªëc t·ª´ ph·ª• huynh
import api from './../api.js';
import axios from 'axios';

// BASE_URL cho tab "ƒê∆°n nh·∫≠n thu·ªëc"
const BASE_URL = "http://localhost:8080/api/v1/nurse-medication-approvals";
// BASE_URL1 cho tab "L·ªãch s·ª≠ d√πng thu·ªëc"
const BASE_URL1 = "http://localhost:8080/api/v1/medication-administrations";

// Instance cho "ƒê∆°n nh·∫≠n thu·ªëc"
const apiService = axios.create({
  baseURL: BASE_URL,
  headers: {
    'Content-Type': 'application/json'
  }
});

// Instance cho "L·ªãch s·ª≠ d√πng thu·ªëc"
const apiService1 = axios.create({
  baseURL: BASE_URL1,
  headers: {
    'Content-Type': 'application/json'
  }
});

// Th√™m interceptor cho c·∫£ hai instance n·∫øu c·∫ßn token
[apiService, apiService1].forEach(service => {
  service.interceptors.request.use(
    (config) => {
      const token = localStorage.getItem('authToken');
      if (token) {
        config.headers['Authorization'] = `Bearer ${token}`;
      }
      return config;
    },
    (error) => Promise.reject(error)
  );
});

// Thay th·∫ø h√†m checkAuthToken hi·ªán t·∫°i
const checkAuthToken = () => {
  const token = localStorage.getItem('authToken');
  if (token) {
    console.log(`Token exists: ${token.substring(0, 15)}...`);
    
    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng JWT
    const parts = token.split('.');
    if (parts.length !== 3) {
      console.warn('Token kh√¥ng c√≥ ƒë·ªãnh d·∫°ng JWT h·ª£p l·ªá!');
      return false;
    }
    
    // Ki·ªÉm tra th·ªùi h·∫°n token
    try {
      const payload = JSON.parse(atob(parts[1]));
      const expiration = payload.exp * 1000; // Chuy·ªÉn ƒë·ªïi t·ª´ gi√¢y sang mili gi√¢y
      const now = Date.now();
      
      if (expiration < now) {
        console.warn('Token ƒë√£ h·∫øt h·∫°n!');
        return false;
      }
      
      console.log('Token h·ª£p l·ªá v√† ch∆∞a h·∫øt h·∫°n.');
      return true;
    } catch (err) {
      console.warn('Kh√¥ng th·ªÉ gi·∫£i m√£ JWT payload:', err);
      return false;
    }
  } else {
    console.warn('No authentication token found in localStorage');
    return false;
  }
};

// G·ªçi h√†m ƒë·ªÉ ki·ªÉm tra
const tokenValid = checkAuthToken();
console.log('Token valid:', tokenValid);

const receiveMedicineService = {
  // Test server connectivity - Function ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi server
  testServerConnection: async () => {
    try {
      console.log('üîç Testing server connection...');
      console.log('üîç API Service 1 Base URL:', apiService1.defaults.baseURL);
      
      // Test with a simple GET request to a known endpoint
      const response = await apiService1.get('/recent?page=1&size=1');
      console.log('‚úÖ Server connection successful:', response.status);
      return {
        success: true,
        message: "Server connection successful",
        status: response.status
      };
    } catch (error) {
      console.error('‚ùå Server connection failed:', error);
      return {
        success: false,
        message: "Server connection failed",
        error: error.message,
        status: error.response?.status
      };
    }
  },

  // API th·∫≠t ƒë·ªÉ l·∫•y t·∫•t c·∫£ y√™u c·∫ßu thu·ªëc
  getAllMedicineRequests: async () => {
    try {
      console.log('G·ªçi API l·∫•y danh s√°ch y√™u c·∫ßu thu·ªëc...');
      console.log('Auth token status:', localStorage.getItem('authToken') ? 'Token exists' : 'No token');
      
      // S·ª¨A ƒê·ªîI: S·ª≠ d·ª•ng apiService thay v√¨ api v√† ƒëi·ªÅu ch·ªânh endpoint
      const response = await apiService.get('/all-requests');
      console.log('API getAllMedicineRequests response:', response.data);
      
      return response.data;
    } catch (error) {
      console.error("API call failed for getAllMedicineRequests:", error.response || error);
      
      // N√©m l·ªói thay v√¨ d√πng mock data
      throw {
        message: error.response?.data?.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch y√™u c·∫ßu thu·ªëc',
        status: error.response?.status
      };
    }
  },

  // TODO: Ch·ªù API - T√¨m ki·∫øm thu·ªëc theo t√™n
  searchMedicationByName: async (searchTerm) => {
    console.log("TODO: Implement real API - Searching medication by name:", searchTerm);
    
    // T·∫°m th·ªùi throw error ƒë·ªÉ tr√°nh d√πng mock data trong production
    throw {
      success: false,
      message: 'API ch∆∞a ƒë∆∞·ª£c implement cho ch·ª©c nƒÉng t√¨m ki·∫øm thu·ªëc theo t√™n. Vui l√≤ng li√™n h·ªá team ph√°t tri·ªÉn.'
    };
  },
  // TODO: Ch·ªù API - L·∫•y chi ti·∫øt y√™u c·∫ßu thu·ªëc theo ID
  getMedicineRequestById: async (id) => {
    try {
      console.log("Calling API - Getting medicine request by ID:", id);
      
      // G·ªçi API th·ª±c t·∫ø ƒë·ªÉ l·∫•y chi ti·∫øt y√™u c·∫ßu thu·ªëc
      const response = await api.get(`/nurse-medication-approvals/${id}`);
      console.log('API Response for getMedicineRequestById:', response.data);
      
      return response.data;
    } catch (error) {
      console.error("API call failed for getMedicineRequestById:", error.response || error);
      
      // N√©m l·ªói thay v√¨ d√πng mock data
      throw {
        message: error.response?.data?.message || 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin chi ti·∫øt y√™u c·∫ßu thu·ªëc',
        status: error.response?.status
      };
    }
  },
  // TODO: Ch·ªù API - Th√™m y√™u c·∫ßu thu·ªëc m·ªõi
  // C·∫¢NH B√ÅO: Function n√†y ƒëang s·ª≠ d·ª•ng mock data. C·∫ßn implement API th·ª±c t·∫ø tr∆∞·ªõc khi d√πng trong production
  addMedicineRequest: async (medicineData) => {
    console.log("TODO: Implement real API - Adding new medicine request");
    
    // T·∫°m th·ªùi throw error ƒë·ªÉ tr√°nh d√πng mock data trong production
    throw {
      success: false,
      message: 'API ch∆∞a ƒë∆∞·ª£c implement cho ch·ª©c nƒÉng th√™m y√™u c·∫ßu thu·ªëc m·ªõi. Vui l√≤ng li√™n h·ªá team ph√°t tri·ªÉn.'
    };
    
    /* MOCK CODE - CH·ªà D√ôNG CHO DEVELOPMENT
    try {
      // Th·ª≠ g·ªçi API th·∫≠t
      try {
        const response = await api.post('/create', medicineData);
        
        return response.data;
      } catch (apiError) {
        console.log("Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi API th·∫≠t ƒë·ªÉ th√™m y√™u c·∫ßu, x·ª≠ l√Ω d·ªØ li·ªáu m·∫´u", apiError);
        
        // X·ª≠ l√Ω tr√™n d·ªØ li·ªáu m·∫´u
        const newId = Math.max(...mockMedicineRequests.map(item => item.id)) + 1;
        const newMedicineRequest = {
          id: newId,
          status: 0,
          ...medicineData,
          startDate: medicineData.startDate || new Date().toISOString().split('T')[0],
          endDate: medicineData.endDate || new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
        };
        
        mockMedicineRequests.push(newMedicineRequest);
        return { 
          success: true, 
          message: "ƒê√£ th√™m y√™u c·∫ßu thu·ªëc m·ªõi th√†nh c√¥ng", 
          data: newMedicineRequest 
        };
      }
    } catch (error) {
      console.error("L·ªói khi th√™m y√™u c·∫ßu thu·ªëc m·ªõi:", error);
      return { success: false, message: error.message };
    }
    */
  },
  
  // TODO: Ch·ªù API - C·∫≠p nh·∫≠t y√™u c·∫ßu thu·ªëc
  // C·∫¢NH B√ÅO: Function n√†y ƒëang s·ª≠ d·ª•ng mock data. C·∫ßn implement API th·ª±c t·∫ø tr∆∞·ªõc khi d√πng trong production
  updateMedicineRequest: async (id, medicineData) => {
    console.log("TODO: Implement real API - Updating medicine request");
    
    // T·∫°m th·ªùi throw error ƒë·ªÉ tr√°nh d√πng mock data trong production
    throw {
      success: false,
      message: 'API ch∆∞a ƒë∆∞·ª£c implement cho ch·ª©c nƒÉng c·∫≠p nh·∫≠t y√™u c·∫ßu thu·ªëc. Vui l√≤ng li√™n h·ªá team ph√°t tri·ªÉn.'
    };
    
    /* MOCK CODE - CH·ªà D√ôNG CHO DEVELOPMENT
    try {
      // Th·ª≠ g·ªçi API th·∫≠t
      try {
        const data = await fetch(`/update/${id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(medicineData)
        });
        
        if (!data.ok) {
          throw new Error('Network response was not ok');
        }
        
        const responseData = await data.json();
        return responseData;
      } catch (apiError) {
        console.log(`Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi API th·∫≠t ƒë·ªÉ c·∫≠p nh·∫≠t y√™u c·∫ßu ${id}, x·ª≠ l√Ω d·ªØ li·ªáu m·∫´u`, apiError);
        
        // X·ª≠ l√Ω tr√™n d·ªØ li·ªáu m·∫´u
        const index = mockMedicineRequests.findIndex(req => req.id === Number(id));
        if (index !== -1) {
          mockMedicineRequests[index] = { 
            ...mockMedicineRequests[index], 
            ...medicineData,
            id: Number(id) // ƒê·∫£m b·∫£o ID kh√¥ng thay ƒë·ªïi
          };
          return { 
            success: true, 
            message: "ƒê√£ c·∫≠p nh·∫≠t y√™u c·∫ßu thu·ªëc th√†nh c√¥ng", 
            data: mockMedicineRequests[index] 
          };
        } else {
          throw new Error(`Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu thu·ªëc v·ªõi ID ${id}`);
        }
      }
    } catch (error) {
      console.error(`L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin thu·ªëc v·ªõi ID ${id}:`, error);
      return { success: false, message: error.message };
    }
    */
  },
  
  // X·ª≠ l√Ω y√™u c·∫ßu thu·ªëc (ph√™ duy·ªát/t·ª´ ch·ªëi)
  processMedicineRequest: async (id, requestData) => {
    try {
      console.log(`Processing medicine request ${id} with data:`, requestData);
      
      // Format payload theo ƒë√∫ng y√™u c·∫ßu API
      const payload = {
        decision: requestData.decision,
        ...(requestData.decision === 'REJECTED' && requestData.reason ? { reason: requestData.reason } : {})
      };
      
      console.log('Preparing payload for API:', payload);
      
      // S·ª≠ d·ª•ng axios qua instance api thay v√¨ fetch ƒë·ªÉ t·∫≠n d·ª•ng interceptor
      const response = await api.put(`/nurse-medication-approvals/${id}/process`, payload);
      
      console.log('Response status:', response.status);
      console.log('API Response data:', response.data);
      
      return {
        success: true,
        message: `ƒê√£ ${requestData.decision === 'APPROVED' ? 'ph√™ duy·ªát' : 't·ª´ ch·ªëi'} y√™u c·∫ßu thu·ªëc th√†nh c√¥ng`,
        data: response.data
      };
    } catch (error) {
      console.error(`L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu thu·ªëc v·ªõi ID ${id}:`, error);  
      
      // N√©m l·ªói thay v√¨ d√πng mock data
      throw {
        success: false,
        message: error.response?.data?.message || error.message || 'Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu thu·ªëc',
        status: error.response?.status
      };
    }
  },
  // TODO: Ch·ªù API - X√≥a y√™u c·∫ßu thu·ªëc
  // C·∫¢NH B√ÅO: Function n√†y ƒëang s·ª≠ d·ª•ng mock data. C·∫ßn implement API th·ª±c t·∫ø tr∆∞·ªõc khi d√πng trong production
  deleteMedicineRequest: async (id) => {
    console.log("TODO: Implement real API - Deleting medicine request");
    
    // T·∫°m th·ªùi throw error ƒë·ªÉ tr√°nh d√πng mock data trong production
    throw {
      success: false,
      message: 'API ch∆∞a ƒë∆∞·ª£c implement cho ch·ª©c nƒÉng x√≥a y√™u c·∫ßu thu·ªëc. Vui l√≤ng li√™n h·ªá team ph√°t tri·ªÉn.'
    };
    
    /* MOCK CODE - CH·ªà D√ôNG CHO DEVELOPMENT
    try {
      // X·ª≠ l√Ω tr·ª±c ti·∫øp tr√™n d·ªØ li·ªáu m·∫´u
      const index = mockMedicineRequests.findIndex(req => req.id === Number(id));
      if (index !== -1) {
        mockMedicineRequests.splice(index, 1);
        return { success: true, message: 'ƒê√£ x√≥a y√™u c·∫ßu thu·ªëc th√†nh c√¥ng' };
      } else {
        throw new Error(`Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu thu·ªëc v·ªõi ID ${id}`);
      }
    } catch (error) {
      console.error(`L·ªói khi x√≥a y√™u c·∫ßu thu·ªëc v·ªõi ID ${id}:`, error);
      return { success: false, message: error.message };
    }
    */
  },
  
  // TODO: Ch·ªù API - T√¨m ki·∫øm thu·ªëc t·ª´ ph·ª• huynh theo c√°c ti√™u ch√≠
  // C·∫¢NH B√ÅO: Function n√†y ƒëang s·ª≠ d·ª•ng mock data. C·∫ßn implement API th·ª±c t·∫ø tr∆∞·ªõc khi d√πng trong production
  searchMedicineRequests: async (filters) => {
    console.log("TODO: Implement real API - Searching medicine requests with filters");
    
    // T·∫°m th·ªùi throw error ƒë·ªÉ tr√°nh d√πng mock data trong production
    throw {
      success: false,
      message: 'API ch∆∞a ƒë∆∞·ª£c implement cho ch·ª©c nƒÉng t√¨m ki·∫øm y√™u c·∫ßu thu·ªëc. Vui l√≤ng li√™n h·ªá team ph√°t tri·ªÉn.'
    };
    
    /* MOCK CODE - CH·ªà D√ôNG CHO DEVELOPMENT
    try {
      console.log("T√¨m ki·∫øm tr√™n d·ªØ li·ªáu m·∫´u v·ªõi c√°c b·ªô l·ªçc:", filters);
        
      // T√¨m ki·∫øm tr√™n d·ªØ li·ªáu m·∫´u
      let filteredData = [...mockMedicineRequests];
        
      // √Åp d·ª•ng c√°c ƒëi·ªÅu ki·ªán l·ªçc
      if (filters.studentId) {
        filteredData = filteredData.filter(item => 
          item.studentId.toLowerCase().includes(filters.studentId.toLowerCase())
        );
      }
        
      if (filters.studentName) {
        filteredData = filteredData.filter(item => 
          item.studentName.toLowerCase().includes(filters.studentName.toLowerCase())
        );
      }
        
      if (filters.medicineName && Array.isArray(filteredData[0]?.medicationDetails)) {
        filteredData = filteredData.filter(item => 
          item.medicationDetails.some(med => 
            med.name.toLowerCase().includes(filters.medicineName.toLowerCase())
          )
        );
      }
        
      if (filters.status !== undefined) {
        filteredData = filteredData.filter(item => 
          item.status === parseInt(filters.status)
        );
      }
        
      // L·ªçc theo ng√†y n·∫øu c√≥
      if (filters.fromDate) {
        const fromDate = new Date(filters.fromDate);
        filteredData = filteredData.filter(item => 
          new Date(item.startDate) >= fromDate
        );
      }
        
      if (filters.toDate) {
        const toDate = new Date(filters.toDate);
        filteredData = filteredData.filter(item => 
          new Date(item.endDate) <= toDate
        );
      }
        
      return filteredData;
    } catch (error) {
      console.error("L·ªói khi t√¨m ki·∫øm thu·ªëc t·ª´ ph·ª• huynh:", error);
      // Tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫´u trong tr∆∞·ªùng h·ª£p x·∫£y ra l·ªói
      return [...mockMedicineRequests]; 
    }
    */
  },

  // L·∫•y l·ªãch s·ª≠ d√πng thu·ªëc g·∫ßn ƒë√¢y - Function ƒë∆∞·ª£c g·ªçi b·ªüi MedicationHistory.jsx
  getRecentMedicationAdministrations: async (page = 1, size = 10) => {
    try {
      console.log(`üîÑ Calling REAL API for medication administrations (page ${page}, size ${size})`);
      
      // G·ªçi API th·∫≠t v·ªõi pagination (1-based) v√† include images
      const response = await apiService1.get('/recent', {
        params: { 
          page: page, // API s·ª≠ d·ª•ng 1-based index
          size: size,
          includeImages: true // Request to include image URLs in response
        }
      });
      
      console.log('‚úÖ Real API Response for recent administrations:', response.data);
      console.log('üîç DEBUG - Full response structure:', JSON.stringify(response.data, null, 2));
      
      // Check different possible response structures
      let actualData = [];
      let totalItems = 0;
      let totalPages = 0;
      
      if (response.data.data && response.data.data.content) {
        // Backend structure: { status: "success", data: { content: [...], totalElements: X } }
        actualData = response.data.data.content;
        totalItems = response.data.data.totalElements || 0;
        totalPages = response.data.data.totalPages || 0;
        console.log('üîç Using backend nested structure (data.data.content)');
      } else if (response.data.content) {
        // Spring Boot pageable response structure
        actualData = response.data.content;
        totalItems = response.data.totalElements || 0;
        totalPages = response.data.totalPages || 0;
        console.log('üîç Using Spring Boot pageable structure');
      } else if (response.data.data) {
        // Nested data structure
        actualData = response.data.data;
        totalItems = response.data.totalItems || actualData.length;
        totalPages = response.data.totalPages || Math.ceil(totalItems / size);
        console.log('üîç Using nested data structure');
      } else if (Array.isArray(response.data)) {
        // Direct array response
        actualData = response.data;
        totalItems = actualData.length;
        totalPages = Math.ceil(totalItems / size);
        console.log('üîç Using direct array structure');
      } else {
        console.log('üîç Unknown response structure, checking all properties...');
        for (const [key, value] of Object.entries(response.data)) {
          console.log(`üîç Property ${key}:`, value);
          if (Array.isArray(value)) {
            console.log(`üîç Found array in property ${key} with ${value.length} items`);
            actualData = value;
            totalItems = value.length;
            totalPages = Math.ceil(totalItems / size);
            break;
          }
        }
      }
      
      // Process and enhance data to include image URLs if not present
      if (Array.isArray(actualData)) {
        actualData = actualData.map(item => {
          // Log each item to see its structure
          console.log('üîç Processing administration item:', item);
          
          // Ensure imageUrl field exists - check various possible field names
          const imageUrl = item.imageUrl || 
                          item.confirmationImageUrl || 
                          item.image_url || 
                          item.confirmation_image_url ||
                          item.attachmentUrl ||
                          null;
          
          return {
            ...item,
            imageUrl: imageUrl
          };
        });
        
        console.log(`‚úÖ Enhanced data with images: ${actualData.length} items`);
        // Log first item to see structure
        if (actualData.length > 0) {
          console.log('üîç First item structure:', actualData[0]);
        }
      }
      
      console.log(`‚úÖ Final extracted data: ${actualData.length} items`);
      console.log(`‚úÖ Total items: ${totalItems}, Total pages: ${totalPages}`);
      
      // Ensure we always return an array
      if (!Array.isArray(actualData)) {
        console.log('‚ö†Ô∏è WARNING - actualData is not an array, forcing to empty array');
        actualData = [];
      }
      
      return {
        success: true,
        data: actualData,
        totalItems: totalItems,
        totalPages: totalPages,
        currentPage: page
      };
    } catch (error) {
      console.error("‚ùå Error in getRecentMedicationAdministrations:", error);
      console.error("‚ùå Error response:", error.response);
      console.error("‚ùå Error status:", error.response?.status);
      console.error("‚ùå Error data:", error.response?.data);
      
      // Return error without fallback to mock data
      return {
        success: false,
        data: [],
        totalItems: 0,
        totalPages: 0,
        currentPage: page,
        message: error.response?.data?.message || error.message || "Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ d√πng thu·ªëc - vui l√≤ng ki·ªÉm tra backend server"
      };
    }
  },

  // T·∫°o b·∫£n ghi cung c·∫•p thu·ªëc m·ªõi - Function ƒë∆∞·ª£c g·ªçi b·ªüi MedicationAdministration.jsx
  createMedicationAdministration: async (data) => {
    try {
      console.log('üîÑ Creating new medication administration via REAL API:', data);
      console.log('üîÑ Using API endpoint:', apiService1.defaults.baseURL);
      
      // G·ªçi API th·∫≠t v·ªõi endpoint ch√≠nh x√°c
      const response = await apiService1.post('', data);
      
      console.log('‚úÖ Real API Response for create:', response.data);
      
      return {
        success: true,
        data: response.data,
        message: "ƒê√£ t·∫°o b·∫£n ghi cung c·∫•p thu·ªëc th√†nh c√¥ng"
      };
    } catch (error) {
      console.error("‚ùå Error in createMedicationAdministration:", error);
      console.error("‚ùå Error response:", error.response);
      console.error("‚ùå Error status:", error.response?.status);
      console.error("‚ùå Error data:", error.response?.data);
      
      // Enhanced error handling for different HTTP status codes
      let errorMessage = "Kh√¥ng th·ªÉ t·∫°o b·∫£n ghi cung c·∫•p thu·ªëc";
      
      if (!error.response) {
        errorMessage = "Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server. Vui l√≤ng ki·ªÉm tra xem backend c√≥ ƒëang ch·∫°y kh√¥ng?";
      } else {
        switch (error.response.status) {
          case 400:
            errorMessage = error.response.data?.message || "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá";
            break;
          case 401:
            errorMessage = "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.";
            break;
          case 403:
            errorMessage = "Kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y";
            break;
          case 404:
            errorMessage = "Endpoint API kh√¥ng t·ªìn t·∫°i";
            break;
          case 422:
            errorMessage = error.response.data?.message || "D·ªØ li·ªáu kh√¥ng th·ªÉ x·ª≠ l√Ω";
            break;
          case 500:
          default:
            errorMessage = error.response.data?.message || "L·ªói server n·ªôi b·ªô";
            break;
        }
      }
      
      return {
        success: false,
        message: errorMessage
      };
    }
  },

  // Upload ·∫£nh x√°c nh·∫≠n - Function ƒë∆∞·ª£c g·ªçi b·ªüi MedicationAdministration.jsx
  uploadConfirmationImage: async (administrationId, imageFile) => {
    try {
      console.log(`Uploading confirmation image for administration ${administrationId}`);
      
      // T·∫°o FormData ƒë·ªÉ upload file
      const formData = new FormData();
      formData.append('image', imageFile);
      
      // G·ªçi API th·∫≠t v·ªõi endpoint ch√≠nh x√°c
      const response = await apiService1.post(`/${administrationId}/upload-confirmation-image`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });
      
      console.log('API Response for image upload:', response.data);
      
      return {
        success: true,
        data: response.data,
        message: "ƒê√£ t·∫£i l√™n ·∫£nh x√°c nh·∫≠n th√†nh c√¥ng"
      };
    } catch (error) {
      console.error("Error in uploadConfirmationImage:", error);
      console.error("Error response:", error.response);
      
      return {
        success: false,
        message: error.response?.data?.message || error.message || "Kh√¥ng th·ªÉ t·∫£i l√™n ·∫£nh x√°c nh·∫≠n"
      };
    }
  },

  // API ƒë·ªÉ l·∫•y t·∫•t c·∫£ l·ªãch s·ª≠ d√πng thu·ªëc
  getAllMedicationAdministrations: async (page = 1, size = 10) => {
    try {
      console.log('üîç Calling getAllMedicationAdministrations API...');
      console.log('API URL:', `${BASE_URL1}/all`);
      
      // G·ªçi API th·∫≠t v·ªõi endpoint /all
      const response = await apiService1.get('/all');
      
      console.log('‚úÖ API Response:', response.data);
      
      // Ki·ªÉm tra format response
      if (response.data && response.data.status === 'success') {
        const allData = response.data.data || [];
        const totalItems = response.data.count || allData.length;
        
        // Th·ª±c hi·ªán ph√¢n trang tr√™n client side
        const startIndex = (page - 1) * size;
        const endIndex = startIndex + size;
        const paginatedData = allData.slice(startIndex, endIndex);
        const totalPages = Math.ceil(totalItems / size);
        
        return {
          status: 'success',
          data: {
            posts: paginatedData,
            totalItems: totalItems,
            totalPages: totalPages,
            currentPage: page
          }
        };
      } else {
        throw new Error('Invalid response format from API');
      }
    } catch (error) {
      console.error("‚ùå Error in getAllMedicationAdministrations:", error);
      console.error("‚ùå Error response:", error.response);
      
      // Return error without fallback to mock data
      throw {
        success: false,
        message: error.response?.data?.message || error.message || "Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ d√πng thu·ªëc - vui l√≤ng ki·ªÉm tra backend server"
      };
    }
  },
  
  // Note: Add, Edit, Delete functions removed - Medication History is now read-only
  // Only view and search functionality is available for L·ªãch S·ª≠ D√πng Thu·ªëc
};

export default receiveMedicineService;
